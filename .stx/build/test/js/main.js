// Generated by Haxe 4.3.0-rc.1
(function ($hx_exports, $global) { "use strict";
$hx_exports["stx"] = $hx_exports["stx"] || {};
$hx_exports["stx"]["nano"] = $hx_exports["stx"]["nano"] || {};
$hx_exports["stx"]["nano"]["_Contract"] = $hx_exports["stx"]["nano"]["_Contract"] || {};
;$hx_exports["stx"]["pico"] = $hx_exports["stx"]["pico"] || {};
$hx_exports["stx"]["pico"]["_Option"] = $hx_exports["stx"]["pico"]["_Option"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var js_node_ChildProcess = require("child_process");
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var Sys = function() { };
$hxClasses["Sys"] = Sys;
Sys.__name__ = "Sys";
Sys.environment = function() {
	var m = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(process.env);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var v = process.env[key];
		m.h[key] = v;
	}
	return m;
};
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Console = function() { };
$hxClasses["Console"] = Console;
Console.__name__ = "Console";
Console.printlnFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	Console.printFormatted(s + "\n",outputStream);
};
Console.println = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	Console.print(s + "\n",outputStream);
};
Console.format = function(s,formatMode) {
	s += "<//>";
	var activeFormatFlagStack = [];
	var groupedProceedingTags = [];
	var browserFormatArguments = [];
	var result = Console.formatTagPattern.map(s,function(e) {
		var escaped = e.matched(1) != null;
		if(escaped) {
			return e.matched(0);
		}
		var open = e.matched(2) == null;
		var tags = e.matched(3).split(",");
		if(!open && tags.length == 1) {
			if(tags[0] == "") {
				var last = activeFormatFlagStack[activeFormatFlagStack.length - 1];
				var i = activeFormatFlagStack.indexOf(last);
				if(i != -1) {
					var proceedingTags = groupedProceedingTags[i];
					activeFormatFlagStack.splice(i - proceedingTags,proceedingTags + 1);
					groupedProceedingTags.splice(i - proceedingTags,proceedingTags + 1);
				}
			} else if(FormatFlag.fromString(tags[0]) == "reset") {
				activeFormatFlagStack = [];
				groupedProceedingTags = [];
			} else {
				var flag = FormatFlag.fromString(tags[0]);
				if(flag != null) {
					var i = activeFormatFlagStack.indexOf(flag);
					if(i != -1) {
						var proceedingTags = groupedProceedingTags[i];
						activeFormatFlagStack.splice(i - proceedingTags,proceedingTags + 1);
						groupedProceedingTags.splice(i - proceedingTags,proceedingTags + 1);
					}
				}
			}
		} else {
			var proceedingTags = 0;
			var _g = 0;
			while(_g < tags.length) {
				var tag = tags[_g];
				++_g;
				var flag = FormatFlag.fromString(tag);
				if(flag == null) {
					return e.matched(0);
				}
				if(open) {
					activeFormatFlagStack.push(flag);
					groupedProceedingTags.push(proceedingTags);
					++proceedingTags;
				} else {
					var i = activeFormatFlagStack.indexOf(flag);
					if(i != -1) {
						var proceedingTags1 = groupedProceedingTags[i];
						activeFormatFlagStack.splice(i - proceedingTags1,proceedingTags1 + 1);
						groupedProceedingTags.splice(i - proceedingTags1,proceedingTags1 + 1);
					}
				}
			}
		}
		switch(formatMode) {
		case 0:
			if(open) {
				if(activeFormatFlagStack.length > 0) {
					var lastFlagCount = groupedProceedingTags[groupedProceedingTags.length - 1] + 1;
					var asciiFormatString = "";
					var _g = 0;
					var _g1 = lastFlagCount;
					while(_g < _g1) {
						var i = _g++;
						var idx = groupedProceedingTags.length - 1 - i;
						asciiFormatString += Console.getAsciiFormat(activeFormatFlagStack[idx]);
					}
					return asciiFormatString;
				} else {
					return "";
				}
			} else {
				var result = Console.getAsciiFormat("reset");
				var result1 = new Array(activeFormatFlagStack.length);
				var _g = 0;
				var _g1 = activeFormatFlagStack.length;
				while(_g < _g1) {
					var i = _g++;
					result1[i] = Console.getAsciiFormat(activeFormatFlagStack[i]);
				}
				var _g = [];
				var _g1 = 0;
				var _g2 = result1;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != null) {
						_g.push(v);
					}
				}
				return result + _g.join("");
			}
			break;
		case 1:
			var browserFormatArguments1 = browserFormatArguments;
			var result = new Array(activeFormatFlagStack.length);
			var _g = 0;
			var _g1 = activeFormatFlagStack.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = Console.getBrowserFormat(activeFormatFlagStack[i]);
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = result;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(v != null) {
					_g.push(v);
				}
			}
			browserFormatArguments1.push(_g.join(";"));
			return "%c";
		case 2:
			return "";
		}
	});
	return { formatted : result, browserFormatArguments : browserFormatArguments};
};
Console.stripFormatting = function(s) {
	return Console.format(s,2).formatted;
};
Console.printFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	var result = Console.format(s,Console.formatMode);
	if(Console.formatMode == 1) {
		var logArgs = [result.formatted].concat(result.browserFormatArguments);
		switch(outputStream) {
		case 1:
			console.warn.apply(console, logArgs);
			break;
		case 2:
			console.error.apply(console, logArgs);
			break;
		case 0:case 3:
			console.log.apply(console, logArgs);
			break;
		}
		return;
	}
	Console.print(result.formatted,outputStream);
};
Console.print = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	if(Console.printIntercept != null) {
		var allowDefaultPrint = Console.printIntercept(s,outputStream);
		if(!allowDefaultPrint) {
			return;
		}
	}
	if(Console.unicodeCompatibilityMode == 1 && !Console.unicodeCompatibilityEnabled) {
		Console.exec("chcp 65001");
		Console.unicodeCompatibilityEnabled = true;
	}
	switch(outputStream) {
	case 1:case 2:
		new _$Sys_FileOutput(2).writeString(s);
		break;
	case 0:case 3:
		new _$Sys_FileOutput(1).writeString(s);
		break;
	}
};
Console.getAsciiFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		var hex = HxOverrides.substr(flag,1,null);
		var r = Std.parseInt("0x" + HxOverrides.substr(hex,0,2));
		var g = Std.parseInt("0x" + HxOverrides.substr(hex,2,2));
		var b = Std.parseInt("0x" + HxOverrides.substr(hex,4,2));
		return "\x1B[38;5;" + Console.rgbToAscii256(r,g,b) + "m";
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		var hex = HxOverrides.substr(flag,3,null);
		var r = Std.parseInt("0x" + HxOverrides.substr(hex,0,2));
		var g = Std.parseInt("0x" + HxOverrides.substr(hex,2,2));
		var b = Std.parseInt("0x" + HxOverrides.substr(hex,4,2));
		return "\x1B[48;5;" + Console.rgbToAscii256(r,g,b) + "m";
	}
	switch(flag) {
	case "bg_black":
		return "\x1B[48;5;" + 0 + "m";
	case "bg_blue":
		return "\x1B[48;5;" + 4 + "m";
	case "bg_cyan":
		return "\x1B[48;5;" + 6 + "m";
	case "bg_green":
		return "\x1B[48;5;" + 2 + "m";
	case "bg_light_black":
		return "\x1B[48;5;" + 8 + "m";
	case "bg_light_blue":
		return "\x1B[48;5;" + 12 + "m";
	case "bg_light_cyan":
		return "\x1B[48;5;" + 14 + "m";
	case "bg_light_green":
		return "\x1B[48;5;" + 10 + "m";
	case "bg_light_magenta":
		return "\x1B[48;5;" + 13 + "m";
	case "bg_light_red":
		return "\x1B[48;5;" + 9 + "m";
	case "bg_light_white":
		return "\x1B[48;5;" + 15 + "m";
	case "bg_light_yellow":
		return "\x1B[48;5;" + 11 + "m";
	case "bg_magenta":
		return "\x1B[48;5;" + 5 + "m";
	case "bg_red":
		return "\x1B[48;5;" + 1 + "m";
	case "bg_white":
		return "\x1B[48;5;" + 7 + "m";
	case "bg_yellow":
		return "\x1B[48;5;" + 3 + "m";
	case "black":
		return "\x1B[38;5;" + 0 + "m";
	case "blink":
		return "\x1B[5m";
	case "blue":
		return "\x1B[38;5;" + 4 + "m";
	case "bold":
		return "\x1B[1m";
	case "cyan":
		return "\x1B[38;5;" + 6 + "m";
	case "dim":
		return "\x1B[2m";
	case "green":
		return "\x1B[38;5;" + 2 + "m";
	case "hidden":
		return "\x1B[8m";
	case "invert":
		return "\x1B[7m";
	case "italic":
		return "\x1B[3m";
	case "light_black":
		return "\x1B[38;5;" + 8 + "m";
	case "light_blue":
		return "\x1B[38;5;" + 12 + "m";
	case "light_cyan":
		return "\x1B[38;5;" + 14 + "m";
	case "light_green":
		return "\x1B[38;5;" + 10 + "m";
	case "light_magenta":
		return "\x1B[38;5;" + 13 + "m";
	case "light_red":
		return "\x1B[38;5;" + 9 + "m";
	case "light_white":
		return "\x1B[38;5;" + 15 + "m";
	case "light_yellow":
		return "\x1B[38;5;" + 11 + "m";
	case "magenta":
		return "\x1B[38;5;" + 5 + "m";
	case "red":
		return "\x1B[38;5;" + 1 + "m";
	case "reset":
		return "\x1B[m";
	case "underline":
		return "\x1B[4m";
	case "white":
		return "\x1B[38;5;" + 7 + "m";
	case "yellow":
		return "\x1B[38;5;" + 3 + "m";
	default:
		return "";
	}
};
Console.rgbToAscii256 = function(r,g,b) {
	var nearIdx = function(c,set) {
		var delta = Infinity;
		var index = -1;
		var _g = 0;
		var _g1 = set.length;
		while(_g < _g1) {
			var i = _g++;
			var d = Math.abs(c - set[i]);
			if(d < delta) {
				delta = d;
				index = i;
			}
		}
		return index;
	};
	var colorSteps = [0,95,135,175,215,255];
	var ir = nearIdx(r,colorSteps);
	var ig = nearIdx(g,colorSteps);
	var ib = nearIdx(b,colorSteps);
	var ier = Math.abs(r - colorSteps[ir]);
	var ieg = Math.abs(g - colorSteps[ig]);
	var ieb = Math.abs(b - colorSteps[ib]);
	var averageColorError = ier + ieg + ieb;
	var jr = Math.round((r - 8) / 10);
	var jg = Math.round((g - 8) / 10);
	var jb = Math.round((b - 8) / 10);
	var jer = Math.abs(r - Math.max(Math.min(jr * 10 + 8,238),8));
	var jeg = Math.abs(g - Math.max(Math.min(jg * 10 + 8,238),8));
	var jeb = Math.abs(b - Math.max(Math.min(jb * 10 + 8,238),8));
	var averageGrayError = jer + jeg + jeb;
	if(averageGrayError < averageColorError && r == g && g == b) {
		var grayIndex = jr + 232;
		return grayIndex;
	} else {
		var colorIndex = 16 + ir * 36 + ig * 6 + ib;
		return colorIndex;
	}
};
Console.getBrowserFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		return "color: " + flag;
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		return "background-color: " + HxOverrides.substr(flag,2,null);
	}
	if(flag.charAt(0) == "{") {
		return HxOverrides.substr(flag,1,flag.length - 2);
	}
	switch(flag) {
	case "bg_black":
		return "background-color: black";
	case "bg_blue":
		return "background-color: blue";
	case "bg_cyan":
		return "background-color: cyan";
	case "bg_green":
		return "background-color: green";
	case "bg_light_black":
		return "background-color: gray";
	case "bg_light_blue":
		return "background-color: lightBlue";
	case "bg_light_cyan":
		return "background-color: lightCyan";
	case "bg_light_green":
		return "background-color: lightGreen";
	case "bg_light_magenta":
		return "background-color: lightPink";
	case "bg_light_red":
		return "background-color: salmon";
	case "bg_light_white":
		return "background-color: white";
	case "bg_light_yellow":
		return "background-color: lightYellow";
	case "bg_magenta":
		return "background-color: magenta";
	case "bg_red":
		return "background-color: red";
	case "bg_white":
		return "background-color: whiteSmoke";
	case "bg_yellow":
		return "background-color: gold";
	case "black":
		return "color: black";
	case "blink":
		return "text-decoration: blink";
	case "blue":
		return "color: blue";
	case "bold":
		return "font-weight: bold";
	case "cyan":
		return "color: cyan";
	case "dim":
		return "color: gray";
	case "green":
		return "color: green";
	case "hidden":
		return "visibility: hidden; color: white";
	case "invert":
		return "-webkit-filter: invert(100%); filter: invert(100%)";
	case "italic":
		return "font-style: italic";
	case "light_black":
		return "color: gray";
	case "light_blue":
		return "color: lightBlue";
	case "light_cyan":
		return "color: lightCyan";
	case "light_green":
		return "color: lightGreen";
	case "light_magenta":
		return "color: lightPink";
	case "light_red":
		return "color: salmon";
	case "light_white":
		return "color: white";
	case "light_yellow":
		return "color: #ffed88";
	case "magenta":
		return "color: magenta";
	case "red":
		return "color: red";
	case "reset":
		return "";
	case "underline":
		return "text-decoration: underline";
	case "white":
		return "color: whiteSmoke";
	case "yellow":
		return "color: #f5ba00";
	default:
		return "";
	}
};
Console.determineConsoleFormatMode = function() {
	var hasWindowObject = typeof(window) != "undefined";
	if(hasWindowObject) {
		return 1;
	}
	var tputColors = Console.exec("tput colors");
	if(tputColors.exit == 0) {
		var tputResult = Std.parseInt(tputColors.stdout);
		if(tputResult != null && tputResult > 2) {
			return 0;
		}
	}
	var termEnv = Sys.environment().h["TERM"];
	if(termEnv != null && new EReg("cygwin|xterm|vt100","").match(termEnv)) {
		return 0;
	}
	return 2;
};
Console.exec = function(cmd,args) {
	var p = js_node_ChildProcess.spawnSync(cmd,args != null ? args : [],{ });
	var stdout = p.stdout == null ? "" : p.stdout.toString();
	if(stdout == null) {
		stdout = "";
	}
	return { exit : p.status, stdout : stdout};
};
var FormatFlag = {};
FormatFlag.fromString = function(str) {
	str = str.toLowerCase();
	if(str.charAt(0) == "#" || HxOverrides.substr(str,0,3) == "bg#") {
		var hIdx = str.indexOf("#");
		var hex = HxOverrides.substr(str,hIdx + 1,null);
		if(hex.length == 3) {
			var a = hex.split("");
			hex = [a[0],a[0],a[1],a[1],a[2],a[2]].join("");
		}
		if(new EReg("[^0-9a-f]","i").match(hex) || hex.length < 6) {
			return "";
		}
		var normalized = str.substring(0,hIdx) + "#" + hex;
		return normalized;
	}
	switch(str) {
	case "!":
		return "invert";
	case "/":
		return "reset";
	case "b":
		return "bold";
	case "bg_gray":
		return "bg_light_black";
	case "gray":
		return "light_black";
	case "i":
		return "italic";
	case "u":
		return "underline";
	default:
		return str;
	}
};
var _$Date_Date_$Impl_$ = function() { };
$hxClasses["_Date.Date_Impl_"] = _$Date_Date_$Impl_$;
_$Date_Date_$Impl_$.__name__ = "_Date.Date_Impl_";
_$Date_Date_$Impl_$.now = function() {
	return new Date();
};
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.keyValueIter = function(a) {
	return new haxe_iterators_ArrayKeyValueIterator(a);
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new haxe_ds_List();
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(i++,x1));
	}
	return l;
};
Lambda.flatten = function(it) {
	var l = new haxe_ds_List();
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new haxe_ds_List();
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	var x = $getIterator(b);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	return l;
};
Math.__name__ = "Math";
var _$Printf_FormatFlag = $hxEnums["_Printf.FormatFlag"] = { __ename__:"_Printf.FormatFlag",__constructs__:null
	,Minus: {_hx_name:"Minus",_hx_index:0,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Plus: {_hx_name:"Plus",_hx_index:1,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Space: {_hx_name:"Space",_hx_index:2,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Sharp: {_hx_name:"Sharp",_hx_index:3,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:4,__enum__:"_Printf.FormatFlag",toString:$estr}
	,LengthH: {_hx_name:"LengthH",_hx_index:5,__enum__:"_Printf.FormatFlag",toString:$estr}
	,LengthUpperCaseL: {_hx_name:"LengthUpperCaseL",_hx_index:6,__enum__:"_Printf.FormatFlag",toString:$estr}
	,LengthLowerCaseL: {_hx_name:"LengthLowerCaseL",_hx_index:7,__enum__:"_Printf.FormatFlag",toString:$estr}
	,UpperCase: {_hx_name:"UpperCase",_hx_index:8,__enum__:"_Printf.FormatFlag",toString:$estr}
};
_$Printf_FormatFlag.__constructs__ = [_$Printf_FormatFlag.Minus,_$Printf_FormatFlag.Plus,_$Printf_FormatFlag.Space,_$Printf_FormatFlag.Sharp,_$Printf_FormatFlag.Zero,_$Printf_FormatFlag.LengthH,_$Printf_FormatFlag.LengthUpperCaseL,_$Printf_FormatFlag.LengthLowerCaseL,_$Printf_FormatFlag.UpperCase];
var _$Printf_FormatArgs = function(flags,pos,width,precision) {
	this.flags = flags;
	this.pos = pos;
	this.width = width;
	this.precision = precision;
};
$hxClasses["_Printf.FormatArgs"] = _$Printf_FormatArgs;
_$Printf_FormatArgs.__name__ = "_Printf.FormatArgs";
_$Printf_FormatArgs.prototype = {
	flags: null
	,pos: null
	,width: null
	,precision: null
	,__class__: _$Printf_FormatArgs
};
var _$Printf_FormatToken = $hxEnums["_Printf.FormatToken"] = { __ename__:"_Printf.FormatToken",__constructs__:null
	,Raw: ($_=function(string) { return {_hx_index:0,string:string,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Raw",$_.__params__ = ["string"],$_)
	,Tag: ($_=function(type,args) { return {_hx_index:1,type:type,args:args,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Tag",$_.__params__ = ["type","args"],$_)
	,Property: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Property",$_.__params__ = ["name"],$_)
	,Unknown: ($_=function(string,pos) { return {_hx_index:3,string:string,pos:pos,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["string","pos"],$_)
};
_$Printf_FormatToken.__constructs__ = [_$Printf_FormatToken.Raw,_$Printf_FormatToken.Tag,_$Printf_FormatToken.Property,_$Printf_FormatToken.Unknown];
var _$Printf_FormatDataType = $hxEnums["_Printf.FormatDataType"] = { __ename__:"_Printf.FormatDataType",__constructs__:null
	,FmtInt: ($_=function(type) { return {_hx_index:0,type:type,__enum__:"_Printf.FormatDataType",toString:$estr}; },$_._hx_name="FmtInt",$_.__params__ = ["type"],$_)
	,FmtFloat: ($_=function(floatType) { return {_hx_index:1,floatType:floatType,__enum__:"_Printf.FormatDataType",toString:$estr}; },$_._hx_name="FmtFloat",$_.__params__ = ["floatType"],$_)
	,FmtString: {_hx_name:"FmtString",_hx_index:2,__enum__:"_Printf.FormatDataType",toString:$estr}
	,FmtPointer: {_hx_name:"FmtPointer",_hx_index:3,__enum__:"_Printf.FormatDataType",toString:$estr}
	,FmtNothing: {_hx_name:"FmtNothing",_hx_index:4,__enum__:"_Printf.FormatDataType",toString:$estr}
};
_$Printf_FormatDataType.__constructs__ = [_$Printf_FormatDataType.FmtInt,_$Printf_FormatDataType.FmtFloat,_$Printf_FormatDataType.FmtString,_$Printf_FormatDataType.FmtPointer,_$Printf_FormatDataType.FmtNothing];
var _$Printf_IntType = $hxEnums["_Printf.IntType"] = { __ename__:"_Printf.IntType",__constructs__:null
	,ICharacter: {_hx_name:"ICharacter",_hx_index:0,__enum__:"_Printf.IntType",toString:$estr}
	,ISignedDecimal: {_hx_name:"ISignedDecimal",_hx_index:1,__enum__:"_Printf.IntType",toString:$estr}
	,IUnsignedDecimal: {_hx_name:"IUnsignedDecimal",_hx_index:2,__enum__:"_Printf.IntType",toString:$estr}
	,IOctal: {_hx_name:"IOctal",_hx_index:3,__enum__:"_Printf.IntType",toString:$estr}
	,IHex: {_hx_name:"IHex",_hx_index:4,__enum__:"_Printf.IntType",toString:$estr}
	,IBin: {_hx_name:"IBin",_hx_index:5,__enum__:"_Printf.IntType",toString:$estr}
};
_$Printf_IntType.__constructs__ = [_$Printf_IntType.ICharacter,_$Printf_IntType.ISignedDecimal,_$Printf_IntType.IUnsignedDecimal,_$Printf_IntType.IOctal,_$Printf_IntType.IHex,_$Printf_IntType.IBin];
var _$Printf_FloatType = $hxEnums["_Printf.FloatType"] = { __ename__:"_Printf.FloatType",__constructs__:null
	,FNormal: {_hx_name:"FNormal",_hx_index:0,__enum__:"_Printf.FloatType",toString:$estr}
	,FScientific: {_hx_name:"FScientific",_hx_index:1,__enum__:"_Printf.FloatType",toString:$estr}
	,FNatural: {_hx_name:"FNatural",_hx_index:2,__enum__:"_Printf.FloatType",toString:$estr}
};
_$Printf_FloatType.__constructs__ = [_$Printf_FloatType.FNormal,_$Printf_FloatType.FScientific,_$Printf_FloatType.FNatural];
var Printf = function() { };
$hxClasses["Printf"] = Printf;
Printf.__name__ = "Printf";
Printf._padChars = null;
Printf._tmp = null;
Printf.init = function() {
	var this1 = new Array(40);
	Printf._padChars = this1;
	Printf._padChars[0] = StringTools.rpad("","0",0);
	Printf._padChars[1] = StringTools.rpad("","0",1);
	Printf._padChars[2] = StringTools.rpad("","0",2);
	Printf._padChars[3] = StringTools.rpad("","0",3);
	Printf._padChars[4] = StringTools.rpad("","0",4);
	Printf._padChars[5] = StringTools.rpad("","0",5);
	Printf._padChars[6] = StringTools.rpad("","0",6);
	Printf._padChars[7] = StringTools.rpad("","0",7);
	Printf._padChars[8] = StringTools.rpad("","0",8);
	Printf._padChars[9] = StringTools.rpad("","0",9);
	Printf._padChars[10] = StringTools.rpad("","0",10);
	Printf._padChars[11] = StringTools.rpad("","0",11);
	Printf._padChars[12] = StringTools.rpad("","0",12);
	Printf._padChars[13] = StringTools.rpad("","0",13);
	Printf._padChars[14] = StringTools.rpad("","0",14);
	Printf._padChars[15] = StringTools.rpad("","0",15);
	Printf._padChars[16] = StringTools.rpad("","0",16);
	Printf._padChars[17] = StringTools.rpad("","0",17);
	Printf._padChars[18] = StringTools.rpad("","0",18);
	Printf._padChars[19] = StringTools.rpad("","0",19);
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		Printf._padChars[i + 20] = StringTools.rpad(""," ",i);
	}
	var this1 = new Array(64);
	Printf._tmp = this1;
};
Printf.format = function(fmt,args) {
	if(!Printf._initialized) {
		Printf._initialized = true;
		Printf.init();
	}
	var output = new StringBuf();
	var argIndex = 0;
	var tokens = [];
	var _g = 0;
	var _g1 = Printf.tokenize(fmt,tokens);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = tokens[i];
		switch(_g2._hx_index) {
		case 0:
			var string = _g2.string;
			output.b += string == null ? "null" : "" + string;
			break;
		case 1:
			var type = _g2.type;
			var tagArgs = _g2.args;
			if(tagArgs.width == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw haxe_Exception.thrown(new PrintfError("invalid 'width' argument"));
				}
				tagArgs.width = args[argIndex++];
			}
			if(tagArgs.precision == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw haxe_Exception.thrown(new PrintfError("invalid 'precision' argument"));
				}
				tagArgs.precision = args[argIndex++];
			}
			var value;
			if(tagArgs.pos > -1) {
				if(tagArgs.pos > args.length - 1) {
					throw haxe_Exception.thrown(new PrintfError("argument index out of range"));
				}
				value = args[tagArgs.pos];
			} else {
				value = args[argIndex++];
			}
			if(value == null) {
				value = "null";
			}
			switch(type._hx_index) {
			case 0:
				var intType = type.type;
				switch(intType._hx_index) {
				case 0:
					Printf.formatCharacter(value,tagArgs,output);
					break;
				case 1:
					Printf.formatSignedDecimal(value,tagArgs,output);
					break;
				case 2:
					Printf.formatUnsignedDecimal(value,tagArgs,output);
					break;
				case 3:
					Printf.formatOctal(value,tagArgs,output);
					break;
				case 4:
					Printf.formatHexadecimal(value,tagArgs,output);
					break;
				case 5:
					Printf.formatBinary(value,tagArgs,output);
					break;
				}
				break;
			case 1:
				var floatType = type.floatType;
				switch(floatType._hx_index) {
				case 0:
					Printf.formatFloat(value,tagArgs,output);
					break;
				case 1:
					Printf.formatScientific(value,tagArgs,output);
					break;
				case 2:
					Printf.formatNaturalFloat(value,tagArgs,output);
					break;
				}
				break;
			case 2:
				Printf.formatString(Std.string(value),tagArgs,output);
				break;
			case 3:
				throw haxe_Exception.thrown(new PrintfError("specifier 'p' is not supported"));
			case 4:
				throw haxe_Exception.thrown(new PrintfError("specifier 'n' is not supported"));
			}
			break;
		case 2:
			var name = _g2.name;
			if(!Object.prototype.hasOwnProperty.call(args[0],name)) {
				throw haxe_Exception.thrown(new PrintfError("no field named \"" + name + "\" found"));
			}
			output.b += Std.string(Std.string(Reflect.field(args[0],name)));
			++argIndex;
			break;
		case 3:
			var _g3 = _g2.string;
			var _g4 = _g2.pos;
			throw haxe_Exception.thrown(new PrintfError("Invalid format specifier."));
		}
	}
	return output.b;
};
Printf.tokenize = function(fmt,output) {
	var i = 0;
	var c = 0;
	var n = 0;
	var buf = new StringBuf();
	var k = fmt.length;
	while(i < k) {
		c = fmt.charCodeAt(i++);
		if(c == 37) {
			c = fmt.charCodeAt(i++);
			if(c == 37) {
				buf.b += String.fromCodePoint(c);
				continue;
			}
			if(buf.b.length > 0) {
				output[n++] = _$Printf_FormatToken.Raw(buf.b);
				buf = new StringBuf();
			}
			var token;
			if(c == 40) {
				var endPos = fmt.indexOf(")",i);
				if(endPos == -1) {
					token = _$Printf_FormatToken.Unknown("named parameter",i);
				} else {
					var paramName = HxOverrides.substr(fmt,i,endPos - i);
					i = endPos + 1;
					token = _$Printf_FormatToken.Property(paramName);
				}
			} else {
				var i1 = 0;
				if(i1 == null) {
					i1 = 0;
				}
				var this1 = i1;
				var params = new _$Printf_FormatArgs(this1,-1,-1,-1);
				_hx_loop2: while(c >= 32 && c <= 48) switch(c) {
				case 32:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Space._hx_index;
					break;
				case 35:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Sharp._hx_index;
					break;
				case 43:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Plus._hx_index;
					break;
				case 45:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Minus._hx_index;
					break;
				case 48:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Zero._hx_index;
					break;
				default:
					break _hx_loop2;
				}
				if((params.flags & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0 && (params.flags & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
					params.flags &= -1 - (1 << _$Printf_FormatFlag.Zero._hx_index);
				}
				if((params.flags & 1 << _$Printf_FormatFlag.Space._hx_index) != 0 && (params.flags & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0) {
					params.flags &= -1 - (1 << _$Printf_FormatFlag.Space._hx_index);
				}
				if(c == 42) {
					params.width = null;
					c = fmt.charCodeAt(i++);
				} else if(c >= 48 && c <= 57) {
					var w = 0;
					while(c >= 48 && c <= 57) {
						w = c - 48 + w * 10;
						c = fmt.charCodeAt(i++);
					}
					params.width = w;
					if(c == 36) {
						params.pos = w - 1;
						params.width = -1;
						c = fmt.charCodeAt(i++);
						if(c == 42) {
							params.width = null;
							c = fmt.charCodeAt(i++);
						} else if(c >= 48 && c <= 57) {
							var w1 = 0;
							while(c >= 48 && c <= 57) {
								w1 = c - 48 + w1 * 10;
								c = fmt.charCodeAt(i++);
							}
							params.width = w1;
						}
					}
				}
				if(c == 46) {
					c = fmt.charCodeAt(i++);
					if(c == 42) {
						params.precision = null;
						c = fmt.charCodeAt(i++);
					} else {
						var p = 0;
						if(c >= 48 && c <= 57) {
							while(c >= 48 && c <= 57) {
								p = c - 48 + p * 10;
								c = fmt.charCodeAt(i++);
							}
						}
						params.precision = p;
					}
				}
				_hx_loop6: while(c >= 76 && c <= 108) switch(c) {
				case 76:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.LengthUpperCaseL._hx_index;
					break;
				case 104:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.LengthH._hx_index;
					break;
				case 108:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.LengthLowerCaseL._hx_index;
					break;
				default:
					break _hx_loop6;
				}
				if(c >= 69 && c <= 120) {
					var type;
					switch(c) {
					case 69:
						params.flags |= 1 << _$Printf_FormatFlag.UpperCase._hx_index;
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FScientific);
						break;
					case 71:
						params.flags |= 1 << _$Printf_FormatFlag.UpperCase._hx_index;
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FNatural);
						break;
					case 88:
						params.flags |= 1 << _$Printf_FormatFlag.UpperCase._hx_index;
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IHex);
						break;
					case 98:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IBin);
						break;
					case 99:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.ICharacter);
						break;
					case 100:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.ISignedDecimal);
						break;
					case 101:
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FScientific);
						break;
					case 102:
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FNormal);
						break;
					case 103:
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FNatural);
						break;
					case 105:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.ISignedDecimal);
						break;
					case 110:
						type = _$Printf_FormatDataType.FmtNothing;
						break;
					case 111:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IOctal);
						break;
					case 112:
						type = _$Printf_FormatDataType.FmtPointer;
						break;
					case 115:
						type = _$Printf_FormatDataType.FmtString;
						break;
					case 117:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IUnsignedDecimal);
						break;
					case 120:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IHex);
						break;
					default:
						type = null;
					}
					token = type == null ? _$Printf_FormatToken.Unknown(String.fromCodePoint(c),i) : _$Printf_FormatToken.Tag(type,params);
				} else {
					token = _$Printf_FormatToken.Unknown(String.fromCodePoint(c),i);
				}
			}
			output[n++] = token;
		} else {
			buf.b += String.fromCodePoint(c);
		}
	}
	if(buf.b.length > 0) {
		output[n++] = _$Printf_FormatToken.Raw(buf.b);
	}
	return n;
};
Printf.formatBinary = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			return;
		}
		f &= -1 - (1 << _$Printf_FormatFlag.Sharp._hx_index);
	}
	if(p == -1) {
		p = 1;
	}
	var tmp = Printf._tmp;
	var l = 0;
	while(true) {
		tmp[l++] = value & 1;
		value >>>= 1;
		if(!(value > 0)) {
			break;
		}
	}
	var m = l;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0b";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) buf.b += String.fromCodePoint((48 + tmp[m]));
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0 && p == 1) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0b";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) buf.b += String.fromCodePoint((48 + tmp[m]));
	}
};
Printf.formatOctal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			buf.b += Std.string((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0 ? "0" : "");
			return;
		}
		f &= -1 - (1 << _$Printf_FormatFlag.Sharp._hx_index);
	}
	var tmp = Printf._tmp;
	var l = 0;
	while(true) {
		tmp[l++] = value & 7;
		value >>>= 3;
		if(!(value > 0)) {
			break;
		}
	}
	var m = l;
	if(p != -1) {
		if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
			f &= -1 - (1 << _$Printf_FormatFlag.Zero._hx_index);
			f |= 1 << _$Printf_FormatFlag.Space._hx_index;
		}
	} else {
		p = 1;
	}
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0";
			++l;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) {
			var x = String.fromCodePoint((48 + tmp[m]));
			buf.b += Std.string(x);
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			++l;
		}
		var k = l;
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) {
			var x = String.fromCodePoint((48 + tmp[m]));
			buf.b += Std.string(x);
		}
	}
};
Printf.formatHexadecimal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			return;
		}
		f &= -1 - (1 << _$Printf_FormatFlag.Sharp._hx_index);
	}
	if(p == -1) {
		p = 1;
	}
	var tmp = Printf._tmp;
	var l = 0;
	while(true) {
		tmp[l++] = value & 15;
		value >>>= 4;
		if(!(value > 0)) {
			break;
		}
	}
	var m = l;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			if((f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0) {
				buf.b += "0X";
			} else {
				buf.b += "0x";
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		var a = (f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0 ? 65 : 97;
		while(--m > -1) {
			var v = tmp[m];
			if(v < 10) {
				var x = String.fromCodePoint((48 + v));
				buf.b += Std.string(x);
			} else {
				var x1 = String.fromCodePoint((a + (v - 10)));
				buf.b += Std.string(x1);
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0 && p == 1) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			if((f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0) {
				buf.b += "0X";
			} else {
				buf.b += "0x";
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		var a = (f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0 ? 65 : 97;
		while(--m > -1) {
			var v = tmp[m];
			if(v < 10) {
				var x = String.fromCodePoint((48 + v));
				buf.b += Std.string(x);
			} else {
				var x1 = String.fromCodePoint((a + (v - 10)));
				buf.b += Std.string(x1);
			}
		}
	}
};
Printf.formatSignedDecimal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if(p == 0 && value == 0) {
		return;
	}
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	var s = Std.string(value < 0 ? -value : value);
	var l = s.length;
	var sign = value < 0 ? "-" : (f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : (f & 1 << _$Printf_FormatFlag.Space._hx_index) != 0 ? " " : null;
	var hasSign = sign != null;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += Std.string(s);
		if(p > l) {
			l = p;
		}
		l += hasSign ? 1 : 0;
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l + (hasSign ? 1 : 0);
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				if(hasSign) {
					buf.b += sign == null ? "null" : "" + sign;
				}
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if(hasSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) == 0) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += Std.string(s);
	}
};
Printf.formatUnsignedDecimal = function(value,args,buf) {
	if(value >= 0) {
		Printf.formatSignedDecimal(value,args,buf);
		return;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,value);
	var s = haxe_Int64.toString(this1);
	var l = s.length;
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
	}
};
Printf.formatNaturalFloat = function(value,args,buf) {
	var tmp = new StringBuf();
	Printf.formatFloat(value,args,tmp);
	var formatedFloat = tmp.b;
	haxe_Log.trace("formatedFloat " + formatedFloat,{ fileName : "Printf.hx", lineNumber : 729, className : "Printf", methodName : "formatNaturalFloat"});
	tmp = new StringBuf();
	Printf.formatScientific(value,args,tmp);
	var formatedScientific = tmp.b;
	haxe_Log.trace("formatedScientific " + formatedScientific,{ fileName : "Printf.hx", lineNumber : 735, className : "Printf", methodName : "formatNaturalFloat"});
	var s = formatedFloat.length <= formatedScientific.length ? formatedFloat : formatedScientific;
	buf.b += s == null ? "null" : "" + s;
};
Printf.formatScientific = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = Printf.DEFAULT_PRECISION;
	}
	var sign;
	var exponent;
	var s = "";
	if(value == 0) {
		sign = 0;
		exponent = 0;
		s += "0";
		if(p > 0) {
			s += ".";
			var _g = 0;
			var _g1 = p;
			while(_g < _g1) {
				var i = _g++;
				s += "0";
			}
		}
	} else {
		var m = Math;
		sign = value > 0. ? 1 : value < 0. ? -1 : 0;
		value = m.abs(value);
		exponent = m.floor(Math.log(value) / 2.302585092994046);
		value /= m.pow(10,exponent);
		var y = m.pow(0.1,p);
		value = Math.round(value / y) * y;
	}
	if(value != 0) {
		s += HxOverrides.substr(value == null ? "null" : "" + value,0,p + 2);
	}
	s += (f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0 ? "E" : "e";
	s += exponent >= 0 ? "+" : "-";
	var s1 = Std.string(exponent < 0 ? -exponent : exponent);
	var c = Printf.DEFAULT_NUM_EXP_DIGITS - s1.length;
	var s2;
	if(c < 1) {
		s2 = s1;
	} else {
		var t;
		if(c > 30) {
			var char = "0";
			t = char;
			var _g = 0;
			var _g1 = c - 1;
			while(_g < _g1) {
				var i = _g++;
				t += char;
			}
		} else {
			t = Printf._padChars[c];
		}
		s2 = t + s1;
	}
	s += s2;
	var printSign = sign == -1 || ((f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 || (f & 1 << _$Printf_FormatFlag.Space._hx_index) != 0);
	if(printSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) == 0) {
		s = (sign == -1 ? "-" : (f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : " ") + s;
	}
	if(args.width > 0) {
		var w = args.width;
		if(printSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
			--w;
		}
		var type = (f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0 ? 0 : 20;
		var c = w - s.length;
		if(c >= 1) {
			var t;
			if(c > 30) {
				var char = type == 0 ? "0" : " ";
				t = char;
				var _g = 0;
				var _g1 = c - 1;
				while(_g < _g1) {
					var i = _g++;
					t += char;
				}
			} else {
				t = Printf._padChars[type + c];
			}
			s = t + s;
		}
	}
	if(printSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
		s = (sign == -1 ? "-" : (f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : " ") + s;
	}
	buf.b += s == null ? "null" : "" + s;
};
Printf.formatFloat = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = Printf.DEFAULT_PRECISION;
	}
	var w = args.width;
	var isNegative = value < 0;
	var s;
	if(p == 0) {
		s = Std.string(Math.round(value));
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			s += ".";
		}
	} else if(isNaN(value)) {
		s = "NaN";
	} else {
		s = value.toFixed(p);
	}
	var l = s.length;
	if(isNegative && s.indexOf("-") > -1) {
		s = HxOverrides.substr(s,1,null);
	}
	var sign = null;
	if((f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 && !isNegative) {
		sign = "+";
		++l;
	} else if((f & 1 << _$Printf_FormatFlag.Space._hx_index) != 0 && !isNegative) {
		sign = " ";
		++l;
	} else if(isNegative) {
		sign = "-";
	}
	var hasSign = sign != null;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		buf.b += s == null ? "null" : "" + s;
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		if(w > l) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				if(hasSign) {
					buf.b += sign == null ? "null" : "" + sign;
					hasSign = false;
				}
				var _g = 0;
				var _g1 = w - l;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - l;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		buf.b += s == null ? "null" : "" + s;
	}
};
Printf.formatCharacter = function(x,args,buf) {
	if((args.flags & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		var x1 = String.fromCodePoint(x);
		buf.b += Std.string(x1);
		var _g = 0;
		var _g1 = args.width - 1;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
	} else {
		var _g = 0;
		var _g1 = args.width - 1;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
		var x1 = String.fromCodePoint(x);
		buf.b += Std.string(x1);
	}
};
Printf.formatString = function(value,args,buf) {
	var l = value.length;
	var p = args.precision;
	if((args.flags & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(p != -1) {
			buf.b += p == null ? HxOverrides.substr(value,0,null) : HxOverrides.substr(value,0,p);
			l = p;
		} else {
			buf.b += value == null ? "null" : "" + value;
		}
		var _g = 0;
		var _g1 = args.width - l;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
	} else {
		if(p != -1) {
			l = p;
		}
		var _g = 0;
		var _g1 = args.width - l;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
		if(p != -1) {
			buf.b += p == null ? HxOverrides.substr(value,0,null) : HxOverrides.substr(value,0,p);
		} else {
			buf.b += value == null ? "null" : "" + value;
		}
	}
};
Printf.pad = function(s,l,type,dir) {
	var c = l - s.length;
	if(c < 1) {
		return s;
	} else {
		var t;
		if(c > 30) {
			var char = type == 0 ? "0" : " ";
			t = char;
			var _g = 0;
			var _g1 = c - 1;
			while(_g < _g1) {
				var i = _g++;
				t += char;
			}
		} else {
			t = Printf._padChars[type + c];
		}
		if(dir > 0) {
			return s + t;
		} else {
			return t + s;
		}
	}
};
var PrintfError = function(message) {
	this.message = message;
};
$hxClasses["PrintfError"] = PrintfError;
PrintfError.__name__ = "PrintfError";
PrintfError.prototype = {
	message: null
	,toString: function() {
		return this.message;
	}
	,__class__: PrintfError
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
$hxClasses["_Sys.FileOutput"] = _$Sys_FileOutput;
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,__class__: haxe_io_Input
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
$hxClasses["_Sys.FileInput"] = _$Sys_FileInput;
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var equals_Equal = function() { };
$hxClasses["equals.Equal"] = equals_Equal;
equals_Equal.__name__ = "equals.Equal";
equals_Equal.isNull = function(a) {
	if(Type.typeof(a)._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
equals_Equal.isFunction = function(a) {
	if(Type.typeof(a)._hx_index == 5) {
		return true;
	} else {
		return false;
	}
};
equals_Equal.equals = function(a,b) {
	if(a == b) {
		return true;
	}
	if(equals_Equal.isNull(a) || equals_Equal.isNull(b)) {
		return false;
	}
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 0:case 1:case 3:case 8:
		return a == b;
	case 2:
		if(isNaN(a)) {
			return isNaN(b);
		} else {
			return false;
		}
		break;
	case 4:
		break;
	case 5:
		return a == b;
	case 6:
		var _g1 = _g.c;
		if(((a) instanceof Array)) {
			var a1 = js_Boot.__cast(a , Array);
			var b1 = js_Boot.__cast(b , Array);
			if(a1.length != b1.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = a1.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(!equals_Equal.equals(a1[i],b1[i])) {
					return false;
				}
			}
			return true;
		}
		if(js_Boot.__implements(a,haxe_IMap)) {
			var a1 = js_Boot.__cast(a , haxe_ds_StringMap);
			var b1 = js_Boot.__cast(b , haxe_ds_StringMap);
			var _g1 = [];
			var h = a1.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				_g1.push(key);
			}
			var a_keys = _g1;
			var _g1 = [];
			var h = b1.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				_g1.push(key);
			}
			var b_keys = _g1;
			if(!equals_Equal.equals(a_keys,b_keys)) {
				return false;
			}
			var _g1 = 0;
			while(_g1 < a_keys.length) {
				var key = a_keys[_g1];
				++_g1;
				if(!equals_Equal.equals(a1.h[key],b1.h[key])) {
					return false;
				}
			}
			return true;
		}
		if(((a) instanceof Date)) {
			return (js_Boot.__cast(a , Date)).getTime() == (js_Boot.__cast(b , Date)).getTime();
		}
		if(((a) instanceof haxe_io_Bytes)) {
			return equals_Equal.equals((js_Boot.__cast(a , haxe_io_Bytes)).b.bufferValue,(js_Boot.__cast(b , haxe_io_Bytes)).b.bufferValue);
		}
		break;
	case 7:
		var _g1 = _g.e;
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var a_args = Type.enumParameters(a);
		var b_args = Type.enumParameters(b);
		return equals_Equal.equals(a_args,b_args);
	}
	var _g = 0;
	var _g1 = Reflect.fields(a);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var pa = Reflect.field(a,field);
		var pb = Reflect.field(b,field);
		if(equals_Equal.isFunction(pa)) {
			if(equals_Equal.isNull(pa) != equals_Equal.isNull(pb)) {
				return false;
			}
			continue;
		}
		if(!equals_Equal.equals(pa,pb)) {
			return false;
		}
	}
	return true;
};
var stx_StxMemberApi = function() { };
$hxClasses["stx.StxMemberApi"] = stx_StxMemberApi;
stx_StxMemberApi.__name__ = "stx.StxMemberApi";
stx_StxMemberApi.__isInterface__ = true;
stx_StxMemberApi.prototype = {
	stx_tag: null
	,get_stx_tag: null
	,__class__: stx_StxMemberApi
	,__properties__: {get_stx_tag:"get_stx_tag"}
};
var eu_ohmrun_FletcherApi = function() { };
$hxClasses["eu.ohmrun.FletcherApi"] = eu_ohmrun_FletcherApi;
eu_ohmrun_FletcherApi.__name__ = "eu.ohmrun.FletcherApi";
eu_ohmrun_FletcherApi.__isInterface__ = true;
eu_ohmrun_FletcherApi.__interfaces__ = [stx_StxMemberApi];
eu_ohmrun_FletcherApi.prototype = {
	defer: null
	,__class__: eu_ohmrun_FletcherApi
};
var stx_pico_Clazz = $hx_exports["stx"]["Clazz"] = function() {
};
$hxClasses["stx.pico.Clazz"] = stx_pico_Clazz;
stx_pico_Clazz.__name__ = "stx.pico.Clazz";
stx_pico_Clazz.prototype = {
	definition: function() {
		return js_Boot.getClass(this);
	}
	,identifier: function() {
		var c = js_Boot.getClass(this);
		return stx_pico_Identifier._new(c.__name__);
	}
	,__class__: stx_pico_Clazz
};
var stx_StxMemberCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.StxMemberCls"] = stx_StxMemberCls;
stx_StxMemberCls.__name__ = "stx.StxMemberCls";
stx_StxMemberCls.__super__ = stx_pico_Clazz;
stx_StxMemberCls.prototype = $extend(stx_pico_Clazz.prototype,{
	stx_tag: null
	,get_stx_tag: null
	,__class__: stx_StxMemberCls
	,__properties__: {get_stx_tag:"get_stx_tag"}
});
var eu_ohmrun_FletcherCls = function() {
	stx_StxMemberCls.call(this);
};
$hxClasses["eu.ohmrun.FletcherCls"] = eu_ohmrun_FletcherCls;
eu_ohmrun_FletcherCls.__name__ = "eu.ohmrun.FletcherCls";
eu_ohmrun_FletcherCls.__interfaces__ = [eu_ohmrun_FletcherApi];
eu_ohmrun_FletcherCls.__super__ = stx_StxMemberCls;
eu_ohmrun_FletcherCls.prototype = $extend(stx_StxMemberCls.prototype,{
	get_stx_tag: function() {
		return 1;
	}
	,defer: null
	,__class__: eu_ohmrun_FletcherCls
});
var eu_ohmrun_FletcherLift = function() { };
$hxClasses["eu.ohmrun.FletcherLift"] = eu_ohmrun_FletcherLift;
eu_ohmrun_FletcherLift.__name__ = "eu.ohmrun.FletcherLift";
eu_ohmrun_FletcherLift.lift = function(self) {
	return eu_ohmrun_Fletcher.lift(self);
};
eu_ohmrun_FletcherLift.environment = function(self,p,success,failure) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		return cont.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(trg) {
			var self1 = self;
			var p1 = p;
			var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
				var ft = new tink_core_FutureTrigger();
				ft.handle(function(x) {
					switch(x._hx_index) {
					case 0:
						var t = x.t;
						success(t);
						break;
					case 1:
						var e = x.e;
						failure(e);
						break;
					}
				});
				return fn(ft);
			}));
			return self1.defer(p1,this1);
		})));
	});
};
eu_ohmrun_FletcherLift.fudge = function(self,p) {
	var val = null;
	var this1 = eu_ohmrun_FletcherLift.environment(self,p,function(ok) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("fudged")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 153, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}));
		val = ok;
	},function(no) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("fudged:fail")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 157, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}));
		throw haxe_Exception.thrown(no);
	});
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	stx_stream_CycleLift.crunch(stx_stream_Work.toCycle(this1.defer(null,this2)));
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 161, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}).module.exists().apply(val);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	return val;
};
eu_ohmrun_FletcherLift.force = function(self,p) {
	var val = null;
	var this1 = eu_ohmrun_FletcherLift.environment(self,p,function(ok) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("fudged")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 171, className : "eu.ohmrun.FletcherLift", methodName : "force"}));
		val = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok);
	},function(no) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("fudged:fail")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 175, className : "eu.ohmrun.FletcherLift", methodName : "force"}));
		val = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.fromDefect(no));
	});
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	stx_stream_CycleLift.crunch(stx_stream_Work.toCycle(this1.defer(null,this2)));
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 179, className : "eu.ohmrun.FletcherLift", methodName : "force"}).module.exists().apply(val);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	return val;
};
eu_ohmrun_FletcherLift.then = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var a = eu_ohmrun_Fletcher.forward(self,pI);
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(a,function(ok) {
			return eu_ohmrun_Fletcher.forward(that,ok);
		},function(no) {
			return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_FletcherLift.pair = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var lhs = eu_ohmrun_Fletcher.forward(self,stx_nano_CoupleLift.fst(p));
		var rhs = eu_ohmrun_Fletcher.forward(that,stx_nano_CoupleLift.snd(p));
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.zip(lhs,rhs).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_FletcherLift.split = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(pi,cont) {
		return eu_ohmrun_FletcherLift.pair(self,that).defer(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,pi,pi),cont);
	});
};
eu_ohmrun_FletcherLift.first = function(self) {
	return eu_ohmrun_FletcherLift.pair(self,eu_ohmrun_Fletcher.unit());
};
eu_ohmrun_FletcherLift.pinch = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.zip(eu_ohmrun_Fletcher.forward(self,p),eu_ohmrun_Fletcher.forward(that,p)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_FletcherLift.map = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,p),that).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_FletcherLift.mapi = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		return self.defer(that(p),cont);
	});
};
eu_ohmrun_FletcherLift.joint = function(lhs,rhs) {
	return eu_ohmrun_FletcherLift.then(lhs,eu_ohmrun_FletcherLift.split(eu_ohmrun_Fletcher.unit(),rhs));
};
eu_ohmrun_FletcherLift.bound = function(self,that) {
	return eu_ohmrun_FletcherLift.then(eu_ohmrun_FletcherLift.joint(eu_ohmrun_Fletcher.unit(),self),that);
};
eu_ohmrun_FletcherLift.broach = function(self) {
	var fn = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
	return eu_ohmrun_FletcherLift.bound(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_FletcherLift.future = function(self,p) {
	return tink_core_Future.irreversible(function(cb) {
		var this1 = eu_ohmrun_FletcherLift.environment(self,p,function(ok) {
			cb(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ok));
		},function(no) {
			cb(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no));
		});
		var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
			return fn(new tink_core_FutureTrigger());
		}));
		stx_stream_CycleLift.submit(stx_stream_Work.toCycle(this1.defer(null,this2)),{ fileName : "eu/ohmrun/fletcher/Fiber.hx", lineNumber : 21, className : "eu.ohmrun.fletcher._Fiber.Fiber_Impl_", methodName : "submit"});
	});
};
eu_ohmrun_FletcherLift.produce = function(self,i) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,i),function(ok) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
		},function(no) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.fromError(stx_nano_Defect.toError(no))));
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
var eu_ohmrun_Fletcher = {};
eu_ohmrun_Fletcher.__properties__ = {get_self:"get_self"};
eu_ohmrun_Fletcher.ctx = function(wildcard,environment,ok,no) {
	return eu_ohmrun_fletcher_core_Context.make(environment,ok,no);
};
eu_ohmrun_Fletcher._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_Fletcher.lift = function(self) {
	return eu_ohmrun_Fletcher._new(self);
};
eu_ohmrun_Fletcher.prj = function(this1) {
	return this1;
};
eu_ohmrun_Fletcher.get_self = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
eu_ohmrun_Fletcher.fromApi = function(self) {
	return eu_ohmrun_Fletcher.lift(self);
};
eu_ohmrun_Fletcher.unit = function() {
	var fn = function(x) {
		return x;
	};
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_Fletcher.constant = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var value = self;
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_Fletcher.pure = function(self) {
	return eu_ohmrun_Fletcher.constant(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,self));
};
eu_ohmrun_Fletcher.fromFun1R = function(self) {
	var fn = self;
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_Fletcher.fromFunXR = function(self) {
	var fn = function(_) {
		return self();
	};
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_Fletcher.forward = function(f,p) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(k) {
		var ft = new tink_core_FutureTrigger();
		var f1 = f;
		var p1 = p;
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(t_sink) {
			return t_sink(ft);
		}));
		var fst = f1.defer(p1,this1);
		var snd = k.apply(ft);
		return stx_stream_WorkLift.seq(fst,snd);
	}));
	return this1;
};
eu_ohmrun_Fletcher.Sync = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_Fletcher.FlatMap = function(self,fn) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,p),function(ok) {
			return eu_ohmrun_Fletcher.forward(fn(ok),p);
		},function(no) {
			return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
eu_ohmrun_Fletcher.Anon = function(self) {
	return new eu_ohmrun_fletcher_term_Anon(self);
};
eu_ohmrun_Fletcher.Then = function(self,that) {
	return eu_ohmrun_Fletcher._.then(self,that);
};
eu_ohmrun_Fletcher.Delay = function(ms) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var bang = tink_core_Future.map(stx_stream_Timeout.prj(stx_stream_Timeout._new(ms)),function(_) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ipt);
		});
		var self = cont;
		var self1 = cont;
		var ft = bang;
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
};
var eu_ohmrun_FletcherWildcards = function() { };
$hxClasses["eu.ohmrun.FletcherWildcards"] = eu_ohmrun_FletcherWildcards;
eu_ohmrun_FletcherWildcards.__name__ = "eu.ohmrun.FletcherWildcards";
eu_ohmrun_FletcherWildcards.attempt = function(wildcard,self,pos) {
	var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(new stx_log_EntryCtr().pure(pos),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 354, className : "eu.ohmrun.FletcherWildcards", methodName : "attempt"}));
	switch(self._hx_index) {
	case 0:
		var r = self.r;
		return eu_ohmrun_fletcher_Attempt.pure(r);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Attempt.fromUpshot(res);
	case 2:
		var fn1 = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Upshot(fn1);
	case 3:
		var fn1 = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Produce(fn1);
	case 4:
		var fn1 = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromUnary1Produce(fn1);
	case 5:
		var fn1 = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Provide(fn1);
	}
};
eu_ohmrun_FletcherWildcards.produce = function(wildcard,self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Produce.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Produce.Sync(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.Thunk(fn);
	case 3:
		var rejection = self.rejection;
		return eu_ohmrun_fletcher_Produce.fromRejection(rejection);
	case 4:
		var pledge = self.pledge;
		return eu_ohmrun_fletcher_Produce.fromPledge(pledge);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.fromFunXProduce(fn);
	case 6:
		var fletcher = self.fletcher;
		return eu_ohmrun_fletcher_Produce.fromFletcher(fletcher);
	}
};
eu_ohmrun_FletcherWildcards.arrange = function(wildcard,self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Arrange.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Arrange.fromUpshot(res);
	case 2:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Attempt(f);
	case 3:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Modulate(f);
	}
};
eu_ohmrun_FletcherWildcards.modulate = function(wildcard,self) {
	return eu_ohmrun_fletcher_ModulateArg.toModulate(self);
};
eu_ohmrun_FletcherWildcards.command = function(wildcard,self) {
	return eu_ohmrun_fletcher_CommandArg.toCommand(self);
};
eu_ohmrun_FletcherWildcards.sequent = function(wildcard,self) {
	return eu_ohmrun_fletcher_Sequent.bump(self);
};
var eu_ohmrun_fletcher_ArrangeArgSum = $hxEnums["eu.ohmrun.fletcher.ArrangeArgSum"] = { __ename__:"eu.ohmrun.fletcher.ArrangeArgSum",__constructs__:null
	,ArrangeArgPure: ($_=function(o) { return {_hx_index:0,o:o,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgPure",$_.__params__ = ["o"],$_)
	,ArrangeArgRes: ($_=function(res) { return {_hx_index:1,res:res,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgRes",$_.__params__ = ["res"],$_)
	,ArrangeArgFun1Attempt: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgFun1Attempt",$_.__params__ = ["f"],$_)
	,ArrangeArgFun1Modulate: ($_=function(f) { return {_hx_index:3,f:f,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgFun1Modulate",$_.__params__ = ["f"],$_)
};
eu_ohmrun_fletcher_ArrangeArgSum.__constructs__ = [eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgPure,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgRes,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Attempt,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Modulate];
var eu_ohmrun_fletcher_ArrangeArg = {};
eu_ohmrun_fletcher_ArrangeArg.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_ArrangeArg._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ArrangeArg.lift = function(self) {
	return eu_ohmrun_fletcher_ArrangeArg._new(self);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgFun1Modulate = function(f) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Modulate(f);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgFun1Attempt = function(f) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Attempt(f);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgUpshot = function(res) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgUpshot(res);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgPure = function(o) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgPure(o);
};
eu_ohmrun_fletcher_ArrangeArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ArrangeArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ArrangeArg.lift(this1);
};
var eu_ohmrun_fletcher_ArrangeLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ArrangeLift"] = eu_ohmrun_fletcher_ArrangeLift;
eu_ohmrun_fletcher_ArrangeLift.__name__ = "eu.ohmrun.fletcher.ArrangeLift";
eu_ohmrun_fletcher_ArrangeLift.state = function(self) {
	var this1 = eu_ohmrun_FletcherLift.map(eu_ohmrun_FletcherLift.broach(self),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(tp,chk) {
		var fn = function(_) {
			return stx_nano_CoupleLift.snd(_);
		};
		var self;
		switch(tp._hx_index) {
		case 0:
			var t = tp.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = tp.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		var self = this1;
		var self1;
		switch(self._hx_index) {
		case 0:
			var _g = self.t;
			switch(chk._hx_index) {
			case 0:
				var tt = chk.t;
				var t = _g;
				self1 = stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
				break;
			case 1:
				var e = chk.e;
				self1 = stx_nano_ResSum.Reject(e);
				break;
			}
			break;
		case 1:
			var _g = self.e;
			if(chk._hx_index == 1) {
				var ee = chk.e;
				var e = _g;
				self1 = stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
			} else {
				var e = _g;
				self1 = stx_nano_ResSum.Reject(e);
			}
			break;
		}
		var fn = function(tp) {
			return stx_nano_CoupleLift.swap(tp);
		};
		var self;
		switch(self1._hx_index) {
		case 0:
			var t = self1.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = self1.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	}));
	return this1;
};
eu_ohmrun_fletcher_ArrangeLift.attempt = function(self,attempt) {
	var this1 = eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Attempt.toModulate(attempt)));
	return this1;
};
eu_ohmrun_fletcher_ArrangeLift.errata = function(self,fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(res,cont) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			var self1 = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(self,function(res) {
				var self;
				switch(res._hx_index) {
				case 0:
					var t = res.t;
					self = stx_nano_Res.accept(t);
					break;
				case 1:
					var e = res.e;
					self = stx_nano_Res.reject(fn(e));
					break;
				}
				var this1 = self;
				return this1;
			}),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = res.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_ArrangeLift.errate = function(self,fn) {
	var this1 = eu_ohmrun_fletcher_ArrangeLift.errata(self,function(oc) {
		return stx_nano_Rejection.errate(oc,fn);
	});
	return this1;
};
eu_ohmrun_fletcher_ArrangeLift.convert = function(self,that) {
	var this1 = eu_ohmrun_fletcher_Modulate._.convert(self,that);
	return this1;
};
eu_ohmrun_fletcher_ArrangeLift.cover = function(self,i) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(res,cont) {
		var self1 = cont;
		var self2 = self;
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = i;
		var fn = function(tII) {
			return _g(tI,tII);
		};
		var self3;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self3 = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self3 = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self3;
		return eu_ohmrun_Fletcher.forward(self2,this1).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ArrangeLift.split = function(self,that) {
	var a = eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.broach(self),function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(resInput,resOutput) {
			var self;
			switch(resOutput._hx_index) {
			case 0:
				var t = resOutput.t;
				var o = t;
				var fn = function(couple) {
					return stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(couple),o,stx_nano_CoupleLift.snd(couple));
				};
				var self1;
				switch(resInput._hx_index) {
				case 0:
					var t = resInput.t;
					self1 = stx_nano_ResSum.Accept(fn(t));
					break;
				case 1:
					var e = resInput.e;
					self1 = stx_nano_ResSum.Reject(e);
					break;
				}
				var this1 = self1;
				self = this1;
				break;
			case 1:
				var e = resOutput.e;
				self = stx_nano_ResSum.Reject(e);
				break;
			}
			var this1 = self;
			return this1;
		});
	});
	var this1 = eu_ohmrun_FletcherLift.map(a,function(res) {
		var fn = function(tr) {
			return stx_nano_TripleLift.detriple(tr,function(a,b,c) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,a,c);
			});
		};
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	var b = eu_ohmrun_fletcher_ModulateLift.modulate(this1,eu_ohmrun_fletcher_Arrange.toModulate(that));
	var this1 = eu_ohmrun_FletcherLift.map(a,function(res) {
		var fn = function(tr) {
			return stx_nano_TripleLift.detriple(tr,function(a,b,c) {
				return b;
			});
		};
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	var c = this1;
	var this1 = eu_ohmrun_fletcher_ModulateLift.map(eu_ohmrun_fletcher_Modulate._.split(b,c),function(tp) {
		return stx_nano_CoupleLift.swap(tp);
	});
	var d = this1;
	return d;
};
var eu_ohmrun_fletcher_Arrange = {};
eu_ohmrun_fletcher_Arrange._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Arrange.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Arrange.bump = function(self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Arrange.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Arrange.fromUpshot(res);
	case 2:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Attempt(f);
	case 3:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Modulate(f);
	}
};
eu_ohmrun_fletcher_Arrange.pure = function(o) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var receiver;
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			receiver = this1;
			break;
		case 1:
			var e = i.e;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			receiver = this1;
			break;
		}
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.fromUpshot = function(res) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var receiver;
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			receiver = this1;
			break;
		case 1:
			var e = i.e;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			receiver = this1;
			break;
		}
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.fromFun1Attempt = function(f) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.fromFunResAttempt = function(f) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.fromFun1Modulate = function(f) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(t))).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.fromFunResModulate = function(f) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(t))).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.bind_fold = function(fn,iterable) {
	return stx_nano_IterLift.lfold1(stx_nano_IterLift.map(stx_nano_IterLift.map(stx_nano_lift_LiftIterableToIter.toIter(iterable),function(t) {
		var _g = fn;
		var a1 = t;
		return function(a2) {
			return _g(a1,a2);
		};
	}),eu_ohmrun_fletcher_Arrange.fromFun1Modulate),function(next,memo) {
		var this1 = eu_ohmrun_FletcherLift.then(eu_ohmrun_fletcher_Arrange._.state(memo),next);
		return this1;
	});
};
eu_ohmrun_fletcher_Arrange.fromFun2R = function(fn) {
	return eu_ohmrun_fletcher_Arrange.modifier(fn);
};
eu_ohmrun_fletcher_Arrange.modifier = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(res,cont) {
		var fn1 = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(i,s) {
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i,s)));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		});
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn1(t);
		case 1:
			var e = res.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Arrange.split = function(this1,that) {
	return eu_ohmrun_fletcher_Arrange._.split(this1,that);
};
eu_ohmrun_fletcher_Arrange.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Arrange.toModulate = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_AttemptArgSum = $hxEnums["eu.ohmrun.fletcher.AttemptArgSum"] = { __ename__:"eu.ohmrun.fletcher.AttemptArgSum",__constructs__:null
	,AttemptArgPure: ($_=function(r) { return {_hx_index:0,r:r,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgPure",$_.__params__ = ["r"],$_)
	,AttemptArgRes: ($_=function(res) { return {_hx_index:1,res:res,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgRes",$_.__params__ = ["res"],$_)
	,AttemptArgFun1Res: ($_=function(fn) { return {_hx_index:2,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgFun1Res",$_.__params__ = ["fn"],$_)
	,AttemptArgFun1Produce: ($_=function(fn) { return {_hx_index:3,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgFun1Produce",$_.__params__ = ["fn"],$_)
	,AttemptArgUnary1Produce: ($_=function(fn) { return {_hx_index:4,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgUnary1Produce",$_.__params__ = ["fn"],$_)
	,AttemptArgFun1Provide: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgFun1Provide",$_.__params__ = ["fn"],$_)
};
eu_ohmrun_fletcher_AttemptArgSum.__constructs__ = [eu_ohmrun_fletcher_AttemptArgSum.AttemptArgPure,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgRes,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Res,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Produce,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUnary1Produce,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Provide];
var eu_ohmrun_fletcher_AttemptArg = {};
eu_ohmrun_fletcher_AttemptArg.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_AttemptArg._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_AttemptArg.lift = function(self) {
	return eu_ohmrun_fletcher_AttemptArg._new(self);
};
eu_ohmrun_fletcher_AttemptArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_AttemptArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_AttemptArg.lift(this1);
};
eu_ohmrun_fletcher_AttemptArg.fromArgFun1Provide = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Provide(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgUnary1Produce = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUnary1Produce(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgFun1Produce = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Produce(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgFun1Upshot = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Upshot(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgUpshot = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUpshot(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgPure = function(r) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgPure(r);
};
var eu_ohmrun_fletcher_AttemptLift = function() { };
$hxClasses["eu.ohmrun.fletcher.AttemptLift"] = eu_ohmrun_fletcher_AttemptLift;
eu_ohmrun_fletcher_AttemptLift.__name__ = "eu.ohmrun.fletcher.AttemptLift";
eu_ohmrun_fletcher_AttemptLift.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.then = function(self,that) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that)));
};
eu_ohmrun_fletcher_AttemptLift.rectify = function(self,next) {
	return eu_ohmrun_Fletcher.lift(eu_ohmrun_Fletcher._.then(eu_ohmrun_fletcher_AttemptLift.lift(self),next));
};
eu_ohmrun_fletcher_AttemptLift.resolve = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_ResolveLift.toModulate(next))));
};
eu_ohmrun_fletcher_AttemptLift.reclaim = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_fletcher_AttemptLift.attempt(eu_ohmrun_fletcher_AttemptLift.then(self,eu_ohmrun_fletcher_ConvertLift.toModulate(next)),eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher.Anon(function(prd,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(prd,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}))));
};
eu_ohmrun_fletcher_AttemptLift.recover = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Recover.toModulate(next))));
};
eu_ohmrun_fletcher_AttemptLift.convert = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.then(self,eu_ohmrun_fletcher_ConvertLift.toModulate(next));
};
eu_ohmrun_fletcher_AttemptLift.errata = function(self,fn) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.map(self,function(oc) {
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_Res.accept(t);
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_Res.reject(fn(e));
			break;
		}
		var this1 = self;
		return this1;
	}));
};
eu_ohmrun_fletcher_AttemptLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.map(self,function(oc) {
		var fn1 = fn;
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_Res.accept(t);
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_Res.reject(stx_nano_Rejection.errate(e,fn1));
			break;
		}
		var this1 = self;
		return this1;
	}));
};
eu_ohmrun_fletcher_AttemptLift.attempt = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.then(self,eu_ohmrun_fletcher_Attempt.toModulate(next));
};
eu_ohmrun_fletcher_AttemptLift.reframe = function(self) {
	return eu_ohmrun_fletcher_ModulateLift.reframe(eu_ohmrun_fletcher_Attempt.toModulate(eu_ohmrun_fletcher_AttemptLift.lift(self)));
};
eu_ohmrun_fletcher_AttemptLift.broach = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_AttemptLift.map(eu_ohmrun_fletcher_AttemptLift.lift(self),function(o) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,ipt,o);
		}),ipt).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.provide = function(self,i) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self,i).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.arrange = function(self,then) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,p),function(ok) {
			var then1 = then;
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tII = p;
			var fn = function(tI) {
				return _g(tI,tII);
			};
			var self;
			switch(ok._hx_index) {
			case 0:
				var t = ok.t;
				self = stx_nano_ResSum.Accept(fn(t));
				break;
			case 1:
				var e = ok.e;
				self = stx_nano_ResSum.Reject(e);
				break;
			}
			var this1 = self;
			return eu_ohmrun_Fletcher.forward(then1,this1);
		},function(no) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_AttemptLift.mapi = function(self,that) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.mapi(eu_ohmrun_fletcher_AttemptLift.lift(self),that));
};
eu_ohmrun_fletcher_AttemptLift.modulate = function(self,that) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that)));
};
eu_ohmrun_fletcher_AttemptLift.execute = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_ExecuteLift.produce(that,eu_ohmrun_fletcher_Produce.pure(t)),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.command = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(eu_ohmrun_fletcher_AttemptLift.lift(self),eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(new stx_log_EntryCtr().pure(ipt),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 240, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "command"}));
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_CommandLift.produce(that,eu_ohmrun_fletcher_Produce.pure(t)),t).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.map = function(self,fn) {
	var this1 = eu_ohmrun_Fletcher._.map(self,function(res) {
		var fn1 = fn;
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_ResSum.Accept(fn1(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.flat_map = function(self,fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_map(eu_ohmrun_Fletcher.forward(self,ipt),function(res) {
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = eu_ohmrun_Fletcher.forward(fn(t),ipt);
				break;
			case 1:
				var e = res.e;
				receiver = eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e)),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 264, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "flat_map"});
				break;
			}
			return receiver;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.produce = function(self,i) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self,i).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_AttemptLift.adjust = function(self,fn) {
	var fn1 = function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = fn(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	};
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
var eu_ohmrun_fletcher_Attempt = {};
eu_ohmrun_fletcher_Attempt._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Attempt.bump = function(self) {
	switch(self._hx_index) {
	case 0:
		var r = self.r;
		return eu_ohmrun_fletcher_Attempt.pure(r);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Attempt.fromUpshot(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Upshot(fn);
	case 3:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Produce(fn);
	case 4:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromUnary1Produce(fn);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Provide(fn);
	}
};
eu_ohmrun_fletcher_Attempt.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Attempt.unit = function() {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i));
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Attempt.pure = function(o) {
	return eu_ohmrun_fletcher_Attempt.fromUpshot(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
};
eu_ohmrun_fletcher_Attempt.fromUpshot = function(res) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Attempt.fromFun1Upshot = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn(pI));
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Attempt.fromFun1Produce = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(fn(pI),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Attempt.fromUnary1Produce = function(fn) {
	return eu_ohmrun_fletcher_Attempt.fromFun1Produce(fn);
};
eu_ohmrun_fletcher_Attempt.fromFun1Provide = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var rest = fn(pI);
		var self = cont;
		var fn1 = function(t) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		};
		var this1 = eu_ohmrun_fletcher_ProvideLift.convert(rest,eu_ohmrun_fletcher_Convert.fromFletcher(eu_ohmrun_Fletcher.Anon(function(p,cont) {
			var res = fn1(p);
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var resI = this1;
			var self = cont;
			return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		})));
		return eu_ohmrun_Fletcher.forward(this1,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Attempt.fromFun1R = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i)));
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Attempt.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Attempt.toModulate = function(this1) {
	var this2 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(this1,t).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this2;
};
eu_ohmrun_fletcher_Attempt.environment = function(this1,i,success,failure) {
	var success1 = success;
	var failure1 = failure;
	return eu_ohmrun_Fletcher._.environment(eu_ohmrun_fletcher_Attempt.toModulate(this1),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	});
};
eu_ohmrun_fletcher_Attempt.mapi = function(this1,that) {
	return eu_ohmrun_fletcher_Attempt._.mapi(this1,that);
};
var eu_ohmrun_fletcher_CommandArgSum = $hxEnums["eu.ohmrun.fletcher.CommandArgSum"] = { __ename__:"eu.ohmrun.fletcher.CommandArgSum",__constructs__:null
	,CommandArgFun1Void: ($_=function(fn) { return {_hx_index:0,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandArgFun1Void",$_.__params__ = ["fn"],$_)
	,CommandArgFun1Report: ($_=function(fn) { return {_hx_index:1,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandArgFun1Report",$_.__params__ = ["fn"],$_)
	,CommandArgFun1OptionRejection: ($_=function(fn) { return {_hx_index:2,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandArgFun1OptionRejection",$_.__params__ = ["fn"],$_)
	,CommandFun1Execute: ($_=function(fn) { return {_hx_index:3,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandFun1Execute",$_.__params__ = ["fn"],$_)
};
eu_ohmrun_fletcher_CommandArgSum.__constructs__ = [eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Void,eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Report,eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1OptionRejection,eu_ohmrun_fletcher_CommandArgSum.CommandFun1Execute];
var eu_ohmrun_fletcher_CommandArg = {};
eu_ohmrun_fletcher_CommandArg.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_CommandArg._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_CommandArg.lift = function(self) {
	return eu_ohmrun_fletcher_CommandArg._new(self);
};
eu_ohmrun_fletcher_CommandArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_CommandArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_CommandArg.lift(this1);
};
eu_ohmrun_fletcher_CommandArg.fromCommandFun1Execute = function(fn) {
	return eu_ohmrun_fletcher_CommandArg.lift(eu_ohmrun_fletcher_CommandArgSum.CommandFun1Execute(fn));
};
eu_ohmrun_fletcher_CommandArg.fromCommandArgFun1Report = function(fn) {
	return eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Report(fn);
};
eu_ohmrun_fletcher_CommandArg.fromCommandArgFun1OptionRejection = function(fn) {
	return eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1OptionRejection(fn);
};
eu_ohmrun_fletcher_CommandArg.fromCommandArgFun1Void = function(fn) {
	return eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Void(fn);
};
eu_ohmrun_fletcher_CommandArg.toCommand = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1Void(x);
	case 1:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1Report(x);
	case 2:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1OptionRejection(x);
	case 3:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1Execute(x);
	}
};
var eu_ohmrun_fletcher_CommandLift = function() { };
$hxClasses["eu.ohmrun.fletcher.CommandLift"] = eu_ohmrun_fletcher_CommandLift;
eu_ohmrun_fletcher_CommandLift.__name__ = "eu.ohmrun.fletcher.CommandLift";
eu_ohmrun_fletcher_CommandLift.toModulate = function(command) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var okI = t;
			var self = cont;
			return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(command,okI),function(okII) {
				if(okII == null) {
					return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,okI));
				} else {
					switch(okII._hx_index) {
					case 0:
						var v = okII.v;
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v));
					case 1:
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,okI));
					}
				}
			},function(er) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,er);
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
eu_ohmrun_fletcher_CommandLift.produce = function(command,prod) {
	var this1 = eu_ohmrun_Fletcher._.then(command,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(new stx_log_EntryCtr().pure(ipt),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 147, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"}));
		if(ipt == null) {
			var self = cont;
			return eu_ohmrun_Fletcher.forward(prod,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v));
				var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self1;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			case 1:
				var self2 = cont;
				return eu_ohmrun_Fletcher.forward(prod,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self2;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			}
		}
	}));
	return this1;
};
var eu_ohmrun_fletcher_Command = {};
eu_ohmrun_fletcher_Command.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Command._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Command.unit = function() {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = stx_nano_Report.unit();
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_Command.lift = function(self) {
	return eu_ohmrun_fletcher_Command._new(self);
};
eu_ohmrun_fletcher_Command.bump = function(self) {
	return eu_ohmrun_fletcher_CommandArg.toCommand(self);
};
eu_ohmrun_fletcher_Command.fromFun1Void = function(fn) {
	var fn1 = stx_fn_UnaryLift.then(stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,fn),function(_) {
		return stx_nano_Report.unit();
	});
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_Command.fromFun1Report = function(fn) {
	var fn1 = function(i) {
		return fn(i);
	};
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_Command.fromFun1OptionRejection = function(fn) {
	var fn1 = function(i) {
		return stx_nano_Report.fromOption(fn(i));
	};
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_Command.fromFletcher = function(self) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,p),function(_) {
			var f = null;
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 69, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFletcher"}))));
		},function(e) {
			var this1 = stx_nano_Defect.toError(e).errate(stx_nano_DeclinationSum.REJECT);
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftError.report(this1));
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_Command.fromFun1Execute = function(fn) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn1 = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn1(pos));
		})(new stx_log_EntryCtr().pure(i),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 79, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFun1Execute"}));
		var self = cont;
		return eu_ohmrun_Fletcher.forward(fn(i),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_Command.toModulate = function(this1) {
	var this2 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var ok = t;
			var self = cont;
			return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(this1,ok),function(report) {
				if(report == null) {
					return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
				} else {
					switch(report._hx_index) {
					case 0:
						var v = report.v;
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v));
					case 1:
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
					}
				}
			},function(e) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this2;
};
eu_ohmrun_fletcher_Command.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Command.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Command.and = function(this1,that) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.split(eu_ohmrun_fletcher_Command.get_self(this1),that),function(tp) {
		return stx_nano_ReportLift.concat(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	}));
};
eu_ohmrun_fletcher_Command.errata = function(this1,fn) {
	return eu_ohmrun_FletcherLift.map(eu_ohmrun_fletcher_Command.get_self(this1),function(report) {
		return stx_nano_Report.errata(report,fn);
	});
};
eu_ohmrun_fletcher_Command.provide = function(this1,i) {
	var this2 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(this1,i).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this2;
};
eu_ohmrun_fletcher_Command.get_self = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_Completion = function(context,$process) {
	eu_ohmrun_FletcherCls.call(this);
	this.context = context;
	this.process = $process;
};
$hxClasses["eu.ohmrun.fletcher.Completion"] = eu_ohmrun_fletcher_Completion;
eu_ohmrun_fletcher_Completion.__name__ = "eu.ohmrun.fletcher.Completion";
eu_ohmrun_fletcher_Completion.__super__ = eu_ohmrun_FletcherCls;
eu_ohmrun_fletcher_Completion.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	context: null
	,process: null
	,defer: function(p,cont) {
		var _gthis = this;
		var self = cont;
		return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(this.process,this.context.environment),function(ok) {
			_gthis.context.on_value(ok);
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,null);
		},function(no) {
			_gthis.context.on_error(no);
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_Defect.unit());
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}
	,__class__: eu_ohmrun_fletcher_Completion
});
var eu_ohmrun_fletcher_ConvertLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ConvertLift"] = eu_ohmrun_fletcher_ConvertLift;
eu_ohmrun_fletcher_ConvertLift.__name__ = "eu.ohmrun.fletcher.ConvertLift";
eu_ohmrun_fletcher_ConvertLift.toModulate = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self1 = cont;
			return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,t),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = p.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self2;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
eu_ohmrun_fletcher_ConvertLift.then = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,that);
	return this1;
};
eu_ohmrun_fletcher_ConvertLift.provide = function(self,i) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		return self.defer(i,cont);
	});
	return this1;
};
eu_ohmrun_fletcher_ConvertLift.convert = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,that);
	return this1;
};
eu_ohmrun_fletcher_ConvertLift.first = function(self) {
	var this1 = eu_ohmrun_Fletcher._.first(self);
	return this1;
};
var eu_ohmrun_fletcher_Convert = {};
eu_ohmrun_fletcher_Convert.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Convert._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Convert.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Convert.unit = function() {
	var fn = function(i) {
		return i;
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Convert.fromFun1Provide = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self(i),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Convert.fromConvertProvide = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,p),function(ok) {
			return eu_ohmrun_Fletcher.forward(ok,null);
		},function(er) {
			return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,er),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Convert.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Convert.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Convert.Fun = function(fn) {
	var fn1 = fn;
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Convert.fromFun1R = function(fn) {
	var fn1 = fn;
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Convert.fromFletcher = function(arw) {
	var this1 = arw;
	return this1;
};
eu_ohmrun_fletcher_Convert.environment = function(this1,i,success) {
	return eu_ohmrun_Fletcher._.environment(this1,i,success,function(e) {
		throw haxe_Exception.thrown(e);
	});
};
var eu_ohmrun_fletcher_DiffuseLift = function() { };
$hxClasses["eu.ohmrun.fletcher.DiffuseLift"] = eu_ohmrun_fletcher_DiffuseLift;
eu_ohmrun_fletcher_DiffuseLift.__name__ = "eu.ohmrun.fletcher.DiffuseLift";
eu_ohmrun_fletcher_DiffuseLift.lift = function(self) {
	var this1 = self;
	return this1;
};
var eu_ohmrun_fletcher_Diffuse = {};
eu_ohmrun_fletcher_Diffuse.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Diffuse._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Diffuse.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Diffuse.fromFunIOptionR = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = fn(v);
			var r;
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				r = stx_nano_ChunkSum.Val(t);
				break;
			case 1:
				r = stx_nano_ChunkSum.Tap;
				break;
			}
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,r);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 1:
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 2:
			var e = ipt.err;
			var value2 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value2);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Diffuse.fromOptionIR = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Val(fn(haxe_ds_Option.Some(v))));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 1:
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Val(fn(haxe_ds_Option.None)));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 2:
			var e = ipt.err;
			var value2 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value2);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Diffuse.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Diffuse.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Diffuse.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
var eu_ohmrun_fletcher_Execute = {};
eu_ohmrun_fletcher_Execute.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Execute._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Execute.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Execute.pure = function(e) {
	var this1 = eu_ohmrun_Fletcher.pure(stx_nano_Report.pure(e));
	return this1;
};
eu_ohmrun_fletcher_Execute.unit = function() {
	var this1 = eu_ohmrun_Fletcher.pure(stx_nano_Report.unit());
	return this1;
};
eu_ohmrun_fletcher_Execute.bind_fold = function(fn,arr) {
	var pos = { fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 13, className : "eu.ohmrun.fletcher._Execute.Execute_Impl_", methodName : "bind_fold"};
	var tmp = (function(t) {
		haxe_Log.trace(t,pos);
		return t;
	})(arr);
	var this1 = eu_ohmrun_Fletcher.pure(stx_nano_Report.unit());
	return stx_lift_ArrayLift.lfold(tmp,function(next,memo) {
		var this1 = eu_ohmrun_fletcher_Provide._.flat_map(eu_ohmrun_fletcher_Execute.toProvide(memo),function(report) {
			var this1 = fn(next,report);
			return this1;
		});
		return this1;
	},this1);
};
eu_ohmrun_fletcher_Execute.sequence = function(fn,arr) {
	var this1 = eu_ohmrun_Fletcher.pure(stx_nano_Report.unit());
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		var this1 = eu_ohmrun_fletcher_ExecuteLift.fold_mod(memo,function(report) {
			var self;
			if(report == null) {
				self = fn(next);
			} else {
				switch(report._hx_index) {
				case 0:
					var v = report.v;
					var this1 = eu_ohmrun_Fletcher.pure(stx_nano_Report.pure(v));
					self = this1;
					break;
				case 1:
					self = fn(next);
					break;
				}
			}
			return self;
		});
		return this1;
	},this1);
};
eu_ohmrun_fletcher_Execute.toProvide = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.fromFunXR = function(fn) {
	var self = fn;
	var fn = function(_) {
		return self();
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Execute.fromThunk = function(fn) {
	return eu_ohmrun_fletcher_Execute.fromFunXR(function() {
		fn();
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 46, className : "eu.ohmrun.fletcher._Execute.Execute_Impl_", methodName : "fromThunk"})));
		}
	});
};
eu_ohmrun_fletcher_Execute.fromFunXExecute = function(fn) {
	return fn();
};
eu_ohmrun_fletcher_Execute.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Execute.fromOption = function(err) {
	return eu_ohmrun_fletcher_Execute.fromFunXR(function() {
		return stx_nano_Report.fromOption(err);
	});
};
eu_ohmrun_fletcher_Execute.fromRejection = function(err) {
	return eu_ohmrun_fletcher_Execute.fromFunXR(function() {
		return stx_nano_Report.pure(err);
	});
};
eu_ohmrun_fletcher_Execute.environment = function(this1,success,failure) {
	return eu_ohmrun_Fletcher._.environment(this1,null,function(report) {
		if(report == null) {
			success();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				failure(v);
				break;
			case 1:
				success();
				break;
			}
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
var eu_ohmrun_fletcher_ExecuteLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ExecuteLift"] = eu_ohmrun_fletcher_ExecuteLift;
eu_ohmrun_fletcher_ExecuteLift.__name__ = "eu.ohmrun.fletcher.ExecuteLift";
eu_ohmrun_fletcher_ExecuteLift.errata = function(self,fn) {
	var fn1 = function(report) {
		return stx_nano_Report.errata(report,fn);
	};
	var this1 = eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.errate = function(self,fn) {
	var fn1 = function(report) {
		return stx_nano_Report.errata(report,function(e) {
			return stx_nano_Rejection.errate(e,fn);
		});
	};
	var this1 = eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.deliver = function(self,fn) {
	var fn1 = function(report) {
		fn(report);
		return null;
	};
	return eu_ohmrun_Fletcher._.then(eu_ohmrun_Fletcher.lift(self),eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_ExecuteLift.crack = function(self) {
	return eu_ohmrun_fletcher_ExecuteLift.deliver(self,function(report) {
		if(report != null) {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	});
};
eu_ohmrun_fletcher_ExecuteLift.then = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,that);
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.execute = function(self,next) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		if(ipt == null) {
			var self = cont;
			return eu_ohmrun_Fletcher.forward(next,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(v));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self1;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			case 1:
				var self2 = cont;
				return eu_ohmrun_Fletcher.forward(next,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self2;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			}
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.produce = function(self,next) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		if(ipt == null) {
			var self = cont;
			return eu_ohmrun_Fletcher.forward(next,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self1;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			case 1:
				var self2 = cont;
				return eu_ohmrun_Fletcher.forward(next,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self2;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			}
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.propose = function(self,next) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		if(ipt == null) {
			var self = cont;
			return eu_ohmrun_Fletcher.forward(next,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(v));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self1;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			case 1:
				var self2 = cont;
				return eu_ohmrun_Fletcher.forward(next,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self2;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			}
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.fold_mod = function(self,fn) {
	var this1 = eu_ohmrun_Fletcher.FlatMap(eu_ohmrun_Fletcher.lift(self),function(report) {
		return fn(report);
	});
	return this1;
};
eu_ohmrun_fletcher_ExecuteLift.and = function(self,that) {
	return eu_ohmrun_fletcher_ExecuteLift.execute(self,that);
};
var eu_ohmrun_fletcher_FiberLift = function() { };
$hxClasses["eu.ohmrun.fletcher.FiberLift"] = eu_ohmrun_fletcher_FiberLift;
eu_ohmrun_fletcher_FiberLift.__name__ = "eu.ohmrun.fletcher.FiberLift";
eu_ohmrun_fletcher_FiberLift.then = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(eu_ohmrun_fletcher_Fiber.prj(self),that);
	return this1;
};
var eu_ohmrun_fletcher_Fiber = {};
eu_ohmrun_fletcher_Fiber.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Fiber.work = function(this1) {
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	return this1.defer(null,this2);
};
eu_ohmrun_fletcher_Fiber.cycle = function(this1) {
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	return stx_stream_Work.toCycle(this1.defer(null,this2));
};
eu_ohmrun_fletcher_Fiber.submit = function(this1) {
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	stx_stream_CycleLift.submit(stx_stream_Work.toCycle(this1.defer(null,this2)),{ fileName : "eu/ohmrun/fletcher/Fiber.hx", lineNumber : 21, className : "eu.ohmrun.fletcher._Fiber.Fiber_Impl_", methodName : "submit"});
};
eu_ohmrun_fletcher_Fiber.crunch = function(this1) {
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	stx_stream_CycleLift.crunch(stx_stream_Work.toCycle(this1.defer(null,this2)));
};
eu_ohmrun_fletcher_Fiber.fromCompletion = function(self) {
	return eu_ohmrun_Fletcher.lift(self);
};
eu_ohmrun_fletcher_Fiber.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_Logging = function() { };
$hxClasses["eu.ohmrun.fletcher.Logging"] = eu_ohmrun_fletcher_Logging;
eu_ohmrun_fletcher_Logging.__name__ = "eu.ohmrun.fletcher.Logging";
eu_ohmrun_fletcher_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Logging.hx", lineNumber : 5, className : "eu.ohmrun.fletcher.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_Log.unit();
		var tag = scope.pack.join("/");
		var this2 = this1;
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		};
		return function(value,pos) {
			this2(value,fn(pos));
		};
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_Log.unit();
	}
};
var eu_ohmrun_fletcher_ModulateArgSum = $hxEnums["eu.ohmrun.fletcher.ModulateArgSum"] = { __ename__:"eu.ohmrun.fletcher.ModulateArgSum",__constructs__:null
	,ModulateArgFun1Produce: ($_=function(arw) { return {_hx_index:0,arw:arw,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFun1Produce",$_.__params__ = ["arw"],$_)
	,ModulateArgAttempt: ($_=function(self) { return {_hx_index:1,self:self,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgAttempt",$_.__params__ = ["self"],$_)
	,ModulateArgFletcher: ($_=function(arw) { return {_hx_index:2,arw:arw,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFletcher",$_.__params__ = ["arw"],$_)
	,ModulateArgFunResRes0: ($_=function(fn) { return {_hx_index:3,fn:fn,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFunResRes0",$_.__params__ = ["fn"],$_)
	,ModulateArgFun1Res: ($_=function(fn) { return {_hx_index:4,fn:fn,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFun1Res",$_.__params__ = ["fn"],$_)
	,ModulateArgFun1R: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFun1R",$_.__params__ = ["fn"],$_)
	,ModulateArgRes: ($_=function(ocR) { return {_hx_index:6,ocR:ocR,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgRes",$_.__params__ = ["ocR"],$_)
	,ModulateArgPure: ($_=function(o) { return {_hx_index:7,o:o,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgPure",$_.__params__ = ["o"],$_)
};
eu_ohmrun_fletcher_ModulateArgSum.__constructs__ = [eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Produce,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgAttempt,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFletcher,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFunResRes0,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Res,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1R,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgRes,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgPure];
var eu_ohmrun_fletcher_ModulateArg = {};
eu_ohmrun_fletcher_ModulateArg.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_ModulateArg._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ModulateArg.lift = function(self) {
	return eu_ohmrun_fletcher_ModulateArg._new(self);
};
eu_ohmrun_fletcher_ModulateArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ModulateArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ModulateArg.lift(this1);
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFun1Produce = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Produce(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgAttempt = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgAttempt(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFletcher = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFletcher(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFunResRes0 = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFunResRes0(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFun1Upshot = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Upshot(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFun1R = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1R(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgUpshot = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgUpshot(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgPure = function(o) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgPure(o));
};
eu_ohmrun_fletcher_ModulateArg.toModulate = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var arw = this1.arw;
		return eu_ohmrun_fletcher_Modulate.fromFun1Produce(arw);
	case 1:
		var self = this1.self;
		return eu_ohmrun_fletcher_Modulate.fromAttempt(self);
	case 2:
		var arw = this1.arw;
		return eu_ohmrun_fletcher_Modulate.fromFletcher(arw);
	case 3:
		var fn = this1.fn;
		return eu_ohmrun_fletcher_Modulate.fromFunResRes0(fn);
	case 4:
		var fn = this1.fn;
		var fn1 = fn;
		var fn = function(ocI) {
			switch(ocI._hx_index) {
			case 0:
				var t = ocI.t;
				return fn1(t);
			case 1:
				var e = ocI.e;
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
			}
		};
		var this2 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
			var res = fn(p);
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var resI = this1;
			var self = cont;
			return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		});
		return this2;
	case 5:
		var fn2 = this1.fn;
		return eu_ohmrun_fletcher_Modulate.fromFun1R(fn2);
	case 6:
		var ocR = this1.ocR;
		return eu_ohmrun_fletcher_Modulate.fromUpshot(ocR);
	case 7:
		var o = this1.o;
		return eu_ohmrun_fletcher_Modulate.pure(o);
	}
};
var eu_ohmrun_fletcher_ModulateApi = function() { };
$hxClasses["eu.ohmrun.fletcher.ModulateApi"] = eu_ohmrun_fletcher_ModulateApi;
eu_ohmrun_fletcher_ModulateApi.__name__ = "eu.ohmrun.fletcher.ModulateApi";
eu_ohmrun_fletcher_ModulateApi.__isInterface__ = true;
eu_ohmrun_fletcher_ModulateApi.__interfaces__ = [eu_ohmrun_FletcherApi];
var eu_ohmrun_fletcher_ModulateLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ModulateLift"] = eu_ohmrun_fletcher_ModulateLift;
eu_ohmrun_fletcher_ModulateLift.__name__ = "eu.ohmrun.fletcher.ModulateLift";
eu_ohmrun_fletcher_ModulateLift.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ModulateLift.or = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self1 = cont;
			return stx_pico_EitherLift.fold(t,function(lhs) {
				return eu_ohmrun_Fletcher.forward(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,lhs));
			},function(rhs) {
				return eu_ohmrun_Fletcher.forward(that,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,rhs));
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self2;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	}));
};
eu_ohmrun_fletcher_ModulateLift.errata = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self1 = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_Fletcher._.map(self,function(o) {
				var self;
				switch(o._hx_index) {
				case 0:
					var t = o.t;
					self = stx_nano_Res.accept(t);
					break;
				case 1:
					var e = o.e;
					self = stx_nano_Res.reject(fn(e));
					break;
				}
				var this1 = self;
				return this1;
			}),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self2;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	}));
};
eu_ohmrun_fletcher_ModulateLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.errata(self,function(e) {
		return stx_nano_Rejection.errate(e,fn);
	});
};
eu_ohmrun_fletcher_ModulateLift.reframe = function(self) {
	return eu_ohmrun_fletcher_Reframe.fromModulate(eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,p),function(ok) {
			var receiver;
			switch(ok._hx_index) {
			case 0:
				var _g = ok.t;
				switch(p._hx_index) {
				case 0:
					var tt = p.t;
					var t = _g;
					receiver = stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
					break;
				case 1:
					var e = p.e;
					receiver = stx_nano_ResSum.Reject(e);
					break;
				}
				break;
			case 1:
				var _g = ok.e;
				if(p._hx_index == 1) {
					var ee = p.e;
					var e = _g;
					receiver = stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
				} else {
					var e = _g;
					receiver = stx_nano_ResSum.Reject(e);
				}
				break;
			}
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,receiver);
		},function(e) {
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
eu_ohmrun_fletcher_ModulateLift.modulate = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher._.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that)));
};
eu_ohmrun_fletcher_ModulateLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.modulate(self,eu_ohmrun_fletcher_Attempt.toModulate(that));
};
eu_ohmrun_fletcher_ModulateLift.convert = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(that));
};
eu_ohmrun_fletcher_ModulateLift.map = function(self,fn) {
	var fn1 = fn;
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return eu_ohmrun_fletcher_ModulateLift.convert(self,this1);
};
eu_ohmrun_fletcher_ModulateLift.mapi = function(self,fn) {
	var fn1 = fn;
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_FletcherLift.then(eu_ohmrun_fletcher_Modulate.fromFletcher(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})),self));
};
eu_ohmrun_fletcher_ModulateLift.environment = function(self,i,success,failure) {
	return eu_ohmrun_Fletcher._.environment(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success(t);
			break;
		case 1:
			var e = res.e;
			failure(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	});
};
eu_ohmrun_fletcher_ModulateLift.produce = function(self,i) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self,i).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ModulateLift.reclaim = function(self,that) {
	var tmp = eu_ohmrun_fletcher_ModulateLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(that));
	var this1 = eu_ohmrun_Fletcher.Anon(function(prd,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(prd,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_fletcher_ModulateLift.attempt(tmp,this1));
};
eu_ohmrun_fletcher_ModulateLift.arrange = function(self,then) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,i),function(res) {
			var then1 = then;
			var receiver;
			switch(res._hx_index) {
			case 0:
				var _g = res.t;
				switch(i._hx_index) {
				case 0:
					var tt = i.t;
					var t = _g;
					receiver = stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
					break;
				case 1:
					var e = i.e;
					receiver = stx_nano_ResSum.Reject(e);
					break;
				}
				break;
			case 1:
				var _g = res.e;
				if(i._hx_index == 1) {
					var ee = i.e;
					var e = _g;
					receiver = stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
				} else {
					var e = _g;
					receiver = stx_nano_ResSum.Reject(e);
				}
				break;
			}
			return eu_ohmrun_Fletcher.forward(then1,receiver);
		},function(e) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_ModulateLift.split = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.split(self,that),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,stx_nano_Res._.zip)));
};
eu_ohmrun_fletcher_ModulateLift.broach = function(self) {
	var fn = function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
			switch(lhs._hx_index) {
			case 0:
				var _g = lhs.t;
				switch(rhs._hx_index) {
				case 0:
					var tt = rhs.t;
					var t = _g;
					return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
				case 1:
					var e = rhs.e;
					return stx_nano_ResSum.Reject(e);
				}
				break;
			case 1:
				var _g = lhs.e;
				if(rhs._hx_index == 1) {
					var ee = rhs.e;
					var e = _g;
					return stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
				} else {
					var e = _g;
					return stx_nano_ResSum.Reject(e);
				}
				break;
			}
		});
	};
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_FletcherLift.then(eu_ohmrun_Fletcher._.broach(self),eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
eu_ohmrun_fletcher_ModulateLift.flat_map = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.FlatMap(self,function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			tmp = fn(t);
			break;
		case 1:
			var e = res.e;
			tmp = eu_ohmrun_fletcher_Modulate.fromUpshot(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			break;
		}
		return eu_ohmrun_fletcher_Modulate.toFletcher(tmp);
	}));
};
eu_ohmrun_fletcher_ModulateLift.command = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_CommandLift.produce(that,eu_ohmrun_fletcher_Produce.pure(t)),t).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ModulateLift.adjust = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher._.map(self,function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = fn(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	}));
};
var eu_ohmrun_fletcher_Modulate = {};
eu_ohmrun_fletcher_Modulate._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromApi = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Modulate.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Modulate.bump = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.toModulate(self);
};
eu_ohmrun_fletcher_Modulate.unit = function() {
	var fn = function(oc) {
		return oc;
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.pure = function(o) {
	return eu_ohmrun_fletcher_Modulate.fromUpshot(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
};
eu_ohmrun_fletcher_Modulate.Fun = function(fn) {
	return eu_ohmrun_fletcher_Modulate.fromFun1R(fn);
};
eu_ohmrun_fletcher_Modulate.fromFun1Upshot = function(fn) {
	var fn1 = function(ocI) {
		switch(ocI._hx_index) {
		case 0:
			var t = ocI.t;
			return fn(t);
		case 1:
			var e = ocI.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		}
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromFun1R = function(fn) {
	var fn1 = function(ocI) {
		switch(ocI._hx_index) {
		case 0:
			var t = ocI.t;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(t));
		case 1:
			var e = ocI.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		}
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromUpshot = function(ocO) {
	var fn = function(ocI) {
		switch(ocI._hx_index) {
		case 0:
			var t = ocI.t;
			return ocO;
		case 1:
			var e = ocI.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		}
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromFunResRes0 = function(fn) {
	var fn1 = function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
		case 1:
			var e = res.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		}
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromFunResUpshot = function(fn) {
	var fn1 = function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
		case 1:
			var e = res.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		}
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromFletcher = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver;
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,t),function(ok) {
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
			},function(no) {
				var this1 = stx_nano_Defect.toError(no).errate(stx_nano_DeclinationSum.REJECT);
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1));
			});
			break;
		case 1:
			var e = p.e;
			receiver = eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e)),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 31, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "value"});
			break;
		}
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromAttempt = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self1 = cont;
			return eu_ohmrun_Fletcher.forward(self,t).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = p.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self2;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.fromFun1Produce = function(arw) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(arw(t),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
eu_ohmrun_fletcher_Modulate.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Modulate.environment = function(this1,i,success,failure) {
	var success1 = success;
	var failure1 = failure;
	return eu_ohmrun_Fletcher._.environment(this1,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	});
};
eu_ohmrun_fletcher_Modulate.split = function(this1,that) {
	return eu_ohmrun_fletcher_Modulate._.split(this1,that);
};
eu_ohmrun_fletcher_Modulate.mapi = function(this1,fn) {
	return eu_ohmrun_fletcher_Modulate._.mapi(this1,fn);
};
eu_ohmrun_fletcher_Modulate.convert = function(this1,that) {
	return eu_ohmrun_fletcher_Modulate._.convert(this1,that);
};
eu_ohmrun_fletcher_Modulate.broach = function(this1) {
	return eu_ohmrun_fletcher_Modulate._.broach(this1);
};
eu_ohmrun_fletcher_Modulate.flat_map = function(this1,fn) {
	return eu_ohmrun_fletcher_Modulate._.flat_map(this1,fn);
};
eu_ohmrun_fletcher_Modulate.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_Perform = {};
eu_ohmrun_fletcher_Perform.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Perform._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Perform.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Perform.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Perform.toModulate = function(this1) {
	var this2 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(eu_ohmrun_Fletcher._.map(this1,function(_) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,_);
		}),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this2;
};
eu_ohmrun_fletcher_Perform.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Perform.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
var eu_ohmrun_fletcher_ProduceArgSum = $hxEnums["eu.ohmrun.fletcher.ProduceArgSum"] = { __ename__:"eu.ohmrun.fletcher.ProduceArgSum",__constructs__:null
	,ProduceArgPure: ($_=function(o) { return {_hx_index:0,o:o,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgPure",$_.__params__ = ["o"],$_)
	,ProduceArgSync: ($_=function(res) { return {_hx_index:1,res:res,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgSync",$_.__params__ = ["res"],$_)
	,ProduceArgThunk: ($_=function(fn) { return {_hx_index:2,fn:fn,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgThunk",$_.__params__ = ["fn"],$_)
	,ProduceArgRejection: ($_=function(rejection) { return {_hx_index:3,rejection:rejection,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgRejection",$_.__params__ = ["rejection"],$_)
	,ProduceArgPledge: ($_=function(pledge) { return {_hx_index:4,pledge:pledge,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgPledge",$_.__params__ = ["pledge"],$_)
	,ProduceArgFunXProduce: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgFunXProduce",$_.__params__ = ["fn"],$_)
	,ProduceArgFletcher: ($_=function(fletcher) { return {_hx_index:6,fletcher:fletcher,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgFletcher",$_.__params__ = ["fletcher"],$_)
};
eu_ohmrun_fletcher_ProduceArgSum.__constructs__ = [eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPure,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgSync,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgThunk,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgRejection,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPledge,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFunXProduce,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFletcher];
var eu_ohmrun_fletcher_ProduceArg = {};
eu_ohmrun_fletcher_ProduceArg.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_ProduceArg._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ProduceArg.lift = function(self) {
	return eu_ohmrun_fletcher_ProduceArg._new(self);
};
eu_ohmrun_fletcher_ProduceArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ProduceArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ProduceArg.lift(this1);
};
eu_ohmrun_fletcher_ProduceArg.fromFunXProduce = function(fn) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFunXProduce(fn);
};
eu_ohmrun_fletcher_ProduceArg.fromFletcher = function(fletcher) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFletcher(fletcher);
};
eu_ohmrun_fletcher_ProduceArg.fromPledge = function(pledge) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPledge(pledge);
};
eu_ohmrun_fletcher_ProduceArg.fromRejection = function(rejection) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgRejection(rejection);
};
eu_ohmrun_fletcher_ProduceArg.fromThunk = function(fn) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgThunk(fn);
};
eu_ohmrun_fletcher_ProduceArg.fromSync = function(res) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgSync(res);
};
eu_ohmrun_fletcher_ProduceArg.fromPure = function(o) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPure(o);
};
var eu_ohmrun_fletcher_ProduceLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ProduceLift"] = eu_ohmrun_fletcher_ProduceLift;
eu_ohmrun_fletcher_ProduceLift.__name__ = "eu.ohmrun.fletcher.ProduceLift";
eu_ohmrun_fletcher_ProduceLift.environment = function(self,success,failure) {
	return eu_ohmrun_Fletcher._.environment(self,null,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success(t);
			break;
		case 1:
			var e = res.e;
			failure(e);
			break;
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
eu_ohmrun_fletcher_ProduceLift.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.map = function(self,fn) {
	var fn1 = function(oc) {
		var fn1 = fn;
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_ResSum.Accept(fn1(t));
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	};
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
eu_ohmrun_fletcher_ProduceLift.errata = function(self,fn) {
	var fn1 = function(oc) {
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_Res.accept(t);
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_Res.reject(fn(e));
			break;
		}
		var this1 = self;
		return this1;
	};
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
eu_ohmrun_fletcher_ProduceLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ProduceLift.errata(self,function(er) {
		return stx_nano_Rejection.errate(er,fn);
	});
};
eu_ohmrun_fletcher_ProduceLift.point = function(self,success) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,null),function(res) {
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = eu_ohmrun_Fletcher.forward(success(t),null);
				break;
			case 1:
				var e = res.e;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(e));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				receiver = this1;
				break;
			}
			return receiver;
		},function(err) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.provide = function(self) {
	var this1 = eu_ohmrun_Fletcher._.map(self,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return t;
		case 1:
			var e = res.e;
			throw haxe_Exception.thrown(e);
		}
	});
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.convert = function(self,then) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher._.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Convert._.toModulate(then))));
};
eu_ohmrun_fletcher_ProduceLift.recover = function(self,rec) {
	var this1 = eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Recover.toReform(rec));
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Attempt.toModulate(that))));
};
eu_ohmrun_fletcher_ProduceLift.deliver = function(self,fn) {
	var fn1 = function(res) {
		var fn1;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			fn1 = stx_nano_Report.unit();
			break;
		case 1:
			var e = res.e;
			fn1 = stx_nano_Report.pure(e);
			break;
		}
		return fn1;
	};
	var this1 = eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.reclaim = function(self,next) {
	var tmp = eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_ConvertLift.toModulate(next))));
	var this1 = eu_ohmrun_Fletcher.Anon(function(prd,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(prd,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return eu_ohmrun_fletcher_ProduceLift.attempt(tmp,this1);
};
eu_ohmrun_fletcher_ProduceLift.arrange = function(self,next) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,null),function(res) {
			var next1 = next;
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tII = i;
			var fn = function(tI) {
				return _g(tI,tII);
			};
			var self;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				self = stx_nano_ResSum.Accept(fn(t));
				break;
			case 1:
				var e = res.e;
				self = stx_nano_ResSum.Reject(e);
				break;
			}
			var this1 = self;
			return eu_ohmrun_Fletcher.forward(next1,this1);
		},function(err) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.rearrange = function(self,next) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,null),function(res) {
			return eu_ohmrun_Fletcher.forward(next,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,res,i)));
		},function(no) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.modulate = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that)));
};
eu_ohmrun_fletcher_ProduceLift.fudge = function(self) {
	var self1 = eu_ohmrun_Fletcher._.fudge(self,null);
	switch(self1._hx_index) {
	case 0:
		var t = self1.t;
		return t;
	case 1:
		var e = self1.e;
		throw haxe_Exception.thrown(e);
	}
};
eu_ohmrun_fletcher_ProduceLift.force = function(self) {
	var self1 = eu_ohmrun_Fletcher._.force(self,null);
	switch(self1._hx_index) {
	case 0:
		var t = self1.t;
		return t;
	case 1:
		var e = self1.e;
		throw haxe_Exception.thrown(e);
	}
};
eu_ohmrun_fletcher_ProduceLift.flat_map = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher.FlatMap(self,function(res) {
		var this1;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			this1 = that(t);
			break;
		case 1:
			var e = res.e;
			this1 = eu_ohmrun_fletcher_Produce.fromUpshot(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			break;
		}
		return this1;
	}));
};
eu_ohmrun_fletcher_ProduceLift.fold_flat_map = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher.FlatMap(self,function(res) {
		return eu_ohmrun_fletcher_Produce.prj(that(res));
	}));
};
eu_ohmrun_fletcher_ProduceLift.then = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,that);
	return this1;
};
eu_ohmrun_fletcher_ProduceLift.split = function(self,that) {
	var tmp = eu_ohmrun_Fletcher._.split(self,that);
	var fn = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
		switch(l._hx_index) {
		case 0:
			var _g = l.t;
			switch(r._hx_index) {
			case 0:
				var tt = r.t;
				var t = _g;
				return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
			case 1:
				var e = r.e;
				return stx_nano_ResSum.Reject(e);
			}
			break;
		case 1:
			var _g = l.e;
			if(r._hx_index == 1) {
				var ee = r.e;
				var e = _g;
				return stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
			} else {
				var e = _g;
				return stx_nano_ResSum.Reject(e);
			}
			break;
		}
	});
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(tmp,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
eu_ohmrun_fletcher_ProduceLift.adjust = function(self,fn) {
	var fn1 = function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = fn(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	};
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
eu_ohmrun_fletcher_ProduceLift.pledge = function(self) {
	return stx_nano_Pledge.lift(tink_core_Future.map(eu_ohmrun_Fletcher._.future(self,null),function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var t = outcome.t;
			return t;
		case 1:
			var e = outcome.e;
			var this1 = stx_nano_Defect.toError(stx_nano_Defect.elide(e)).errate(stx_nano_DeclinationSum.REJECT);
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
		}
	}));
};
eu_ohmrun_fletcher_ProduceLift.toModulate = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
var eu_ohmrun_fletcher_Produce = {};
eu_ohmrun_fletcher_Produce.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Produce._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Produce.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Produce.bump = function(self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Produce.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Produce.Sync(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.Thunk(fn);
	case 3:
		var rejection = self.rejection;
		return eu_ohmrun_fletcher_Produce.fromRejection(rejection);
	case 4:
		var pledge = self.pledge;
		return eu_ohmrun_fletcher_Produce.fromPledge(pledge);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.fromFunXProduce(fn);
	case 6:
		var fletcher = self.fletcher;
		return eu_ohmrun_fletcher_Produce.fromFletcher(fletcher);
	}
};
eu_ohmrun_fletcher_Produce.Sync = function(result) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,result);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.Thunk = function(result) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,result());
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.fromFunXProduce = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self(),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.fromRejection = function(e) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
};
eu_ohmrun_fletcher_Produce.pure = function(v) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
};
eu_ohmrun_fletcher_Produce.accept = function(v) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
};
eu_ohmrun_fletcher_Produce.reject = function(e) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
};
eu_ohmrun_fletcher_Produce.fromUpshot = function(res) {
	return eu_ohmrun_fletcher_Produce.Sync(res);
};
eu_ohmrun_fletcher_Produce.fromFunXUpshot = function(fn) {
	return eu_ohmrun_fletcher_Produce.Thunk(fn);
};
eu_ohmrun_fletcher_Produce.fromPledge = function(pl) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = stx_nano_PledgeLift.fold(pl,function(x) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x));
		},function(e) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
		});
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.fromFunXR = function(fn) {
	var fn1 = function(_) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.fromFletcher = function(arw) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(arw,null),function(ok) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
		},function(no) {
			var this1 = stx_nano_Defect.toError(no).errate(stx_nano_DeclinationSum.REJECT);
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1));
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.bind_fold = function(data,fn,r) {
	return stx_nano_IterLift.lfold(data,function(next,memo) {
		return eu_ohmrun_fletcher_Produce.flat_map(memo,function(r) {
			return fn(next,r);
		});
	},eu_ohmrun_fletcher_Produce.pure(r));
};
eu_ohmrun_fletcher_Produce.parallel = function(data,fn,r) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var memo = r;
		var fail = null;
		var cell = stx_nano_Cell.make(function() {
			if(fail == null) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,memo);
			} else {
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fail);
			}
		});
		var this1 = null;
		var work = this1;
		var count = 0;
		var done = false;
		var trigger = new tink_core_FutureTrigger();
		var p = $getIterator(data);
		while(p.hasNext()) {
			var p1 = p.next();
			count += 1;
			var this1 = fn(p1,cell);
			var success = [(function() {
				return function(ok) {
					if(!done) {
						memo = ok;
						count -= 1;
						if(count == 0) {
							done = true;
							trigger.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,memo)));
						}
					}
				};
			})()];
			var this2 = eu_ohmrun_Fletcher._.environment(this1,null,(function(failure,success) {
				return function(res) {
					switch(res._hx_index) {
					case 0:
						var t = res.t;
						success[0](t);
						break;
					case 1:
						var e = res.e;
						failure[0](e);
						break;
					}
				};
			})([(function() {
				return function(no) {
					fail = no;
					done = true;
					trigger.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,no)));
				};
			})()],success),(function() {
				return function(e) {
					throw haxe_Exception.thrown(e);
				};
			})());
			var this3 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon((function() {
				return function(fn) {
					return fn(new tink_core_FutureTrigger());
				};
			})()));
			work = stx_stream_WorkLift.par(work,this2.defer(null,this3));
		}
		var self = cont;
		var self1 = cont;
		var ft = trigger;
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return stx_stream_WorkLift.par(work,this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		}))));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.fromProvide = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		return eu_ohmrun_Fletcher.forward(self,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Produce.environment = function(this1,success,failure) {
	var success1 = success;
	var failure1 = failure;
	return eu_ohmrun_Fletcher._.environment(this1,null,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
eu_ohmrun_fletcher_Produce.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Produce.toPropose = function(this1) {
	var this2 = eu_ohmrun_Fletcher._.map(this1,function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_ChunkSum.Val(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ChunkSum.End(e);
			break;
		}
		return self;
	});
	return this2;
};
eu_ohmrun_fletcher_Produce.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Produce.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Produce.fudge = function(this1) {
	var self = eu_ohmrun_Fletcher._.fudge(this1,null);
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
eu_ohmrun_fletcher_Produce.flat_map = function(this1,fn) {
	return eu_ohmrun_fletcher_Produce._.flat_map(this1,fn);
};
var eu_ohmrun_fletcher_ProposeLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ProposeLift"] = eu_ohmrun_fletcher_ProposeLift;
eu_ohmrun_fletcher_ProposeLift.__name__ = "eu.ohmrun.fletcher.ProposeLift";
eu_ohmrun_fletcher_ProposeLift.flat_map = function(self,fn) {
	var this1 = self;
	var this2 = eu_ohmrun_Fletcher.FlatMap(this1,function(chunk) {
		switch(chunk._hx_index) {
		case 0:
			var v = chunk.v;
			return fn(v);
		case 1:
			return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.Tap);
		case 2:
			var e = chunk.err;
			return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.End(e));
		}
	});
	return this2;
};
eu_ohmrun_fletcher_ProposeLift.convert = function(self,next) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(next,stx_nano_ChunkSum.Val),v).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.attempt = function(self,next) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(next,function(res) {
				return stx_nano_lift_LiftResToChunk.toChunk(res);
			}),v).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.diffuse = function(self,next) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.lift(next));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.or = function(self,or) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Val(v));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 1:
			var self = cont;
			return eu_ohmrun_Fletcher.forward(or(),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.toProduce = function(self) {
	var val = function(o) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.Some(o));
	};
	var ers = function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
	};
	var tap = function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.None);
	};
	var self1 = function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			self = val(v);
			break;
		case 1:
			self = tap();
			break;
		case 2:
			var e = chk.err;
			self = ers(e);
			break;
		}
		return self;
	};
	var this1 = eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher.lift(self),self1);
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.materialise = function(self) {
	var this1 = eu_ohmrun_Fletcher._.map(eu_ohmrun_Fletcher.lift(self),function(ipt) {
		var self;
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			self = stx_nano_ChunkSum.Val(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,v));
			break;
		case 1:
			self = stx_nano_ChunkSum.Val(haxe_ds_Option.None);
			break;
		case 2:
			var e = ipt.err;
			self = stx_nano_ChunkSum.End(e);
			break;
		}
		return self;
	});
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.and = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(eu_ohmrun_Fletcher.lift(self),eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tI = v;
			var receiver = function(tII) {
				return _g(tI,tII);
			};
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_ProposeLift.map(that,receiver),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.command = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			return eu_ohmrun_Fletcher.forward(that,v).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.unit());
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	}));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.before = function(self,fn) {
	var fn1 = stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,function(_) {
		fn();
	});
	var this1 = eu_ohmrun_Fletcher._.then(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}),self);
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.after = function(self,fn) {
	var fn1 = stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,fn);
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ProposeLift.environment = function(self,success,failure) {
	return eu_ohmrun_Fletcher._.environment(eu_ohmrun_Fletcher.lift(self),null,function(chunk) {
		switch(chunk._hx_index) {
		case 0:
			var v = chunk.v;
			success(haxe_ds_Option.Some(v));
			break;
		case 1:
			success(haxe_ds_Option.None);
			break;
		case 2:
			var e = chunk.err;
			failure(e);
			break;
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
eu_ohmrun_fletcher_ProposeLift.map = function(self,then) {
	var val = stx_fn_UnaryLift.then(then,stx_nano_ChunkSum.Val);
	var ers = stx_nano_ChunkSum.End;
	var tap = function() {
		return stx_nano_ChunkSum.Tap;
	};
	var fn = function(chk) {
		var fn;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			fn = val(v);
			break;
		case 1:
			fn = tap();
			break;
		case 2:
			var e = chk.err;
			fn = ers(e);
			break;
		}
		return fn;
	};
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
var eu_ohmrun_fletcher_Propose = {};
eu_ohmrun_fletcher_Propose.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Propose._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Propose.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Propose.fromChunk = function(chunk) {
	var this1 = eu_ohmrun_Fletcher.pure(chunk);
	return this1;
};
eu_ohmrun_fletcher_Propose.fromOption = function(self) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		self1 = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		self1 = stx_nano_ChunkSum.Tap;
		break;
	}
	var this1 = eu_ohmrun_Fletcher.pure(self1);
	return this1;
};
eu_ohmrun_fletcher_Propose.make = function(o) {
	return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_lift_LiftNano.chunk(stx_nano_Wildcard.__,o));
};
eu_ohmrun_fletcher_Propose.pure = function(o) {
	return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.Val(o));
};
eu_ohmrun_fletcher_Propose.fromRejection = function(e) {
	return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.End(e));
};
eu_ohmrun_fletcher_Propose.unit = function() {
	var this1 = eu_ohmrun_Fletcher.pure(stx_nano_ChunkSum.Tap);
	return this1;
};
eu_ohmrun_fletcher_Propose.fromChunkThunk = function(thunk) {
	var fn = function(_) {
		return thunk();
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Propose.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Propose.elide = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Propose.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Propose.bind_fold = function(fn,iterable,seed) {
	return stx_pico_Option.fromNullT(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(iterable),function(next,memo) {
		var this1 = eu_ohmrun_FletcherLift.then(memo,eu_ohmrun_Fletcher.Anon(function(res,cont) {
			switch(res._hx_index) {
			case 0:
				var v = res.v;
				var self = cont;
				return eu_ohmrun_Fletcher.forward(fn(next,v),null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			case 1:
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				return eu_ohmrun_fletcher_Receiver.reply(this1);
			case 2:
				var e = res.err;
				var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value1);
					return trg;
				}));
				return eu_ohmrun_fletcher_Receiver.reply(this1);
			}
		}));
		return this1;
	},eu_ohmrun_fletcher_Propose.pure(seed)));
};
eu_ohmrun_fletcher_Propose.flat_map = function(this1,fn) {
	return eu_ohmrun_fletcher_Propose._.flat_map(eu_ohmrun_fletcher_Propose.get_self(this1),fn);
};
var eu_ohmrun_fletcher_ProvideLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ProvideLift"] = eu_ohmrun_fletcher_ProvideLift;
eu_ohmrun_fletcher_ProvideLift.__name__ = "eu.ohmrun.fletcher.ProvideLift";
eu_ohmrun_fletcher_ProvideLift.environment = function(self,handler) {
	return eu_ohmrun_Fletcher._.environment(self,null,function(o) {
		handler(o);
	},function(e) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(6);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 75, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "environment"}));
		throw haxe_Exception.thrown(e);
	});
};
eu_ohmrun_fletcher_ProvideLift.flat_map = function(self,fn) {
	var this1 = eu_ohmrun_Fletcher.FlatMap(self,fn);
	return this1;
};
eu_ohmrun_fletcher_ProvideLift.and = function(lhs,rhs) {
	var this1 = eu_ohmrun_Fletcher._.pinch(lhs,rhs);
	return this1;
};
eu_ohmrun_fletcher_ProvideLift.convert = function(self,that) {
	var this1 = eu_ohmrun_fletcher_Convert._.then(self,that);
	return this1;
};
eu_ohmrun_fletcher_ProvideLift.toProduce = function(self) {
	var fn = function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	};
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ProvideLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.attempt(eu_ohmrun_fletcher_ProvideLift.toProduce(self),that);
};
eu_ohmrun_fletcher_ProvideLift.map = function(self,fn) {
	var fn1 = fn;
	var this1 = eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ProvideLift.fudge = function(self) {
	return eu_ohmrun_Fletcher._.fudge(self,null);
};
eu_ohmrun_fletcher_ProvideLift.then = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(self,that);
	return this1;
};
var eu_ohmrun_fletcher_Provide = {};
eu_ohmrun_fletcher_Provide.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Provide._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Provide.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Provide.pure = function(v) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,v);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Provide.fromFuture = function(future) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = tink_core_Future.map(future,function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Provide.fromFunXR = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return eu_ohmrun_fletcher_Receiver.reply(this1);
	});
	return this1;
};
eu_ohmrun_fletcher_Provide.fromFunXFuture = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var ft = tink_core_Future.map(fn(),function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return eu_ohmrun_fletcher_Receiver.reply(this1);
	});
	return this1;
};
eu_ohmrun_fletcher_Provide.fromFunTerminalWork = function(fn) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		return fn(cont);
	});
	return this1;
};
eu_ohmrun_fletcher_Provide.bind_fold = function(fn,arr,seed) {
	var v = seed;
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,v);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return stx_nano_ClusterLift.lfold(arr,function(next,memo) {
		return eu_ohmrun_fletcher_ProvideLift.convert(memo,eu_ohmrun_fletcher_Convert.fromFun1Provide(function(o) {
			return eu_ohmrun_fletcher_ConvertLift.provide(fn,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,next,o));
		}));
	},this1);
};
eu_ohmrun_fletcher_Provide.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Provide.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Provide.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Provide.fudge = function(this1) {
	return eu_ohmrun_Fletcher._.fudge(this1,null);
};
var eu_ohmrun_fletcher_ReceiverLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ReceiverLift"] = eu_ohmrun_fletcher_ReceiverLift;
eu_ohmrun_fletcher_ReceiverLift.__name__ = "eu.ohmrun.fletcher.ReceiverLift";
eu_ohmrun_fletcher_ReceiverLift.defer = function(self) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return self().apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(fn)));
	}));
	return this1;
};
eu_ohmrun_fletcher_ReceiverLift.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ReceiverLift.flat_fold = function(self,ok,no) {
	var uuid = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxx");
	var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(0);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("set up flat_fold: " + uuid)(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 73, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
	var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(0);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("call flat_fold " + uuid)(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 76, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
		var this2 = self;
		return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(0);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("inside flat_fold " + uuid)(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 80, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
			var this2 = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.flatMap(tink_core_Future.flatMap(tink_core_Future.flatMap(p,function(out) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var fn = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(0);
					});
				};
				(function(value,pos) {
					this1(value,fn(pos));
				})(stx_log_Stringify.fromString("flat_fold:end " + uuid)(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 83, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
				var v;
				switch(out._hx_index) {
				case 0:
					var t = out.t;
					v = ok(t);
					break;
				case 1:
					var e = out.e;
					v = no(e);
					break;
				}
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}),function(rec) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(rec.apply(cont)));
			}),function(bang) {
				if(bang == null) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO));
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(bang));
				}
			}))));
			return this2;
		})));
	}));
	return this2;
};
eu_ohmrun_fletcher_ReceiverLift.map = function(self,fn) {
	var this1 = eu_ohmrun_fletcher_core_Cont._.map(self,function(out) {
		return tink_core_Future.map(out,function(x) {
			var fn1 = fn;
			return stx_pico_OutcomeLift.flat_map(x,function(x) {
				return stx_pico_OutcomeSum.Success(fn1(x));
			});
		});
	});
	return this1;
};
eu_ohmrun_fletcher_ReceiverLift.flat_map = function(self,fn) {
	return eu_ohmrun_fletcher_ReceiverLift.flat_fold(self,fn,function(e) {
		return eu_ohmrun_fletcher_Receiver.issue(stx_pico_OutcomeSum.Failure(e),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 106, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_map"});
	});
};
eu_ohmrun_fletcher_ReceiverLift.tap = function(self,fn) {
	return eu_ohmrun_fletcher_ReceiverLift.map(self,stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).command(fn));
};
eu_ohmrun_fletcher_ReceiverLift.fold_bind = function(self,ok,no) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(cont) {
		var this1 = self;
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return cont.apply(eu_ohmrun_fletcher_ReceiverInputLift.fold_bind(p,ok,no));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ReceiverLift.fold_mapp = function(self,ok,no) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(cont) {
		var this1 = self;
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return cont.apply(eu_ohmrun_fletcher_ReceiverInputLift.fold_mapp(p,ok,no));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_ReceiverLift.mod = function(self,g) {
	return eu_ohmrun_fletcher_ReceiverLift.lift(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,g)));
};
eu_ohmrun_fletcher_ReceiverLift.zip = function(self,that) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(f) {
		var lhs = null;
		var rhs = null;
		var this1 = self;
		var work_left = this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ocI) {
			lhs = ocI;
			var this1 = null;
			return this1;
		})));
		var work_right = that.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ocII) {
			rhs = ocII;
			var this1 = null;
			return this1;
		})));
		var self1 = stx_stream_WorkLift.par(work_left,work_right);
		var this1 = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.flatMap(tink_core_Future.irreversible(function(cb) {
			var ipt = eu_ohmrun_fletcher_ReceiverInput.zip(lhs,rhs);
			var res = f.apply(ipt);
			cb(res);
		}),function(bang) {
			if(bang == null) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(bang));
			}
		}))));
		return stx_stream_WorkLift.seq(self1,this1);
	}));
	return this1;
};
var eu_ohmrun_fletcher_Receiver = {};
eu_ohmrun_fletcher_Receiver.reply = function(this1) {
	return this1.apply(eu_ohmrun_fletcher_ReceiverSink.toApply(eu_ohmrun_fletcher_ReceiverSink.lift(new eu_ohmrun_fletcher_receiver_$sink_term_Unit())));
};
eu_ohmrun_fletcher_Receiver.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Receiver._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Receiver.issue = function(outcome,pos) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(fn) {
		var t = new tink_core_FutureTrigger();
		t.trigger(outcome);
		return fn.apply(t);
	}));
	return this1;
};
eu_ohmrun_fletcher_Receiver.thunk = function(self,pos) {
	var this1 = new eu_ohmrun_fletcher_receiver_term_Thunk(self);
	return this1;
};
eu_ohmrun_fletcher_Receiver.value = function(r,pos) {
	return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,r),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 31, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "value"});
};
eu_ohmrun_fletcher_Receiver.error = function(err,pos) {
	return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
};
eu_ohmrun_fletcher_Receiver.later = function(ft,pos) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(fn) {
		return fn.apply(ft);
	}));
	return this1;
};
eu_ohmrun_fletcher_Receiver.serve = function(this1) {
	return eu_ohmrun_fletcher_Receiver.reply(this1);
};
eu_ohmrun_fletcher_Receiver.toString = function(this1) {
	return "Receiver(" + Std.string(this1) + ")";
};
eu_ohmrun_fletcher_Receiver.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ReceiverInputLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ReceiverInputLift"] = eu_ohmrun_fletcher_ReceiverInputLift;
eu_ohmrun_fletcher_ReceiverInputLift.__name__ = "eu.ohmrun.fletcher.ReceiverInputLift";
eu_ohmrun_fletcher_ReceiverInputLift.fold_bind = function(self,ok,no) {
	return tink_core_Future.flatMap(self,function(oc) {
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			return ok(t);
		case 1:
			var e = oc.e;
			return no(e);
		}
	});
};
eu_ohmrun_fletcher_ReceiverInputLift.fold_mapp = function(self,ok,no) {
	return tink_core_Future.map(self,function(oc) {
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			return ok(t);
		case 1:
			var e = oc.e;
			return no(e);
		}
	});
};
eu_ohmrun_fletcher_ReceiverInputLift.map = function(self,fn) {
	return tink_core_Future.map(self,function(oc) {
		var fn1 = fn;
		return stx_pico_OutcomeLift.flat_map(oc,function(x) {
			return stx_pico_OutcomeSum.Success(fn1(x));
		});
	});
};
var eu_ohmrun_fletcher_ReceiverInput = {};
eu_ohmrun_fletcher_ReceiverInput.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_ReceiverInput._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ReceiverInput.lift = function(self) {
	return eu_ohmrun_fletcher_ReceiverInput._new(self);
};
eu_ohmrun_fletcher_ReceiverInput.zip = function(this1,that) {
	return tink_core_Future.merge(this1,eu_ohmrun_fletcher_ReceiverInput.prj(that),function(l,r) {
		return stx_nano_lift_LiftOutcomeTDefect.zip(l,r);
	});
};
eu_ohmrun_fletcher_ReceiverInput.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ReceiverInput.get_self = function(this1) {
	return eu_ohmrun_fletcher_ReceiverInput.lift(this1);
};
var eu_ohmrun_fletcher_ReceiverSink = {};
eu_ohmrun_fletcher_ReceiverSink.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_ReceiverSink._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_ReceiverSink.lift = function(self) {
	return eu_ohmrun_fletcher_ReceiverSink._new(self);
};
eu_ohmrun_fletcher_ReceiverSink.fromApply = function(self) {
	return eu_ohmrun_fletcher_ReceiverSink.lift(self);
};
eu_ohmrun_fletcher_ReceiverSink.seq = function(this1,that) {
	return eu_ohmrun_fletcher_ReceiverSink.lift(new eu_ohmrun_fletcher_receiver_$sink_term_Seq(this1,that));
};
eu_ohmrun_fletcher_ReceiverSink.unit = function() {
	return eu_ohmrun_fletcher_ReceiverSink.lift(new eu_ohmrun_fletcher_receiver_$sink_term_Unit());
};
eu_ohmrun_fletcher_ReceiverSink.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ReceiverSink.get_self = function(this1) {
	return eu_ohmrun_fletcher_ReceiverSink.lift(this1);
};
eu_ohmrun_fletcher_ReceiverSink.toApply = function(this1) {
	return stx_pico_Apply._new(this1);
};
var eu_ohmrun_fletcher_Recover = {};
eu_ohmrun_fletcher_Recover._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Recover.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Recover.fromFunErrR = function(fn) {
	var fn1 = fn;
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Recover.toModulate = function(this1) {
	var this2 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(this1,e),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this2;
};
eu_ohmrun_fletcher_Recover.toReform = function(this1) {
	var this2 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			return eu_ohmrun_Fletcher.forward(this1,e).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this2;
};
eu_ohmrun_fletcher_Recover.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Recover.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
var eu_ohmrun_fletcher_RecoverLift = function() { };
$hxClasses["eu.ohmrun.fletcher.RecoverLift"] = eu_ohmrun_fletcher_RecoverLift;
eu_ohmrun_fletcher_RecoverLift.__name__ = "eu.ohmrun.fletcher.RecoverLift";
eu_ohmrun_fletcher_RecoverLift.toReform = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 1:
			var e = p.e;
			var self1 = cont;
			return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,e),function(ok) {
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ok);
			},function(_) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_);
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
eu_ohmrun_fletcher_RecoverLift.toModulate = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 1:
			var e = p.e;
			var self1 = cont;
			return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,e),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
var eu_ohmrun_fletcher_Reform = {};
eu_ohmrun_fletcher_Reform._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Reform.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Reform.toModulate = function(this1) {
	var this2 = eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher.lift(this1),function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	});
	return this2;
};
eu_ohmrun_fletcher_Reform.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Reform.toFletcher = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ReframeLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ReframeLift"] = eu_ohmrun_fletcher_ReframeLift;
eu_ohmrun_fletcher_ReframeLift.__name__ = "eu.ohmrun.fletcher.ReframeLift";
eu_ohmrun_fletcher_ReframeLift.lift = function(wml) {
	var this1 = wml;
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.modulate = function(self,that) {
	var this1 = eu_ohmrun_Fletcher._.then(eu_ohmrun_Fletcher.lift(self),eu_ohmrun_fletcher_Modulate.toFletcher(that));
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.attempt = function(self,that) {
	var fn = function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var t = chk.t;
			var tp = t;
			var self1 = stx_nano_CoupleLift.fst(tp);
			var fn = function(r) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,stx_nano_CoupleLift.snd(tp));
			};
			var self2;
			switch(self1._hx_index) {
			case 0:
				var t = self1.t;
				self2 = stx_nano_ResSum.Accept(fn(t));
				break;
			case 1:
				var e = self1.e;
				self2 = stx_nano_ResSum.Reject(e);
				break;
			}
			var this1 = self2;
			self = this1;
			break;
		case 1:
			var e = chk.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	};
	var this1 = eu_ohmrun_fletcher_Reframe.toModulate(self);
	var this2 = eu_ohmrun_FletcherLift.first(that);
	var arw = eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_Fletcher._.map(eu_ohmrun_fletcher_Modulate._.convert(this1,this2),fn));
	return arw;
};
eu_ohmrun_fletcher_ReframeLift.rearrange = function(self,that) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,ipt),function(res) {
			var that1 = that;
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t)));
				break;
			case 1:
				var e = res.e;
				switch(ipt._hx_index) {
				case 0:
					var t = ipt.t;
					receiver = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e),t));
					break;
				case 1:
					var e = ipt.e;
					receiver = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
					break;
				}
				break;
			}
			return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(that1,receiver),function(res) {
				switch(res._hx_index) {
				case 0:
					var _g = res.t;
					switch(ipt._hx_index) {
					case 0:
						var tt = ipt.t;
						var t = _g;
						return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
					case 1:
						var e = ipt.e;
						return stx_nano_ResSum.Reject(e);
					}
					break;
				case 1:
					var _g = res.e;
					if(ipt._hx_index == 1) {
						var ee = ipt.e;
						var e = _g;
						return stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
					} else {
						var e = _g;
						return stx_nano_ResSum.Reject(e);
					}
					break;
				}
			});
		},function(err) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.arrange = function(self,that) {
	var arw = eu_ohmrun_Fletcher._.map(eu_ohmrun_fletcher_Modulate._.broach(eu_ohmrun_fletcher_ReframeLift.modulate(self,eu_ohmrun_fletcher_Arrange.toModulate(that))),function(res) {
		var fn = function(tp) {
			return stx_nano_CoupleLift.swap(tp);
		};
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	var this1 = arw;
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.arrangement = function(self,that) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,stx_nano_Res.fromOutcome(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(ipt)))),function(tp) {
			var receiver;
			switch(tp._hx_index) {
			case 0:
				var t = tp.t;
				receiver = eu_ohmrun_Fletcher.forward(that(stx_nano_CoupleLift.fst(t)),stx_nano_Res.fromOutcome(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ipt)));
				break;
			case 1:
				var e = tp.e;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				receiver = this1;
				break;
			}
			return receiver;
		},function(e) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.commandeer = function(self,fn) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var fn1 = function(res) {
			var fn;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				fn = stx_nano_Report.unit();
				break;
			case 1:
				var e = res.e;
				fn = stx_nano_Report.pure(e);
				break;
			}
			return fn;
		};
		return eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.then(eu_ohmrun_fletcher_ReframeLift.commandment(self,fn),eu_ohmrun_Fletcher.Anon(function(p,cont) {
			var res = fn1(p);
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var resI = this1;
			var self = cont;
			return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		})),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ipt)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_ReframeLift.commandment = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,ipt),function(res) {
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				var ok = t;
				var cmd = fn(stx_nano_CoupleLift.fst(ok));
				switch(ipt._hx_index) {
				case 0:
					var t = ipt.t;
					var i = t;
					return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(cmd,i),function(report) {
						if(report == null) {
							return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(ok),i));
						} else {
							switch(report._hx_index) {
							case 0:
								var v = report.v;
								return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v);
							case 1:
								return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(ok),i));
							}
						}
					});
				case 1:
					var e = ipt.e;
					var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
					var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
						trg.trigger(value);
						return trg;
					}));
					return this1;
				}
				break;
			case 1:
				var e = res.e;
				var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value1);
					return trg;
				}));
				return this1;
			}
		},function(no) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return this1;
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
};
eu_ohmrun_fletcher_ReframeLift.evaluation = function(self) {
	var this1 = eu_ohmrun_FletcherLift.map(self,function(o) {
		var fn = function(tp) {
			return stx_nano_CoupleLift.fst(tp);
		};
		var self;
		switch(o._hx_index) {
		case 0:
			var t = o.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = o.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.execution = function(self) {
	var this1 = eu_ohmrun_FletcherLift.map(self,function(o) {
		var fn = function(tp) {
			return stx_nano_CoupleLift.snd(tp);
		};
		var self;
		switch(o._hx_index) {
		case 0:
			var t = o.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = o.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	return this1;
};
eu_ohmrun_fletcher_ReframeLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self1 = cont;
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(self,function(o) {
				var self;
				switch(o._hx_index) {
				case 0:
					var t = o.t;
					self = stx_nano_Res.accept(t);
					break;
				case 1:
					var e = o.e;
					self = stx_nano_Res.reject(stx_nano_Rejection.errate(e,fn));
					break;
				}
				var this1 = self;
				return this1;
			}),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t)).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		}
	}));
};
eu_ohmrun_fletcher_ReframeLift.environment = function(self,i,success,failure) {
	var success1 = success;
	var failure1 = failure;
	return eu_ohmrun_Fletcher._.environment(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	});
};
eu_ohmrun_fletcher_ReframeLift.convert = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_fletcher_ReframeLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(eu_ohmrun_fletcher_ConvertLift.first(fn))));
};
var eu_ohmrun_fletcher_Reframe = {};
eu_ohmrun_fletcher_Reframe.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Reframe._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Reframe.lift = function(wml) {
	var this1 = wml;
	return this1;
};
eu_ohmrun_fletcher_Reframe.pure = function(o) {
	var this1 = eu_ohmrun_Fletcher._.map(eu_ohmrun_fletcher_Modulate.unit(),function(oc) {
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = o;
		var fn = function(tII) {
			return _g(tI,tII);
		};
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_ResSum.Accept(fn(t));
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_ResSum.Reject(e);
			break;
		}
		var this1 = self;
		return this1;
	});
	return this1;
};
eu_ohmrun_fletcher_Reframe.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Reframe.toModulate = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Reframe.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
eu_ohmrun_fletcher_Reframe.fromModulate = function(self) {
	var this1 = self;
	return this1;
};
var eu_ohmrun_fletcher_RegulateLift = function() { };
$hxClasses["eu.ohmrun.fletcher.RegulateLift"] = eu_ohmrun_fletcher_RegulateLift;
eu_ohmrun_fletcher_RegulateLift.__name__ = "eu.ohmrun.fletcher.RegulateLift";
var eu_ohmrun_fletcher_Regulate = {};
eu_ohmrun_fletcher_Regulate.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Regulate._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Regulate.lift = function(self) {
	return eu_ohmrun_fletcher_Regulate._new(self);
};
eu_ohmrun_fletcher_Regulate.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Regulate.get_self = function(this1) {
	return eu_ohmrun_fletcher_Regulate.lift(this1);
};
var eu_ohmrun_fletcher_Resolve = {};
eu_ohmrun_fletcher_Resolve.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Resolve._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Resolve.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Resolve.fromResolvePropose = function(self) {
	var this1 = eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(i,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_Resolve.fromFunErrPropose = function(arw) {
	var fn = arw;
	var this1 = eu_ohmrun_Fletcher._.then(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}),eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		return eu_ohmrun_Fletcher.forward(i,null).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	}));
	return this1;
};
eu_ohmrun_fletcher_Resolve.fromErrChunk = function(fn) {
	var fn1 = fn;
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn1(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Resolve.unit = function() {
	var this1 = eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = stx_nano_ChunkSum.Tap;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
eu_ohmrun_fletcher_Resolve.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Resolve.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
eu_ohmrun_fletcher_Resolve.toFletcher = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ResolveLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ResolveLift"] = eu_ohmrun_fletcher_ResolveLift;
eu_ohmrun_fletcher_ResolveLift.__name__ = "eu.ohmrun.fletcher.ResolveLift";
eu_ohmrun_fletcher_ResolveLift.toModulate = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			return eu_ohmrun_fletcher_Receiver.reply(this1);
		case 1:
			var e = i.e;
			var e1 = e;
			var next = eu_ohmrun_Fletcher._.map(self,function(chk) {
				switch(chk._hx_index) {
				case 0:
					var v = chk.v;
					return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v);
				case 1:
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e1);
				case 2:
					var e = chk.err;
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
				}
			});
			var self1 = cont;
			return eu_ohmrun_Fletcher.forward(next,e1).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = self1;
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					oc.handle(function(out) {
						ip.trigger(out);
					});
					var this1 = null;
					return this1;
				})));
			})));
		}
	});
	return this1;
};
var eu_ohmrun_fletcher_SequentArgSum = $hxEnums["eu.ohmrun.fletcher.SequentArgSum"] = { __ename__:"eu.ohmrun.fletcher.SequentArgSum",__constructs__:null
	,SequentArgP: ($_=function(r) { return {_hx_index:0,r:r,__enum__:"eu.ohmrun.fletcher.SequentArgSum",toString:$estr}; },$_._hx_name="SequentArgP",$_.__params__ = ["r"],$_)
};
eu_ohmrun_fletcher_SequentArgSum.__constructs__ = [eu_ohmrun_fletcher_SequentArgSum.SequentArgP];
var eu_ohmrun_fletcher_SequentArg = {};
eu_ohmrun_fletcher_SequentArg.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_SequentArg._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_SequentArg.lift = function(self) {
	return eu_ohmrun_fletcher_SequentArg._new(self);
};
eu_ohmrun_fletcher_SequentArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_SequentArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_SequentArg.lift(this1);
};
eu_ohmrun_fletcher_SequentArg.toFletcher = function(this1) {
	var p = this1.r;
	return eu_ohmrun_Fletcher.pure(stx_nano_Equity.make(p,null,null));
};
var eu_ohmrun_fletcher_SequentLift = function() { };
$hxClasses["eu.ohmrun.fletcher.SequentLift"] = eu_ohmrun_fletcher_SequentLift;
eu_ohmrun_fletcher_SequentLift.__name__ = "eu.ohmrun.fletcher.SequentLift";
eu_ohmrun_fletcher_SequentLift.provide = function(self,v) {
	var this1 = self;
	return eu_ohmrun_fletcher_ConvertLift.provide(this1,v);
};
var eu_ohmrun_fletcher_Sequent = {};
eu_ohmrun_fletcher_Sequent.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_Sequent._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Sequent.lift = function(self) {
	return eu_ohmrun_fletcher_Sequent._new(self);
};
eu_ohmrun_fletcher_Sequent.bump = function(self) {
	return eu_ohmrun_fletcher_Sequent.lift(eu_ohmrun_fletcher_SequentArg.toFletcher(self));
};
eu_ohmrun_fletcher_Sequent.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Sequent.get_self = function(this1) {
	return eu_ohmrun_fletcher_Sequent.lift(this1);
};
var eu_ohmrun_fletcher_Terminal = {};
eu_ohmrun_fletcher_Terminal.unit = function() {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		return fn(new tink_core_FutureTrigger());
	}));
	return this1;
};
eu_ohmrun_fletcher_Terminal.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Terminal._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_Terminal.toSettle = function(this1) {
	return eu_ohmrun_fletcher_core_Settle._new(this1.toCont());
};
eu_ohmrun_fletcher_Terminal.toTerminal = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Terminal.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_TerminalLift = function() { };
$hxClasses["eu.ohmrun.fletcher.TerminalLift"] = eu_ohmrun_fletcher_TerminalLift;
eu_ohmrun_fletcher_TerminalLift.__name__ = "eu.ohmrun.fletcher.TerminalLift";
eu_ohmrun_fletcher_TerminalLift.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_TerminalLift.error = function(self,e) {
	var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
	var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(self),function(trg) {
		trg.trigger(value);
		return trg;
	}));
	return this1;
};
eu_ohmrun_fletcher_TerminalLift.value = function(self,r) {
	var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,r);
	var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(self),function(trg) {
		trg.trigger(value);
		return trg;
	}));
	return this1;
};
eu_ohmrun_fletcher_TerminalLift.issue = function(self,value) {
	var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(self),function(trg) {
		trg.trigger(value);
		return trg;
	}));
	return this1;
};
eu_ohmrun_fletcher_TerminalLift.later = function(self,ft,pos) {
	var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
		var next = new tink_core_FutureTrigger();
		var fst = self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
			ft.handle(function(res) {
				t_ipt.trigger(res);
				next.trigger(res);
			});
			var this1 = null;
			return this1;
		})));
		var snd = r_ipt.apply(next);
		return stx_stream_WorkLift.seq(fst,snd);
	}));
	return this1;
};
eu_ohmrun_fletcher_TerminalLift.tap = function(self,fn) {
	return eu_ohmrun_fletcher_TerminalLift.lift(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(cont) {
		var this1 = self;
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			p.handle(fn);
			return cont(p);
		})));
	})));
};
eu_ohmrun_fletcher_TerminalLift.mod = function(self,g) {
	return eu_ohmrun_fletcher_TerminalLift.lift(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,g)));
};
eu_ohmrun_fletcher_TerminalLift.receive = function(self,receiver) {
	return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
		var this1 = self;
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
			oc.handle(function(out) {
				ip.trigger(out);
			});
			var this1 = null;
			return this1;
		})));
	})));
};
var eu_ohmrun_fletcher_TerminalInput = {};
eu_ohmrun_fletcher_TerminalInput.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_TerminalInput._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_TerminalInput.lift = function(self) {
	return eu_ohmrun_fletcher_TerminalInput._new(self);
};
eu_ohmrun_fletcher_TerminalInput.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_TerminalInput.get_self = function(this1) {
	return eu_ohmrun_fletcher_TerminalInput._new(this1);
};
eu_ohmrun_fletcher_TerminalInput.toReceiverInput = function(this1) {
	return eu_ohmrun_fletcher_ReceiverInput.lift(this1);
};
eu_ohmrun_fletcher_TerminalInput.unit = function() {
	return new tink_core_FutureTrigger();
};
var eu_ohmrun_fletcher_TerminalSink = {};
eu_ohmrun_fletcher_TerminalSink.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_TerminalSink._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_TerminalSink.lift = function(self) {
	return eu_ohmrun_fletcher_TerminalSink._new(self);
};
eu_ohmrun_fletcher_TerminalSink.seq = function(this1,that) {
	return eu_ohmrun_fletcher_TerminalSink._new(function(oc) {
		return stx_stream_WorkLift.seq(this1(oc),that(oc));
	});
};
eu_ohmrun_fletcher_TerminalSink.unit = function() {
	return eu_ohmrun_fletcher_TerminalSink._new(function(x) {
		var this1 = null;
		return this1;
	});
};
eu_ohmrun_fletcher_TerminalSink.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_TerminalSink.get_self = function(this1) {
	return eu_ohmrun_fletcher_TerminalSink._new(this1);
};
eu_ohmrun_fletcher_TerminalSink.reply = function(this1) {
	return this1(new tink_core_FutureTrigger());
};
var eu_ohmrun_fletcher_core_ContApi = function() { };
$hxClasses["eu.ohmrun.fletcher.core.ContApi"] = eu_ohmrun_fletcher_core_ContApi;
eu_ohmrun_fletcher_core_ContApi.__name__ = "eu.ohmrun.fletcher.core.ContApi";
eu_ohmrun_fletcher_core_ContApi.__isInterface__ = true;
eu_ohmrun_fletcher_core_ContApi.prototype = {
	apply: null
	,toCont: null
	,__class__: eu_ohmrun_fletcher_core_ContApi
};
var eu_ohmrun_fletcher_core_ContCls = function() { };
$hxClasses["eu.ohmrun.fletcher.core.ContCls"] = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_ContCls.__name__ = "eu.ohmrun.fletcher.core.ContCls";
eu_ohmrun_fletcher_core_ContCls.__interfaces__ = [eu_ohmrun_fletcher_core_ContApi];
eu_ohmrun_fletcher_core_ContCls.prototype = {
	apply: null
	,toCont: function() {
		var this1 = this;
		return this1;
	}
	,__class__: eu_ohmrun_fletcher_core_ContCls
};
var eu_ohmrun_fletcher_core_ContLift = function() { };
$hxClasses["eu.ohmrun.fletcher.core.ContLift"] = eu_ohmrun_fletcher_core_ContLift;
eu_ohmrun_fletcher_core_ContLift.__name__ = "eu.ohmrun.fletcher.core.ContLift";
eu_ohmrun_fletcher_core_ContLift.map = function(self,fn) {
	var this1 = new eu_ohmrun_fletcher_core_cont_term_AnonMap(self,fn);
	return this1;
};
eu_ohmrun_fletcher_core_ContLift.flat_map = function(self,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonFlatMap(self,fn);
};
eu_ohmrun_fletcher_core_ContLift.zip_with = function(self,that,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonZipWith(self,that,fn);
};
eu_ohmrun_fletcher_core_ContLift.mod = function(self,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,fn);
};
var eu_ohmrun_fletcher_core_Cont = {};
eu_ohmrun_fletcher_core_Cont.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_core_Cont._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_core_Cont.lift = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_core_Cont.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_core_Cont.get_self = function(this1) {
	return eu_ohmrun_fletcher_core_Cont.lift(this1);
};
eu_ohmrun_fletcher_core_Cont.Each = function(self,fn) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonEach(self,fn));
};
eu_ohmrun_fletcher_core_Cont.Mod = function(self,fn) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,fn));
};
eu_ohmrun_fletcher_core_Cont.Anon = function(self) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(self));
};
eu_ohmrun_fletcher_core_Cont.AnonAnon = function(self) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(self));
};
var eu_ohmrun_fletcher_core_Context = {};
eu_ohmrun_fletcher_core_Context.pure = function(environment) {
	return eu_ohmrun_fletcher_core_Context.make(environment);
};
eu_ohmrun_fletcher_core_Context.make = function(environment,on_value,on_error) {
	var result = new eu_ohmrun_fletcher_core_ContextCls(environment);
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,on_value))) {
		result.on_value = on_value;
	}
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,on_error))) {
		result.on_error = on_error;
	}
	return result;
};
eu_ohmrun_fletcher_core_Context.fromInput = function(environment) {
	return eu_ohmrun_fletcher_core_Context.make(environment);
};
eu_ohmrun_fletcher_core_Context.load = function(this1,arrowlet) {
	return new eu_ohmrun_fletcher_Completion(this1,arrowlet);
};
var eu_ohmrun_fletcher_core_ContextCls = function(environment) {
	this.environment = environment;
};
$hxClasses["eu.ohmrun.fletcher.core.ContextCls"] = eu_ohmrun_fletcher_core_ContextCls;
eu_ohmrun_fletcher_core_ContextCls.__name__ = "eu.ohmrun.fletcher.core.ContextCls";
eu_ohmrun_fletcher_core_ContextCls.prototype = {
	environment: null
	,on_error: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,on_value: function(r) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(new stx_log_EntryCtr().pure(r),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/core/ContextCls.hx", lineNumber : 12, className : "eu.ohmrun.fletcher.core.ContextCls", methodName : "on_value"}));
	}
	,__class__: eu_ohmrun_fletcher_core_ContextCls
};
var eu_ohmrun_fletcher_core_SettleLift = function() { };
$hxClasses["eu.ohmrun.fletcher.core.SettleLift"] = eu_ohmrun_fletcher_core_SettleLift;
eu_ohmrun_fletcher_core_SettleLift.__name__ = "eu.ohmrun.fletcher.core.SettleLift";
eu_ohmrun_fletcher_core_SettleLift.lift = function(self) {
	return eu_ohmrun_fletcher_core_Settle._new(self);
};
eu_ohmrun_fletcher_core_SettleLift.map = function(self,fn) {
	return eu_ohmrun_fletcher_core_SettleLift.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMap(eu_ohmrun_fletcher_core_Settle.toCont(self),fn));
};
var eu_ohmrun_fletcher_core_Settle = {};
eu_ohmrun_fletcher_core_Settle.__properties__ = {get_self:"get_self"};
eu_ohmrun_fletcher_core_Settle._new = function(self) {
	var this1 = self;
	return this1;
};
eu_ohmrun_fletcher_core_Settle.lift = function(self) {
	return eu_ohmrun_fletcher_core_Settle._new(self);
};
eu_ohmrun_fletcher_core_Settle.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_core_Settle.get_self = function(this1) {
	return eu_ohmrun_fletcher_core_Settle._new(this1);
};
eu_ohmrun_fletcher_core_Settle.unit = function() {
	return eu_ohmrun_fletcher_core_Settle._new(new eu_ohmrun_fletcher_core_settle_term_Unit());
};
eu_ohmrun_fletcher_core_Settle.pure = function(v) {
	return eu_ohmrun_fletcher_core_Settle._new(new eu_ohmrun_fletcher_core_settle_term_Pure(v));
};
eu_ohmrun_fletcher_core_Settle.toCont = function(this1) {
	return this1.toCont();
};
var eu_ohmrun_fletcher_core_cont_term_Anon = function(_apply) {
	this._apply = _apply;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Anon"] = eu_ohmrun_fletcher_core_cont_term_Anon;
eu_ohmrun_fletcher_core_cont_term_Anon.__name__ = "eu.ohmrun.fletcher.core.cont.term.Anon";
eu_ohmrun_fletcher_core_cont_term_Anon.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_Anon.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	_apply: null
	,apply: function(p) {
		return this._apply(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Anon
});
var eu_ohmrun_fletcher_core_cont_term_AnonAnon = function(_apply) {
	this._apply = _apply;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonAnon"] = eu_ohmrun_fletcher_core_cont_term_AnonAnon;
eu_ohmrun_fletcher_core_cont_term_AnonAnon.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonAnon";
eu_ohmrun_fletcher_core_cont_term_AnonAnon.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_AnonAnon.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	_apply: null
	,apply: function(p) {
		return this._apply($bind(p,p.apply));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonAnon
});
var eu_ohmrun_fletcher_core_cont_term_Delegate = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Delegate"] = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Delegate.__name__ = "eu.ohmrun.fletcher.core.cont.term.Delegate";
eu_ohmrun_fletcher_core_cont_term_Delegate.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_Delegate.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	delegate: null
	,__class__: eu_ohmrun_fletcher_core_cont_term_Delegate
});
var eu_ohmrun_fletcher_core_cont_term_Each = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Each"] = eu_ohmrun_fletcher_core_cont_term_Each;
eu_ohmrun_fletcher_core_cont_term_Each.__name__ = "eu.ohmrun.fletcher.core.cont.term.Each";
eu_ohmrun_fletcher_core_cont_term_Each.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Each.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	each: null
	,apply: function(fn) {
		var _gthis = this;
		return this.delegate.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			_gthis.each(p);
			return fn.apply(p);
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Each
});
var eu_ohmrun_fletcher_core_cont_term_AnonEach = function(delegate,_each) {
	eu_ohmrun_fletcher_core_cont_term_Each.call(this,delegate);
	this._each = _each;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonEach"] = eu_ohmrun_fletcher_core_cont_term_AnonEach;
eu_ohmrun_fletcher_core_cont_term_AnonEach.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonEach";
eu_ohmrun_fletcher_core_cont_term_AnonEach.__super__ = eu_ohmrun_fletcher_core_cont_term_Each;
eu_ohmrun_fletcher_core_cont_term_AnonEach.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Each.prototype,{
	_each: null
	,each: function(p) {
		this._each(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonEach
});
var eu_ohmrun_fletcher_core_cont_term_FlatMap = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.FlatMap"] = eu_ohmrun_fletcher_core_cont_term_FlatMap;
eu_ohmrun_fletcher_core_cont_term_FlatMap.__name__ = "eu.ohmrun.fletcher.core.cont.term.FlatMap";
eu_ohmrun_fletcher_core_cont_term_FlatMap.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_FlatMap.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	flat_map: null
	,apply: function(fn) {
		var _gthis = this;
		return this.delegate.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return _gthis.flat_map(p).apply(fn);
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_FlatMap
});
var eu_ohmrun_fletcher_core_cont_term_AnonFlatMap = function(delegate,_flat_map) {
	eu_ohmrun_fletcher_core_cont_term_FlatMap.call(this,delegate);
	this._flat_map = _flat_map;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonFlatMap"] = eu_ohmrun_fletcher_core_cont_term_AnonFlatMap;
eu_ohmrun_fletcher_core_cont_term_AnonFlatMap.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonFlatMap";
eu_ohmrun_fletcher_core_cont_term_AnonFlatMap.__super__ = eu_ohmrun_fletcher_core_cont_term_FlatMap;
eu_ohmrun_fletcher_core_cont_term_AnonFlatMap.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_FlatMap.prototype,{
	_flat_map: null
	,flat_map: function(p) {
		return this._flat_map(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonFlatMap
});
var eu_ohmrun_fletcher_core_cont_term_Map = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Map"] = eu_ohmrun_fletcher_core_cont_term_Map;
eu_ohmrun_fletcher_core_cont_term_Map.__name__ = "eu.ohmrun.fletcher.core.cont.term.Map";
eu_ohmrun_fletcher_core_cont_term_Map.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Map.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	map: null
	,apply: function(fn) {
		var _gthis = this;
		return this.delegate.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return fn.apply(_gthis.map(p));
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Map
});
var eu_ohmrun_fletcher_core_cont_term_AnonMap = function(delegate,_map) {
	eu_ohmrun_fletcher_core_cont_term_Map.call(this,delegate);
	this._map = _map;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonMap"] = eu_ohmrun_fletcher_core_cont_term_AnonMap;
eu_ohmrun_fletcher_core_cont_term_AnonMap.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonMap";
eu_ohmrun_fletcher_core_cont_term_AnonMap.__super__ = eu_ohmrun_fletcher_core_cont_term_Map;
eu_ohmrun_fletcher_core_cont_term_AnonMap.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Map.prototype,{
	_map: null
	,map: function(p) {
		return this._map(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonMap
});
var eu_ohmrun_fletcher_core_cont_term_Mod = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Mod"] = eu_ohmrun_fletcher_core_cont_term_Mod;
eu_ohmrun_fletcher_core_cont_term_Mod.__name__ = "eu.ohmrun.fletcher.core.cont.term.Mod";
eu_ohmrun_fletcher_core_cont_term_Mod.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Mod.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	mod: null
	,apply: function(fn) {
		return this.mod(this.delegate.apply(fn));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Mod
});
var eu_ohmrun_fletcher_core_cont_term_AnonMod = function(delegate,_mod) {
	eu_ohmrun_fletcher_core_cont_term_Mod.call(this,delegate);
	this._mod = _mod;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonMod"] = eu_ohmrun_fletcher_core_cont_term_AnonMod;
eu_ohmrun_fletcher_core_cont_term_AnonMod.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonMod";
eu_ohmrun_fletcher_core_cont_term_AnonMod.__super__ = eu_ohmrun_fletcher_core_cont_term_Mod;
eu_ohmrun_fletcher_core_cont_term_AnonMod.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Mod.prototype,{
	_mod: null
	,mod: function(r) {
		return this._mod(r);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonMod
});
var eu_ohmrun_fletcher_core_cont_term_ZipWith = function(lhs,rhs) {
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.ZipWith"] = eu_ohmrun_fletcher_core_cont_term_ZipWith;
eu_ohmrun_fletcher_core_cont_term_ZipWith.__name__ = "eu.ohmrun.fletcher.core.cont.term.ZipWith";
eu_ohmrun_fletcher_core_cont_term_ZipWith.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_ZipWith.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	lhs: null
	,rhs: null
	,zip: null
	,apply: function(fn) {
		var _gthis = this;
		return this.lhs.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return _gthis.rhs.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(pI) {
				return fn.apply(_gthis.zip(p,pI));
			})));
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_ZipWith
});
var eu_ohmrun_fletcher_core_cont_term_AnonZipWith = function(lhs,rhs,_zip) {
	eu_ohmrun_fletcher_core_cont_term_ZipWith.call(this,lhs,rhs);
	this._zip = _zip;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonZipWith"] = eu_ohmrun_fletcher_core_cont_term_AnonZipWith;
eu_ohmrun_fletcher_core_cont_term_AnonZipWith.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonZipWith";
eu_ohmrun_fletcher_core_cont_term_AnonZipWith.__super__ = eu_ohmrun_fletcher_core_cont_term_ZipWith;
eu_ohmrun_fletcher_core_cont_term_AnonZipWith.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_ZipWith.prototype,{
	_zip: null
	,zip: function(l,r) {
		return this._zip(l,r);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonZipWith
});
var eu_ohmrun_fletcher_core_settle_term_Pure = function(value) {
	this.value = value;
};
$hxClasses["eu.ohmrun.fletcher.core.settle.term.Pure"] = eu_ohmrun_fletcher_core_settle_term_Pure;
eu_ohmrun_fletcher_core_settle_term_Pure.__name__ = "eu.ohmrun.fletcher.core.settle.term.Pure";
eu_ohmrun_fletcher_core_settle_term_Pure.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_settle_term_Pure.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	value: null
	,apply: function(fn) {
		return fn.apply(this.value);
	}
	,__class__: eu_ohmrun_fletcher_core_settle_term_Pure
});
var eu_ohmrun_fletcher_core_settle_term_Unit = function() {
};
$hxClasses["eu.ohmrun.fletcher.core.settle.term.Unit"] = eu_ohmrun_fletcher_core_settle_term_Unit;
eu_ohmrun_fletcher_core_settle_term_Unit.__name__ = "eu.ohmrun.fletcher.core.settle.term.Unit";
eu_ohmrun_fletcher_core_settle_term_Unit.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_settle_term_Unit.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	apply: function(fn) {
		var this1 = null;
		return this1;
	}
	,__class__: eu_ohmrun_fletcher_core_settle_term_Unit
});
var eu_ohmrun_fletcher_receiver_term_Delegate = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["eu.ohmrun.fletcher.receiver.term.Delegate"] = eu_ohmrun_fletcher_receiver_term_Delegate;
eu_ohmrun_fletcher_receiver_term_Delegate.__name__ = "eu.ohmrun.fletcher.receiver.term.Delegate";
eu_ohmrun_fletcher_receiver_term_Delegate.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_receiver_term_Delegate.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	delegate: null
	,__class__: eu_ohmrun_fletcher_receiver_term_Delegate
});
var eu_ohmrun_fletcher_receiver_term_Thunk = function(delegate) {
	eu_ohmrun_fletcher_receiver_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.receiver.term.Thunk"] = eu_ohmrun_fletcher_receiver_term_Thunk;
eu_ohmrun_fletcher_receiver_term_Thunk.__name__ = "eu.ohmrun.fletcher.receiver.term.Thunk";
eu_ohmrun_fletcher_receiver_term_Thunk.__super__ = eu_ohmrun_fletcher_receiver_term_Delegate;
eu_ohmrun_fletcher_receiver_term_Thunk.prototype = $extend(eu_ohmrun_fletcher_receiver_term_Delegate.prototype,{
	apply: function(fn) {
		return this.delegate().apply(fn);
	}
	,__class__: eu_ohmrun_fletcher_receiver_term_Thunk
});
var stx_pico_ApplyApi = function() { };
$hxClasses["stx.pico.ApplyApi"] = stx_pico_ApplyApi;
stx_pico_ApplyApi.__name__ = "stx.pico.ApplyApi";
stx_pico_ApplyApi.__isInterface__ = true;
stx_pico_ApplyApi.prototype = {
	apply: null
	,toApply: null
	,__class__: stx_pico_ApplyApi
};
var stx_pico_ApplyCls = function() { };
$hxClasses["stx.pico.ApplyCls"] = stx_pico_ApplyCls;
stx_pico_ApplyCls.__name__ = "stx.pico.ApplyCls";
stx_pico_ApplyCls.__interfaces__ = [stx_pico_ApplyApi];
stx_pico_ApplyCls.prototype = {
	apply: null
	,toApply: function() {
		return this;
	}
	,__class__: stx_pico_ApplyCls
};
var eu_ohmrun_fletcher_receiver_$sink_term_Seq = function(lhs,rhs) {
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["eu.ohmrun.fletcher.receiver_sink.term.Seq"] = eu_ohmrun_fletcher_receiver_$sink_term_Seq;
eu_ohmrun_fletcher_receiver_$sink_term_Seq.__name__ = "eu.ohmrun.fletcher.receiver_sink.term.Seq";
eu_ohmrun_fletcher_receiver_$sink_term_Seq.__super__ = stx_pico_ApplyCls;
eu_ohmrun_fletcher_receiver_$sink_term_Seq.prototype = $extend(stx_pico_ApplyCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(p) {
		return stx_stream_WorkLift.seq(this.lhs.apply(p),this.rhs.apply(p));
	}
	,__class__: eu_ohmrun_fletcher_receiver_$sink_term_Seq
});
var eu_ohmrun_fletcher_receiver_$sink_term_Unit = function() {
};
$hxClasses["eu.ohmrun.fletcher.receiver_sink.term.Unit"] = eu_ohmrun_fletcher_receiver_$sink_term_Unit;
eu_ohmrun_fletcher_receiver_$sink_term_Unit.__name__ = "eu.ohmrun.fletcher.receiver_sink.term.Unit";
eu_ohmrun_fletcher_receiver_$sink_term_Unit.__super__ = stx_pico_ApplyCls;
eu_ohmrun_fletcher_receiver_$sink_term_Unit.prototype = $extend(stx_pico_ApplyCls.prototype,{
	apply: function(p) {
		var this1 = null;
		return this1;
	}
	,__class__: eu_ohmrun_fletcher_receiver_$sink_term_Unit
});
var eu_ohmrun_fletcher_term_Anon = function(_defer) {
	eu_ohmrun_FletcherCls.call(this);
	this._defer = _defer;
};
$hxClasses["eu.ohmrun.fletcher.term.Anon"] = eu_ohmrun_fletcher_term_Anon;
eu_ohmrun_fletcher_term_Anon.__name__ = "eu.ohmrun.fletcher.term.Anon";
eu_ohmrun_fletcher_term_Anon.__interfaces__ = [eu_ohmrun_FletcherApi];
eu_ohmrun_fletcher_term_Anon.__super__ = eu_ohmrun_FletcherCls;
eu_ohmrun_fletcher_term_Anon.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	_defer: null
	,defer: function(p,cont) {
		return this._defer(p,cont);
	}
	,__class__: eu_ohmrun_fletcher_term_Anon
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,keys: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.runInMainThread = function(f) {
	haxe_EntryPoint.pending.push(f);
};
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.toString();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Int64 = {};
haxe_Int64.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,10);
	var ten = this1;
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(i.high != b_high || i.low != b_low)) {
			break;
		}
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
			i = this1;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this1;
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		divisor = this1;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this1;
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this3;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this4;
		} else if(b1 < 32) {
			var this5 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this5;
		} else {
			var this6 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this6;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this1;
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			var this2 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this2;
		}
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this3 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this3;
		} else if(b < 32) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b);
			mask = this4;
		} else {
			var this5 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
			mask = this5;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this6 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this6;
		} else if(b1 < 32) {
			var this7 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1);
			divisor = this7;
		} else {
			var this8 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
			divisor = this8;
		}
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		quotient = this1;
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	f: null
	,prev: null
	,next: null
	,isBlocking: null
	,nextRun: null
	,priority: null
	,delay: function(t) {
		this.nextRun = t == null ? -Infinity : HxOverrides.now() / 1000 + t;
	}
	,stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.pending = null;
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.runInMainThread = function(f) {
	haxe_EntryPoint.runInMainThread(f);
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	haxe_MainLoop.injectIntoEventLoop(0);
	return e;
};
haxe_MainLoop.injectIntoEventLoop = function(waitMs) {
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.content = null;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.make = function(b) {
	var a = new haxe_crypto_Adler32();
	a.update(b,0,b.length);
	return a.get();
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,get: function() {
		return this.a2 << 16 | this.a1;
	}
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:"haxe.ds.Either",__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:"haxe.ds.Option",__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_ArrayKeyValueIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
haxe_iterators_ArrayKeyValueIterator.prototype = {
	current: null
	,array: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return { value : this.array[this.current], key : this.current++};
	}
	,__class__: haxe_iterators_ArrayKeyValueIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_rtti_CType = $hxEnums["haxe.rtti.CType"] = { __ename__:"haxe.rtti.CType",__constructs__:null
	,CUnknown: {_hx_name:"CUnknown",_hx_index:0,__enum__:"haxe.rtti.CType",toString:$estr}
	,CEnum: ($_=function(name,params) { return {_hx_index:1,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CEnum",$_.__params__ = ["name","params"],$_)
	,CClass: ($_=function(name,params) { return {_hx_index:2,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CClass",$_.__params__ = ["name","params"],$_)
	,CTypedef: ($_=function(name,params) { return {_hx_index:3,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CTypedef",$_.__params__ = ["name","params"],$_)
	,CFunction: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CFunction",$_.__params__ = ["args","ret"],$_)
	,CAnonymous: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAnonymous",$_.__params__ = ["fields"],$_)
	,CDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CDynamic",$_.__params__ = ["t"],$_)
	,CAbstract: ($_=function(name,params) { return {_hx_index:7,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAbstract",$_.__params__ = ["name","params"],$_)
};
haxe_rtti_CType.__constructs__ = [haxe_rtti_CType.CUnknown,haxe_rtti_CType.CEnum,haxe_rtti_CType.CClass,haxe_rtti_CType.CTypedef,haxe_rtti_CType.CFunction,haxe_rtti_CType.CAnonymous,haxe_rtti_CType.CDynamic,haxe_rtti_CType.CAbstract];
var haxe_rtti_Rights = $hxEnums["haxe.rtti.Rights"] = { __ename__:"haxe.rtti.Rights",__constructs__:null
	,RNormal: {_hx_name:"RNormal",_hx_index:0,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RNo: {_hx_name:"RNo",_hx_index:1,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RCall: ($_=function(m) { return {_hx_index:2,m:m,__enum__:"haxe.rtti.Rights",toString:$estr}; },$_._hx_name="RCall",$_.__params__ = ["m"],$_)
	,RMethod: {_hx_name:"RMethod",_hx_index:3,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RDynamic: {_hx_name:"RDynamic",_hx_index:4,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RInline: {_hx_name:"RInline",_hx_index:5,__enum__:"haxe.rtti.Rights",toString:$estr}
};
haxe_rtti_Rights.__constructs__ = [haxe_rtti_Rights.RNormal,haxe_rtti_Rights.RNo,haxe_rtti_Rights.RCall,haxe_rtti_Rights.RMethod,haxe_rtti_Rights.RDynamic,haxe_rtti_Rights.RInline];
var haxe_rtti_TypeTree = $hxEnums["haxe.rtti.TypeTree"] = { __ename__:"haxe.rtti.TypeTree",__constructs__:null
	,TPackage: ($_=function(name,full,subs) { return {_hx_index:0,name:name,full:full,subs:subs,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TPackage",$_.__params__ = ["name","full","subs"],$_)
	,TClassdecl: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TClassdecl",$_.__params__ = ["c"],$_)
	,TEnumdecl: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TEnumdecl",$_.__params__ = ["e"],$_)
	,TTypedecl: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TTypedecl",$_.__params__ = ["t"],$_)
	,TAbstractdecl: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TAbstractdecl",$_.__params__ = ["a"],$_)
};
haxe_rtti_TypeTree.__constructs__ = [haxe_rtti_TypeTree.TPackage,haxe_rtti_TypeTree.TClassdecl,haxe_rtti_TypeTree.TEnumdecl,haxe_rtti_TypeTree.TTypedecl,haxe_rtti_TypeTree.TAbstractdecl];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_rtti_Rtti = function() { };
$hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
haxe_rtti_Rtti.__name__ = "haxe.rtti.Rtti";
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) {
		throw haxe_Exception.thrown("Class " + c.__name__ + " has no RTTI information, consider adding @:rtti");
	}
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	if(infos._hx_index == 1) {
		var c = infos.c;
		return c;
	} else {
		var t = infos;
		throw haxe_Exception.thrown("Enum mismatch: expected TClassDecl but found " + Std.string(t));
	}
};
haxe_rtti_Rtti.hasRtti = function(c) {
	return Lambda.has(Type.getClassFields(c),"__rtti");
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
$hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
haxe_rtti_XmlParser.__name__ = "haxe.rtti.XmlParser";
haxe_rtti_XmlParser.prototype = {
	root: null
	,curplatform: null
	,mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") {
			return [];
		}
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "null":
			return haxe_rtti_Rights.RNo;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		var tmp;
		if(c.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			tmp = c.nodeName;
		}
		throw haxe_Exception.thrown("Invalid " + tmp);
	}
	,processElement: function(x) {
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var this1 = x;
		var c = this1;
		var _g;
		if(c.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			_g = c.nodeName;
		}
		switch(_g) {
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(x,"m");
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(m,"e");
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				pl.push(haxe_xml_Access.get_innerHTML(p));
			}
			ml.push({ name : haxe_xml__$Access_AttribAccess.resolve(m,"n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = [];
		var m = x.elements();
		while(m.hasNext()) {
			var m1 = m.next();
			l.push(this.xclassfield(m1));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path"));
		var params = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			params.push(this.xtype(c1));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = [];
		var fields = [];
		var statics = [];
		var meta = [];
		var isInterface = x.exists("interface");
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "extends":
				if(isInterface) {
					interfaces.push(this.xpath(c1));
				} else {
					csuper = this.xpath(c1);
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "haxe_dynamic":
				var x1 = c1.firstElement();
				if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
				}
				var this1 = x1;
				tdynamic = this.xtype(this1);
				break;
			case "implements":
				interfaces.push(this.xpath(c1));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			default:
				if(c1.exists("static")) {
					statics.push(this.xclassfield(c1));
				} else {
					fields.push(this.xclassfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), isFinal : x.exists("final"), isInterface : isInterface, params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) {
			defPublic = false;
		}
		var e = x.elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		var c = e;
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "overloads":
				overloads = this.xoverloads(c1);
				break;
			default:
				this.xerror(c1);
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		return { name : tmp, type : t, isPublic : x.exists("public") || defPublic, isFinal : x.exists("final"), isOverride : x.exists("override"), line : haxe_xml__$Access_HasAttribAccess.resolve(x,"line") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(x,"line")) : null, doc : doc, get : haxe_xml__$Access_HasAttribAccess.resolve(x,"get") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"get")) : haxe_rtti_Rights.RNormal, set : haxe_xml__$Access_HasAttribAccess.resolve(x,"set") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"set")) : haxe_rtti_Rights.RNormal, params : haxe_xml__$Access_HasAttribAccess.resolve(x,"params") ? this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")) : [], platforms : this.defplat(), meta : meta, overloads : overloads, expr : haxe_xml__$Access_HasAttribAccess.resolve(x,"expr") ? haxe_xml__$Access_AttribAccess.resolve(x,"expr") : null};
	}
	,xenum: function(x) {
		var cl = [];
		var doc = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					cl.push(this.xenumfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var docElements = x.elementsNamed("haxe_doc");
		var xdoc = docElements.hasNext() ? docElements.next() : null;
		var meta = haxe_xml__$Access_HasNodeAccess.resolve(x,"meta") ? this.xmeta(haxe_xml__$Access_NodeAccess.resolve(x,"meta")) : [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(x,"a")) {
			var names = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var elts = x.elements();
			args = [];
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.push({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		var tmp1;
		if(xdoc == null) {
			tmp1 = null;
		} else {
			if(xdoc.nodeType != Xml.Document && xdoc.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (xdoc.nodeType == null ? "null" : XmlType.toString(xdoc.nodeType)));
			}
			var this1 = xdoc;
			tmp1 = haxe_xml_Access.get_innerData(this1);
		}
		return { name : tmp, args : args, doc : tmp1, meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "from":
				var t = c1.elements();
				while(t.hasNext()) {
					var t1 = t.next();
					var x1 = t1.firstElement();
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
					}
					var this1 = x1;
					from.push({ t : this.xtype(this1), field : haxe_xml__$Access_HasAttribAccess.resolve(t1,"field") ? haxe_xml__$Access_AttribAccess.resolve(t1,"field") : null});
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "impl":
				impl = this.xclass(haxe_xml__$Access_NodeAccess.resolve(c1,"class"));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "this":
				var x2 = c1.firstElement();
				if(x2.nodeType != Xml.Document && x2.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x2.nodeType == null ? "null" : XmlType.toString(x2.nodeType)));
				}
				var this2 = x2;
				athis = this.xtype(this2);
				break;
			case "to":
				var t2 = c1.elements();
				while(t2.hasNext()) {
					var t3 = t2.next();
					var x3 = t3.firstElement();
					if(x3.nodeType != Xml.Document && x3.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x3.nodeType == null ? "null" : XmlType.toString(x3.nodeType)));
					}
					var this3 = x3;
					to.push({ t : this.xtype(this3), field : haxe_xml__$Access_HasAttribAccess.resolve(t3,"field") ? haxe_xml__$Access_AttribAccess.resolve(t3,"field") : null});
				}
				break;
			default:
				this.xerror(c1);
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					t = this.xtype(c1);
				}
			}
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) {
			types.h[this.curplatform] = t;
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g;
		if(x.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			_g = x.nodeName;
		}
		switch(_g) {
		case "a":
			var fields = [];
			var f = x.elements();
			while(f.hasNext()) {
				var f1 = f.next();
				var f2 = this.xclassfield(f1,true);
				f2.platforms = [];
				fields.push(f2);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "d":
			var t = null;
			var tx = x.firstElement();
			if(tx != null) {
				if(tx.nodeType != Xml.Document && tx.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (tx.nodeType == null ? "null" : XmlType.toString(tx.nodeType)));
				}
				var this1 = tx;
				t = this.xtype(this1);
			}
			return haxe_rtti_CType.CDynamic(t);
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "f":
			var args = [];
			var aname = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var eargs_current = 0;
			var eargs_array = aname;
			var evalues = haxe_xml__$Access_HasAttribAccess.resolve(x,"v") ? new haxe_iterators_ArrayIterator(haxe_xml__$Access_AttribAccess.resolve(x,"v").split(":")) : null;
			var e = x.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var opt = false;
				var a = eargs_current < eargs_array.length ? eargs_array[eargs_current++] : null;
				if(a == null) {
					a = "";
				}
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v = evalues == null || evalues.current >= evalues.array.length ? null : evalues.array[evalues.current++];
				args.push({ name : a, opt : opt, t : this.xtype(e1), value : v == "" ? null : v});
			}
			var ret = args[args.length - 1];
			HxOverrides.remove(args,ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			p.push(this.xtype(c1));
		}
		return p;
	}
	,defplat: function() {
		var l = [];
		if(this.curplatform != null) {
			l.push(this.curplatform);
		}
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_unit_TestCase = function() {
};
$hxClasses["haxe.unit.TestCase"] = haxe_unit_TestCase;
haxe_unit_TestCase.__name__ = "haxe.unit.TestCase";
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new haxe_ds_List();
	this.success = true;
};
$hxClasses["haxe.unit.TestResult"] = haxe_unit_TestResult;
haxe_unit_TestResult.__name__ = "haxe.unit.TestResult";
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var test = val;
			if(test.success == false) {
				buf_b += "* ";
				buf_b += Std.string(test.classname);
				buf_b += "::";
				buf_b += Std.string(test.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(test.posInfos != null) {
					buf_b += Std.string(test.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(test.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(test.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(test.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(test.error);
				buf_b += "\n";
				if(test.backtrace != null) {
					buf_b += Std.string(test.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new haxe_ds_List();
};
$hxClasses["haxe.unit.TestRunner"] = haxe_unit_TestRunner;
haxe_unit_TestRunner.__name__ = "haxe.unit.TestRunner";
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			this.runCase(c);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + cl.__name__ + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var fname = f;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = cl.__name__;
				t.currentTest.method = fname;
				t.setup();
				try {
					field.apply(t,[]);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( _g1 ) {
					haxe_NativeStackTrace.lastError = _g1;
					var _g2 = haxe_Exception.caught(_g1).unwrap();
					if(((_g2) instanceof haxe_unit_TestStatus)) {
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
						var e = _g2;
						haxe_unit_TestRunner.print("E");
						if(e.message != null) {
							t.currentTest.error = "exception thrown : " + Std.string(e) + " [" + Std.string(e.message) + "]";
						} else {
							t.currentTest.error = "exception thrown : " + Std.string(e);
						}
						var tmp1 = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
$hxClasses["haxe.unit.TestStatus"] = haxe_unit_TestStatus;
haxe_unit_TestStatus.__name__ = "haxe.unit.TestStatus";
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		var this1 = x1;
		l.push(this1);
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.__properties__ = {get_innerHTML:"get_innerHTML",get_innerData:"get_innerData"};
haxe_xml_Access.get_innerData = function(this1) {
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var it_current = 0;
	var it_array = this1.children;
	if(it_current >= it_array.length) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	var v = it_array[it_current++];
	if(it_current < it_array.length) {
		var n = it_array[it_current++];
		var tmp;
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
			if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
			}
			tmp = StringTools.trim(v.nodeValue) == "";
		} else {
			tmp = false;
		}
		if(tmp) {
			if(it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
			var n2 = it_array[it_current++];
			var tmp;
			if(n2.nodeType == Xml.PCData) {
				if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n2.nodeType == null ? "null" : XmlType.toString(n2.nodeType)));
				}
				tmp = StringTools.trim(n2.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp && it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
		}
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
	}
	return v.nodeValue;
};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hre_HreError = function(message) {
	this.message = message;
};
$hxClasses["hre.HreError"] = hre_HreError;
hre_HreError.__name__ = "hre.HreError";
hre_HreError.prototype = {
	message: null
	,__class__: hre_HreError
};
var hre_Match = function(input,index,groups) {
	this.input = input;
	this.index = index;
	this.groups = groups;
};
$hxClasses["hre.Match"] = hre_Match;
hre_Match.__name__ = "hre.Match";
hre_Match.prototype = {
	input: null
	,index: null
	,groups: null
	,equals: function(other) {
		if(other == null || this.input != other.input || this.index != other.index) {
			return false;
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.groups[i] != other.groups[i]) {
				return false;
			}
		}
		return true;
	}
	,toString: function() {
		return "Match(input=\"" + this.input + "\", index=" + this.index + ", groups=[" + this.groups.join(", ") + "])";
	}
	,__class__: hre_Match
};
var hre_RegExp = function(pattern,flags) {
	this.length = 2;
	this.pattern = hre_RegExpParser.parse(pattern);
	var global1 = false;
	var ignoreCase = false;
	var multiline = false;
	var sticky = false;
	if(flags != null) {
		var _g = 0;
		var _g1 = flags.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = HxOverrides.cca(flags,i);
			if(charCode == hre_RegExp.LATIN_SMALL_LETTER_G) {
				global1 = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_I) {
				ignoreCase = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_M) {
				multiline = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_U) {
				haxe_Log.trace("Unicode flag is always enabled, no need to provide it",{ fileName : "hre/RegExp.hx", lineNumber : 49, className : "hre.RegExp", methodName : "new"});
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_Y) {
				sticky = true;
			} else {
				throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid flags",0,pattern));
			}
		}
	}
	this.flags = new hre_RegExpFlags(global1,ignoreCase,multiline,sticky);
	this.lastIndex = 0;
};
$hxClasses["hre.RegExp"] = hre_RegExp;
hre_RegExp.__name__ = "hre.RegExp";
hre_RegExp.prototype = {
	length: null
	,lastIndex: null
	,pattern: null
	,flags: null
	,exec: function(input) {
		var matcher = hre_RegExpMatcher.evaluatePattern(this.pattern,this.flags);
		var currentIndex = this.flags.global || this.flags.sticky ? this.lastIndex : 0;
		var successfulMatch = null;
		_hx_loop1: while(true) {
			if(currentIndex > input.length) {
				this.lastIndex = 0;
				return null;
			}
			var _g = matcher(input,currentIndex);
			switch(_g._hx_index) {
			case 0:
				if(this.flags.sticky) {
					this.lastIndex = 0;
					return null;
				}
				++currentIndex;
				continue;
			case 1:
				var state = _g.matcherState;
				successfulMatch = state;
				break _hx_loop1;
			}
		}
		if(this.flags.global || this.flags.sticky) {
			this.lastIndex = successfulMatch.index;
		}
		var matchedSubstring = input.substring(currentIndex,successfulMatch.index);
		var groups = [matchedSubstring];
		var _g = 0;
		var _g1 = successfulMatch.captures;
		while(_g < _g1.length) {
			var captured = _g1[_g];
			++_g;
			groups.push(captured);
		}
		return new hre_Match(input,currentIndex,groups);
	}
	,test: function(input) {
		return this.exec(input) != null;
	}
	,__class__: hre_RegExp
};
var hre_RegExpFlags = function(global1,ignoreCase,multiline,sticky) {
	this.global = global1;
	this.ignoreCase = ignoreCase;
	this.multiline = multiline;
	this.unicode = true;
	this.sticky = sticky;
};
$hxClasses["hre.RegExpFlags"] = hre_RegExpFlags;
hre_RegExpFlags.__name__ = "hre.RegExpFlags";
hre_RegExpFlags.prototype = {
	global: null
	,ignoreCase: null
	,multiline: null
	,unicode: null
	,sticky: null
	,__class__: hre_RegExpFlags
};
var hre_MatcherResult = $hxEnums["hre.MatcherResult"] = { __ename__:"hre.MatcherResult",__constructs__:null
	,Failure: {_hx_name:"Failure",_hx_index:0,__enum__:"hre.MatcherResult",toString:$estr}
	,Success: ($_=function(matcherState) { return {_hx_index:1,matcherState:matcherState,__enum__:"hre.MatcherResult",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["matcherState"],$_)
};
hre_MatcherResult.__constructs__ = [hre_MatcherResult.Failure,hre_MatcherResult.Success];
var hre_MatcherState = function() {
};
$hxClasses["hre.MatcherState"] = hre_MatcherState;
hre_MatcherState.__name__ = "hre.MatcherState";
hre_MatcherState.prototype = {
	index: null
	,length: null
	,ignoreCase: null
	,multiline: null
	,unicode: null
	,list: null
	,captures: null
	,copy: function() {
		var result = new hre_MatcherState();
		result.index = this.index;
		result.length = this.length;
		result.ignoreCase = this.ignoreCase;
		result.multiline = this.multiline;
		result.unicode = this.unicode;
		result.list = this.list.slice();
		result.captures = this.captures.slice();
		return result;
	}
	,__class__: hre_MatcherState
};
var hre_RegExpMatcher = function() {
};
$hxClasses["hre.RegExpMatcher"] = hre_RegExpMatcher;
hre_RegExpMatcher.__name__ = "hre.RegExpMatcher";
hre_RegExpMatcher.evaluatePattern = function(pattern,flags) {
	return function(source,index) {
		if(index > source.length) {
			throw haxe_Exception.thrown(new hre_HreError("Assertion `index <= source.length` failed"));
		}
		var state = new hre_MatcherState();
		state.length = source.length;
		state.list = [];
		var _g = 0;
		var _g1 = source.length;
		while(_g < _g1) {
			var i = _g++;
			state.list.push(HxOverrides.cca(source,i));
		}
		state.index = index;
		state.multiline = flags.multiline;
		state.ignoreCase = flags.ignoreCase;
		state.unicode = flags.unicode;
		state.captures = [];
		var _g = 0;
		var _g1 = pattern.captures;
		while(_g < _g1) {
			var _ = _g++;
			state.captures.push(null);
		}
		var m = hre_RegExpMatcher.evaluateDisjunction(pattern);
		var continuation = function(state) {
			return hre_MatcherResult.Success(state);
		};
		return m(state,continuation);
	};
};
hre_RegExpMatcher.evaluateDisjunction = function(disjunction) {
	var _this = disjunction.alternatives;
	var f = hre_RegExpMatcher.evaluateAlternative;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	var alternativeMatchers = result;
	return function(state,continuation) {
		if(alternativeMatchers.length == 0) {
			return continuation(state);
		}
		var _g = 0;
		while(_g < alternativeMatchers.length) {
			var matcher = alternativeMatchers[_g];
			++_g;
			var r = matcher(state,continuation);
			if(r._hx_index == 0) {
				continue;
			} else {
				return r;
			}
		}
		return hre_MatcherResult.Failure;
	};
};
hre_RegExpMatcher.evaluateAlternative = function(alternative) {
	return function(state,continuation) {
		var c = continuation;
		var idx = alternative.terms.length;
		while(idx > 0) {
			--idx;
			var m = [hre_RegExpMatcher.evaluateTerm(alternative.terms[idx])];
			var nextContinuation = [c];
			c = (function(nextContinuation,m) {
				return function(s) {
					return m[0](s,nextContinuation[0]);
				};
			})(nextContinuation,m);
		}
		return c(state);
	};
};
hre_RegExpMatcher.evaluateTerm = function(term) {
	switch(term._hx_index) {
	case 0:
		var assertion = term.assertion;
		return function(state,continuation) {
			if(term == null) {
				return hre_MatcherResult.Failure;
			}
			var _g = hre_RegExpMatcher.evaluateAssertion(assertion);
			switch(_g._hx_index) {
			case 0:
				var assertionTester = _g.v;
				if(assertionTester(state)) {
					return continuation(state);
				} else {
					return hre_MatcherResult.Failure;
				}
				break;
			case 1:
				var matcher = _g.v;
				return matcher(state,continuation);
			}
		};
	case 1:
		var atom = term.atom;
		return hre_RegExpMatcher.evaluateAtom(atom);
	case 2:
		var atom = term.atom;
		var quantifier = term.quantifier;
		var captureStart = term.capturesStartIndex;
		var captureEnd = term.capturesEndIndex;
		return hre_RegExpMatcher.evaluateQuantifiedAtom(atom,quantifier,captureStart,captureEnd);
	}
};
hre_RegExpMatcher.evaluateAssertion = function(assertion) {
	switch(assertion._hx_index) {
	case 0:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			if(e == 0) {
				return true;
			}
			if(!state.multiline) {
				return false;
			}
			if(hre_RegExpMatcher.isLineTerminator(state.list[e - 1])) {
				return true;
			}
			return false;
		});
	case 1:
		return haxe_ds_Either.Left(function(state) {
			if(state.index == state.length) {
				return true;
			}
			if(!state.multiline) {
				return false;
			}
			if(hre_RegExpMatcher.isLineTerminator(state.list[state.index])) {
				return true;
			}
			return false;
		});
	case 2:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			var a = e > 0 && hre_RegExpMatcher.isWordChar(state.list[e - 1]);
			var b = e < state.length && hre_RegExpMatcher.isWordChar(state.list[e]);
			return a != b;
		});
	case 3:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			var a = e > 0 && hre_RegExpMatcher.isWordChar(state.list[e - 1]);
			var b = e < state.length && hre_RegExpMatcher.isWordChar(state.list[e]);
			return a == b;
		});
	case 4:
		var disjunction = assertion.disjunction;
		var m = hre_RegExpMatcher.evaluateDisjunction(disjunction);
		return haxe_ds_Either.Right(function(state,continuation) {
			var d = function(state) {
				return hre_MatcherResult.Success(state);
			};
			var _g = m(state,d);
			switch(_g._hx_index) {
			case 0:
				return hre_MatcherResult.Failure;
			case 1:
				var subState = _g.matcherState;
				var nextState = subState.copy();
				nextState.index = state.index;
				return continuation(nextState);
			}
		});
	case 5:
		var disjunction = assertion.disjunction;
		var m1 = hre_RegExpMatcher.evaluateDisjunction(disjunction);
		return haxe_ds_Either.Right(function(state,continuation) {
			var d = function(state) {
				return hre_MatcherResult.Success(state);
			};
			var _g = m1(state,d);
			switch(_g._hx_index) {
			case 0:
				return continuation(state);
			case 1:
				var _g1 = _g.matcherState;
				return hre_MatcherResult.Failure;
			}
		});
	}
};
hre_RegExpMatcher.evaluateAtom = function(atom) {
	switch(atom._hx_index) {
	case 0:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.lineTerminators,true);
	case 1:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(48 <= cc && cc <= 57) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 2:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(!(48 <= cc && cc <= 57)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 3:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.separators,false);
	case 4:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.separators,true);
	case 5:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(hre_RegExpMatcher.isWordChar(cc)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 6:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(!hre_RegExpMatcher.isWordChar(cc)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 7:
		var captureId = atom.captureId;
		return hre_RegExpMatcher.evaluateBackreference(captureId);
	case 8:
		var literal = atom.literal;
		return hre_RegExpMatcher.characterSetMatcher([HxOverrides.cca(literal,0)],false);
	case 9:
		var characterClass = atom.characterClass;
		return hre_RegExpMatcher.evaluateCharacterClass(characterClass);
	case 10:
		var disjunction = atom.disjunction;
		var captureIndex = atom.captureIndex;
		return hre_RegExpMatcher.evaluateCaptureGroup(disjunction,captureIndex);
	case 11:
		var disjunction = atom.disjunction;
		return hre_RegExpMatcher.evaluateDisjunction(disjunction);
	}
};
hre_RegExpMatcher.evaluateQuantifiedAtom = function(atom,quantifier,captureStart,captureEnd) {
	var m = hre_RegExpMatcher.evaluateAtom(atom);
	return function(state,continuation) {
		return hre_RegExpMatcher.repeatMatcher(m,quantifier.min,quantifier.max,quantifier.greedy,state,continuation,captureStart,captureEnd);
	};
};
hre_RegExpMatcher.repeatMatcher = function(m,min,max,greedy,x,c,captureStart,captureEnd) {
	if(max == 0) {
		return c(x);
	}
	var d = function(y) {
		if(min == 0 && x.index == y.index) {
			return hre_MatcherResult.Failure;
		}
		var min2 = min == 0 ? 0 : min - 1;
		var max2 = max == -1 ? -1 : max - 1;
		return hre_RegExpMatcher.repeatMatcher(m,min2,max2,greedy,y,c,captureStart,captureEnd);
	};
	var xr = x.copy();
	var _g = captureStart;
	var _g1 = captureEnd;
	while(_g < _g1) {
		var k = _g++;
		xr.captures[k] = null;
	}
	if(min > 0) {
		return m(xr,d);
	}
	if(!greedy) {
		var z = c(x);
		if(z._hx_index == 0) {
			return m(xr,d);
		} else {
			return z;
		}
	}
	var z = m(xr,d);
	if(z._hx_index == 0) {
		return c(x);
	} else {
		return z;
	}
};
hre_RegExpMatcher.evaluateCaptureGroup = function(disjunction,captureIndex) {
	var m = hre_RegExpMatcher.evaluateDisjunction(disjunction);
	return function(state,continuation) {
		var subContinuation = function(subState) {
			var capturedSubstring = "";
			var _g = state.index;
			var _g1 = subState.index;
			while(_g < _g1) {
				var i = _g++;
				var code = state.list[i];
				capturedSubstring += String.fromCodePoint(code);
			}
			var nextState = subState.copy();
			nextState.captures[captureIndex] = capturedSubstring;
			return continuation(nextState);
		};
		return m(state,subContinuation);
	};
};
hre_RegExpMatcher.evaluateBackreference = function(captureId) {
	var captureIndex = captureId - 1;
	return function(state,continuation) {
		var referenced = state.captures[captureIndex];
		if(referenced == null) {
			return continuation(state);
		}
		var e = state.index;
		var f = e + referenced.length;
		if(f > state.list.length) {
			return hre_MatcherResult.Failure;
		}
		var _g = 0;
		var _g1 = referenced.length;
		while(_g < _g1) {
			var i = _g++;
			if(hre_RegExpMatcher.canonicalize(state,state.list[e + i]) != hre_RegExpMatcher.canonicalize(state,HxOverrides.cca(referenced,i))) {
				return hre_MatcherResult.Failure;
			}
		}
		var y = state.copy();
		y.index = f;
		return continuation(y);
	};
};
hre_RegExpMatcher.evaluateCharacterClass = function(characterClass) {
	return function(state,continuation) {
		var e = state.index;
		if(e == state.length) {
			return hre_MatcherResult.Failure;
		}
		var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
		var matched = false;
		var _g = 0;
		var _g1 = characterClass.ranges;
		_hx_loop1: while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			switch(range._hx_index) {
			case 0:
				var start = range.start;
				var end = range.end;
				var startCode = HxOverrides.cca(start,0);
				var endCode = HxOverrides.cca(end,0);
				if(state.ignoreCase) {
					var _g2 = startCode;
					var _g3 = endCode + 1;
					while(_g2 < _g3) {
						var i = _g2++;
						if(cc == hre_RegExpMatcher.canonicalize(state,i)) {
							matched = true;
							break;
						}
					}
				} else if(startCode <= cc && cc <= endCode) {
					matched = true;
					break _hx_loop1;
				}
				break;
			case 1:
				var ccAtom = range.value;
				switch(ccAtom._hx_index) {
				case 0:
					var value = ccAtom.value;
					if(hre_RegExpMatcher.canonicalize(state,HxOverrides.cca(value,0)) == cc) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 1:
					if(48 <= cc && cc <= 57) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 2:
					if(!(48 <= cc && cc <= 57)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 3:
					if(hre_RegExpMatcher.separators.indexOf(cc) >= 0) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 4:
					if(hre_RegExpMatcher.separators.indexOf(cc) < 0) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 5:
					if(hre_RegExpMatcher.isWordChar(cc)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 6:
					if(!hre_RegExpMatcher.isWordChar(cc)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				}
				break;
			}
		}
		if(characterClass.inverted == matched) {
			return hre_MatcherResult.Failure;
		}
		var nextState = state.copy();
		nextState.index++;
		return continuation(nextState);
	};
};
hre_RegExpMatcher.characterSetMatcher = function(codepoints,invert) {
	return function(state,continuation) {
		var e = state.index;
		if(e == state.length) {
			return hre_MatcherResult.Failure;
		}
		var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
		var matched = false;
		var _g = 0;
		while(_g < codepoints.length) {
			var chr = codepoints[_g];
			++_g;
			if(cc == hre_RegExpMatcher.canonicalize(state,chr)) {
				matched = true;
				break;
			}
		}
		if(invert == matched) {
			return hre_MatcherResult.Failure;
		}
		var nextState = state.copy();
		nextState.index++;
		return continuation(nextState);
	};
};
hre_RegExpMatcher.canonicalize = function(state,codepoint) {
	if(!state.ignoreCase) {
		return codepoint;
	}
	return HxOverrides.cca(String.fromCodePoint(codepoint).toLowerCase(),0);
};
hre_RegExpMatcher.isLineTerminator = function(codepoint) {
	return hre_RegExpMatcher.lineTerminators.indexOf(codepoint) >= 0;
};
hre_RegExpMatcher.isWordChar = function(codepoint) {
	if(!(97 <= codepoint && codepoint <= 122 || 65 <= codepoint && codepoint <= 90 || 48 <= codepoint && codepoint <= 57)) {
		return codepoint == 95;
	} else {
		return true;
	}
};
hre_RegExpMatcher.prototype = {
	__class__: hre_RegExpMatcher
};
var hre_RegExpSyntaxError = function(message,index,source) {
	hre_HreError.call(this,"RegExp syntax error for \"" + source + "\" at index " + index + ": " + message);
	this.index = index;
	this.source = source;
};
$hxClasses["hre.RegExpSyntaxError"] = hre_RegExpSyntaxError;
hre_RegExpSyntaxError.__name__ = "hre.RegExpSyntaxError";
hre_RegExpSyntaxError.__super__ = hre_HreError;
hre_RegExpSyntaxError.prototype = $extend(hre_HreError.prototype,{
	index: null
	,source: null
	,__class__: hre_RegExpSyntaxError
});
var hre_QuantifierPrefix = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["hre.QuantifierPrefix"] = hre_QuantifierPrefix;
hre_QuantifierPrefix.__name__ = "hre.QuantifierPrefix";
hre_QuantifierPrefix.prototype = {
	min: null
	,max: null
	,__class__: hre_QuantifierPrefix
};
var hre_IntLiteral = function(length,value) {
	this.length = length;
	this.value = value;
};
$hxClasses["hre.IntLiteral"] = hre_IntLiteral;
hre_IntLiteral.__name__ = "hre.IntLiteral";
hre_IntLiteral.prototype = {
	length: null
	,value: null
	,__class__: hre_IntLiteral
};
var hre_Escape = $hxEnums["hre.Escape"] = { __ename__:"hre.Escape",__constructs__:null
	,Literal: ($_=function(codepoint) { return {_hx_index:0,codepoint:codepoint,__enum__:"hre.Escape",toString:$estr}; },$_._hx_name="Literal",$_.__params__ = ["codepoint"],$_)
	,Backreference: ($_=function(captureId) { return {_hx_index:1,captureId:captureId,__enum__:"hre.Escape",toString:$estr}; },$_._hx_name="Backreference",$_.__params__ = ["captureId"],$_)
	,Word: {_hx_name:"Word",_hx_index:2,__enum__:"hre.Escape",toString:$estr}
	,NotWord: {_hx_name:"NotWord",_hx_index:3,__enum__:"hre.Escape",toString:$estr}
	,Decimal: {_hx_name:"Decimal",_hx_index:4,__enum__:"hre.Escape",toString:$estr}
	,NotDecimal: {_hx_name:"NotDecimal",_hx_index:5,__enum__:"hre.Escape",toString:$estr}
	,Separator: {_hx_name:"Separator",_hx_index:6,__enum__:"hre.Escape",toString:$estr}
	,NotSeparator: {_hx_name:"NotSeparator",_hx_index:7,__enum__:"hre.Escape",toString:$estr}
	,WordBoundary: {_hx_name:"WordBoundary",_hx_index:8,__enum__:"hre.Escape",toString:$estr}
	,NotWordBoundary: {_hx_name:"NotWordBoundary",_hx_index:9,__enum__:"hre.Escape",toString:$estr}
};
hre_Escape.__constructs__ = [hre_Escape.Literal,hre_Escape.Backreference,hre_Escape.Word,hre_Escape.NotWord,hre_Escape.Decimal,hre_Escape.NotDecimal,hre_Escape.Separator,hre_Escape.NotSeparator,hre_Escape.WordBoundary,hre_Escape.NotWordBoundary];
var hre_RegExpParser = function(source) {
	this.source = source;
	this.currentIndex = 0;
	this.length = source.length;
	this.capturesCount = 0;
};
$hxClasses["hre.RegExpParser"] = hre_RegExpParser;
hre_RegExpParser.__name__ = "hre.RegExpParser";
hre_RegExpParser.parse = function(pattern) {
	return new hre_RegExpParser(pattern).readPattern();
};
hre_RegExpParser.prototype = {
	source: null
	,currentIndex: null
	,length: null
	,capturesCount: null
	,isEndOfPattern: function() {
		if(this.peek()._hx_index == 0) {
			return true;
		} else {
			return false;
		}
	}
	,readPattern: function() {
		var alternatives = [];
		_hx_loop1: while(!this.isEndOfPattern()) {
			alternatives.push(this.readAlternative());
			var _g = this.peek();
			switch(_g._hx_index) {
			case 0:
				break _hx_loop1;
			case 1:
				var c = _g.character;
				if(c == "|") {
					this.currentIndex++;
				} else {
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected character " + c,this.currentIndex,this.source));
				}
				break;
			}
		}
		return new hre_ast_Pattern(alternatives,this.capturesCount);
	}
	,isEndOfDisjunction: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return true;
		case 1:
			var c = _g.character;
			return c == ")";
		}
	}
	,readDisjunction: function() {
		var alternatives = [];
		_hx_loop1: while(!this.isEndOfDisjunction()) {
			alternatives.push(this.readAlternative());
			var _g = this.peek();
			switch(_g._hx_index) {
			case 0:
				break _hx_loop1;
			case 1:
				var c = _g.character;
				switch(c) {
				case ")":
					break _hx_loop1;
				case "|":
					this.currentIndex++;
					break;
				default:
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected character " + c,this.currentIndex,this.source));
				}
				break;
			}
		}
		return new hre_ast_Disjunction(alternatives);
	}
	,isEndOfAlternative: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return true;
		case 1:
			var c = _g.character;
			if(c == "|" || c == ")") {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
	,readAlternative: function() {
		var terms = [];
		while(!this.isEndOfAlternative()) terms.push(this.readTerm());
		return new hre_ast_Alternative(terms);
	}
	,readTerm: function() {
		if(this.readQuantifier() != null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("There is nothing to repeat",this.currentIndex,this.source));
		}
		var oldCapturesCount = this.capturesCount;
		var assertionOrAtom;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected end of text",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			switch(c) {
			case "$":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Left(hre_ast_Assertion.EndOfText);
				break;
			case "(":
				assertionOrAtom = this.readGroup();
				break;
			case ".":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Right(hre_ast_Atom.AnyCharacter);
				break;
			case "[":
				assertionOrAtom = haxe_ds_Either.Right(this.readCharacterClass());
				break;
			case "\\":
				assertionOrAtom = this.readEscapeTerm();
				break;
			case "^":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Left(hre_ast_Assertion.StartOfText);
				break;
			case "|":
				throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected syntax character |",this.currentIndex,this.source));
			default:
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Right(hre_ast_Atom.Literal(c));
			}
			break;
		}
		switch(assertionOrAtom._hx_index) {
		case 0:
			var assertion = assertionOrAtom.v;
			return hre_ast_Term.Assertion(assertion);
		case 1:
			var atom = assertionOrAtom.v;
			var quantifier = this.readQuantifier();
			if(quantifier == null) {
				return hre_ast_Term.Atom(atom);
			} else {
				return hre_ast_Term.QuantifiedAtom(atom,quantifier,oldCapturesCount,this.capturesCount);
			}
			break;
		}
	}
	,readEscape: function(inCharacterClass) {
		if(this.peekChar() != "\\") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid escape term, expected \\",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Escape at the end of the pattern",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			var charCode = HxOverrides.cca(c,0);
			if(48 <= charCode && charCode <= 57) {
				if(charCode == 48) {
					this.currentIndex++;
					return hre_Escape.Literal(0);
				} else {
					if(inCharacterClass) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid decimal escape in character class",this.currentIndex,this.source));
					}
					var decimal = this.readDecimalDigits();
					var decimalLen = decimal.length;
					var decimalVal = decimal.value;
					return hre_Escape.Backreference(decimalVal);
				}
			} else {
				switch(c) {
				case "B":
					if(inCharacterClass) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid `\\B` escape in character class",this.currentIndex,this.source));
					}
					this.currentIndex++;
					return hre_Escape.NotWordBoundary;
				case "D":
					this.currentIndex++;
					return hre_Escape.NotDecimal;
				case "S":
					this.currentIndex++;
					return hre_Escape.NotSeparator;
				case "W":
					this.currentIndex++;
					return hre_Escape.NotWord;
				case "b":
					this.currentIndex++;
					if(inCharacterClass) {
						return hre_Escape.Literal(8);
					} else {
						return hre_Escape.WordBoundary;
					}
					break;
				case "c":
					this.currentIndex++;
					var controlLetter = this.peekChar();
					var controlLetterCode = HxOverrides.cca(controlLetter,0);
					if(!(65 <= controlLetterCode && controlLetterCode <= 90) && !(97 <= controlLetterCode && controlLetterCode <= 122)) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Control letter must be in A-Za-z",this.currentIndex,this.source));
					}
					this.currentIndex++;
					return hre_Escape.Literal(controlLetterCode % 32);
				case "d":
					this.currentIndex++;
					return hre_Escape.Decimal;
				case "f":
					this.currentIndex++;
					return hre_Escape.Literal(12);
				case "n":
					this.currentIndex++;
					return hre_Escape.Literal(10);
				case "r":
					this.currentIndex++;
					return hre_Escape.Literal(13);
				case "s":
					this.currentIndex++;
					return hre_Escape.Separator;
				case "t":
					this.currentIndex++;
					return hre_Escape.Literal(9);
				case "u":
					this.currentIndex++;
					var codePoint;
					if(this.peekChar() == "{") {
						this.currentIndex++;
						var hexLiteral = this.readHexadecimal(4,-1);
						if(this.peekChar() != "}") {
							throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Expected `}`",this.currentIndex,this.source));
						}
						this.currentIndex++;
						codePoint = hexLiteral.value;
					} else {
						codePoint = this.readHexadecimal(4,4).value;
					}
					if(codePoint > 1114111) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Codepoint exceeds max value (0x10ffff)`",this.currentIndex,this.source));
					}
					return hre_Escape.Literal(codePoint);
				case "v":
					this.currentIndex++;
					return hre_Escape.Literal(11);
				case "w":
					this.currentIndex++;
					return hre_Escape.Word;
				case "x":
					this.currentIndex++;
					var hexLiteral = this.readHexadecimal(2,2);
					return hre_Escape.Literal(hexLiteral.value);
				default:
					this.currentIndex++;
					return hre_Escape.Literal(HxOverrides.cca(c,0));
				}
			}
			break;
		}
	}
	,readEscapeTerm: function() {
		var _g = this.readEscape(false);
		switch(_g._hx_index) {
		case 0:
			var codePoint = _g.codepoint;
			return haxe_ds_Either.Right(hre_ast_Atom.Literal(String.fromCodePoint(codePoint)));
		case 1:
			var captureId = _g.captureId;
			return haxe_ds_Either.Right(hre_ast_Atom.Backreference(captureId));
		case 2:
			return haxe_ds_Either.Right(hre_ast_Atom.Word);
		case 3:
			return haxe_ds_Either.Right(hre_ast_Atom.NotWord);
		case 4:
			return haxe_ds_Either.Right(hre_ast_Atom.Decimal);
		case 5:
			return haxe_ds_Either.Right(hre_ast_Atom.NotDecimal);
		case 6:
			return haxe_ds_Either.Right(hre_ast_Atom.Separator);
		case 7:
			return haxe_ds_Either.Right(hre_ast_Atom.NotSeparator);
		case 8:
			return haxe_ds_Either.Left(hre_ast_Assertion.WordBoundary);
		case 9:
			return haxe_ds_Either.Left(hre_ast_Assertion.NotWordBoundary);
		}
	}
	,readGroup: function() {
		if(this.peekChar() != "(") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, expected (",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var kind = hre_GroupKind.Capture;
		var oldCaptureCount = this.capturesCount;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated group",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == "?") {
				this.currentIndex++;
				var _g = this.peek();
				switch(_g._hx_index) {
				case 0:
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, expected modifier",this.currentIndex,this.source));
				case 1:
					var c = _g.character;
					switch(c) {
					case "!":
						kind = hre_GroupKind.NotFollowedBy;
						break;
					case ":":
						kind = hre_GroupKind.Simple;
						break;
					case "=":
						kind = hre_GroupKind.FollowedBy;
						break;
					default:
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, unknown modifier: " + c,this.currentIndex,this.source));
					}
					break;
				}
				this.currentIndex++;
			}
			break;
		}
		if(kind._hx_index == 0) {
			this.capturesCount++;
		}
		var disjunction = this.readDisjunction();
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, unterminated group",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == ")") {
				this.currentIndex++;
			}
			break;
		}
		switch(kind._hx_index) {
		case 0:
			return haxe_ds_Either.Right(hre_ast_Atom.CaptureGroup(disjunction,oldCaptureCount));
		case 1:
			return haxe_ds_Either.Right(hre_ast_Atom.SimpleGroup(disjunction));
		case 2:
			return haxe_ds_Either.Left(hre_ast_Assertion.FollowedBy(disjunction));
		case 3:
			return haxe_ds_Either.Left(hre_ast_Assertion.NotFollowedBy(disjunction));
		}
	}
	,isEndOfCharacterClass: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return false;
		case 1:
			var c = _g.character;
			return c == "]";
		}
	}
	,readCharacterClass: function() {
		if(this.peekChar() != "[") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid character class, expected [",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var inverted;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated character class",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == "^") {
				this.currentIndex++;
				inverted = true;
			} else {
				inverted = false;
			}
			break;
		}
		var ranges = [];
		while(!this.isEndOfCharacterClass()) ranges.push(this.readCharacterClassRange(ranges.length == 0));
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated character class",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == "]") {
				this.currentIndex++;
			}
			break;
		}
		return hre_ast_Atom.Class(new hre_ast_CharacterClass(inverted,ranges));
	}
	,readCharacterClassRange: function(firstRange) {
		var start = this.readCharacterClassAtom(!firstRange);
		if(start == null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Expected character class atom",this.currentIndex,this.source));
		}
		var c = this.peekChar();
		if(c != "-") {
			return hre_ast_CharacterClassRange.Simple(start);
		}
		if(this.peekChar(1) == "]") {
			return hre_ast_CharacterClassRange.Simple(start);
		}
		this.currentIndex++;
		var end = this.readCharacterClassAtom(false);
		if(end == null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid range in character class",this.currentIndex,this.source));
		}
		var startCharacter;
		if(start._hx_index == 0) {
			var c = start.value;
			startCharacter = c;
		} else {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Start of range is not a literal",this.currentIndex,this.source));
		}
		var endCharacter;
		if(end._hx_index == 0) {
			var c = end.value;
			endCharacter = c;
		} else {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("End of range is not a literal",this.currentIndex,this.source));
		}
		if(HxOverrides.cca(startCharacter,0) > HxOverrides.cca(endCharacter,0)) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid range",this.currentIndex,this.source));
		}
		return hre_ast_CharacterClassRange.Range(startCharacter,endCharacter);
	}
	,readCharacterClassAtom: function(noDash) {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return null;
		case 1:
			var c = _g.character;
			switch(c) {
			case "-":
				if(noDash) {
					return null;
				}
				this.currentIndex++;
				return hre_ast_CharacterClassAtom.Literal("-");
			case "\\":
				return this.readEscapedCharacterClassAtom();
			case "]":
				return null;
			default:
				this.currentIndex++;
				return hre_ast_CharacterClassAtom.Literal(c);
			}
			break;
		}
	}
	,readEscapedCharacterClassAtom: function() {
		var $escape = this.readEscape(true);
		switch($escape._hx_index) {
		case 0:
			var codePoint = $escape.codepoint;
			return hre_ast_CharacterClassAtom.Literal(String.fromCodePoint(codePoint));
		case 2:
			return hre_ast_CharacterClassAtom.Word;
		case 3:
			return hre_ast_CharacterClassAtom.NotWord;
		case 4:
			return hre_ast_CharacterClassAtom.Decimal;
		case 5:
			return hre_ast_CharacterClassAtom.NotDecimal;
		case 6:
			return hre_ast_CharacterClassAtom.Separator;
		case 7:
			return hre_ast_CharacterClassAtom.NotSeparator;
		default:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected escape in character class: " + $hxEnums[$escape.__enum__].__constructs__[$escape._hx_index]._hx_name,this.currentIndex,this.source));
		}
	}
	,isGreedyQuantifier: function() {
		var _g = this.peek();
		if(_g._hx_index == 1) {
			var c = _g.character;
			return c != "?";
		} else {
			return true;
		}
	}
	,readQuantifierPrefix: function() {
		var _g = this.peek();
		if(_g._hx_index == 1) {
			var c = _g.character;
			switch(c) {
			case "*":
				this.currentIndex++;
				return new hre_QuantifierPrefix(0,-1);
			case "+":
				this.currentIndex++;
				return new hre_QuantifierPrefix(1,-1);
			case "?":
				this.currentIndex++;
				return new hre_QuantifierPrefix(0,1);
			case "{":
				return this.readQuantifierBlock();
			default:
				return null;
			}
		} else {
			return null;
		}
	}
	,readQuantifierBlock: function() {
		var oldIndex = this.currentIndex;
		if(this.peekChar() != "{") {
			return null;
		}
		this.currentIndex++;
		var min = this.readDecimalDigits();
		var minLen = min.length;
		var minVal = min.value;
		if(minLen == 0) {
			this.currentIndex = oldIndex;
			return null;
		}
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			this.currentIndex = oldIndex;
			return null;
		case 1:
			var c = _g.character;
			switch(c) {
			case ",":
				this.currentIndex++;
				break;
			case "}":
				this.currentIndex++;
				return new hre_QuantifierPrefix(minVal,minVal);
			default:
				this.currentIndex = oldIndex;
				return null;
			}
			break;
		}
		var max = this.readDecimalDigits();
		var maxLen = max.length;
		var maxVal = max.value;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			this.currentIndex = oldIndex;
			return null;
		case 1:
			var c = _g.character;
			if(c != "}") {
				this.currentIndex = oldIndex;
				return null;
			}
			this.currentIndex++;
			if(maxLen == 0) {
				return new hre_QuantifierPrefix(minVal,-1);
			} else {
				if(maxVal < minVal) {
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Max is finite and less than min",this.currentIndex,this.source));
				}
				return new hre_QuantifierPrefix(minVal,maxVal);
			}
			break;
		}
	}
	,readQuantifier: function() {
		var prefix = this.readQuantifierPrefix();
		if(prefix == null) {
			return null;
		}
		var greedy = this.isGreedyQuantifier();
		if(!greedy) {
			this.currentIndex++;
		}
		return new hre_ast_Quantifier(prefix.min,prefix.max,greedy);
	}
	,readDecimalDigits: function() {
		var len = 0;
		var val = 0;
		while(true) {
			var _g = this.peek();
			if(_g._hx_index == 1) {
				var c = _g.character;
				var charCode = HxOverrides.cca(c,0);
				if(48 <= charCode && charCode <= 57) {
					this.currentIndex++;
					++len;
					val = 10 * val + (charCode - 48);
				} else {
					break;
				}
			} else {
				break;
			}
		}
		return new hre_IntLiteral(len,val);
	}
	,readHexadecimal: function(minLen,maxLen) {
		var len = 0;
		var val = 0;
		while(!(maxLen == -1 && len >= maxLen)) {
			var _g = this.peek();
			if(_g._hx_index == 1) {
				var c = _g.character;
				var charCode = HxOverrides.cca(c,0);
				if(48 <= charCode && charCode <= 57) {
					this.currentIndex++;
					++len;
					val = 16 * val + (charCode - 48);
				} else if(65 <= charCode && charCode <= 70) {
					this.currentIndex++;
					++len;
					val = 16 * val + (10 + charCode - 65);
				} else if(97 <= charCode && charCode <= 102) {
					this.currentIndex++;
					++len;
					val = 16 * val + (10 + charCode - 97);
				} else {
					break;
				}
			} else {
				break;
			}
		}
		if(len < minLen) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Not enough hex digits",this.currentIndex,this.source));
		}
		return new hre_IntLiteral(len,val);
	}
	,symbolAt: function(index) {
		if(index < this.length) {
			return hre_tokens_Symbol.Character(this.source.charAt(index));
		} else {
			return hre_tokens_Symbol.EndOfText;
		}
	}
	,charAt: function(index) {
		if(index >= this.length) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected end of text",this.currentIndex,this.source));
		}
		return this.source.charAt(index);
	}
	,peek: function(lookahead) {
		if(lookahead == null) {
			lookahead = 0;
		}
		return this.symbolAt(this.currentIndex + lookahead);
	}
	,peekChar: function(lookahead) {
		if(lookahead == null) {
			lookahead = 0;
		}
		return this.charAt(this.currentIndex + lookahead);
	}
	,__class__: hre_RegExpParser
};
var hre_GroupKind = $hxEnums["hre.GroupKind"] = { __ename__:"hre.GroupKind",__constructs__:null
	,Capture: {_hx_name:"Capture",_hx_index:0,__enum__:"hre.GroupKind",toString:$estr}
	,Simple: {_hx_name:"Simple",_hx_index:1,__enum__:"hre.GroupKind",toString:$estr}
	,FollowedBy: {_hx_name:"FollowedBy",_hx_index:2,__enum__:"hre.GroupKind",toString:$estr}
	,NotFollowedBy: {_hx_name:"NotFollowedBy",_hx_index:3,__enum__:"hre.GroupKind",toString:$estr}
};
hre_GroupKind.__constructs__ = [hre_GroupKind.Capture,hre_GroupKind.Simple,hre_GroupKind.FollowedBy,hre_GroupKind.NotFollowedBy];
var hre_ast_Alternative = function(expressions) {
	this.terms = expressions;
};
$hxClasses["hre.ast.Alternative"] = hre_ast_Alternative;
hre_ast_Alternative.__name__ = "hre.ast.Alternative";
hre_ast_Alternative.prototype = {
	terms: null
	,__class__: hre_ast_Alternative
};
var hre_ast_Assertion = $hxEnums["hre.ast.Assertion"] = { __ename__:"hre.ast.Assertion",__constructs__:null
	,StartOfText: {_hx_name:"StartOfText",_hx_index:0,__enum__:"hre.ast.Assertion",toString:$estr}
	,EndOfText: {_hx_name:"EndOfText",_hx_index:1,__enum__:"hre.ast.Assertion",toString:$estr}
	,WordBoundary: {_hx_name:"WordBoundary",_hx_index:2,__enum__:"hre.ast.Assertion",toString:$estr}
	,NotWordBoundary: {_hx_name:"NotWordBoundary",_hx_index:3,__enum__:"hre.ast.Assertion",toString:$estr}
	,FollowedBy: ($_=function(disjunction) { return {_hx_index:4,disjunction:disjunction,__enum__:"hre.ast.Assertion",toString:$estr}; },$_._hx_name="FollowedBy",$_.__params__ = ["disjunction"],$_)
	,NotFollowedBy: ($_=function(disjunction) { return {_hx_index:5,disjunction:disjunction,__enum__:"hre.ast.Assertion",toString:$estr}; },$_._hx_name="NotFollowedBy",$_.__params__ = ["disjunction"],$_)
};
hre_ast_Assertion.__constructs__ = [hre_ast_Assertion.StartOfText,hre_ast_Assertion.EndOfText,hre_ast_Assertion.WordBoundary,hre_ast_Assertion.NotWordBoundary,hre_ast_Assertion.FollowedBy,hre_ast_Assertion.NotFollowedBy];
var hre_ast_Atom = $hxEnums["hre.ast.Atom"] = { __ename__:"hre.ast.Atom",__constructs__:null
	,AnyCharacter: {_hx_name:"AnyCharacter",_hx_index:0,__enum__:"hre.ast.Atom",toString:$estr}
	,Decimal: {_hx_name:"Decimal",_hx_index:1,__enum__:"hre.ast.Atom",toString:$estr}
	,NotDecimal: {_hx_name:"NotDecimal",_hx_index:2,__enum__:"hre.ast.Atom",toString:$estr}
	,Separator: {_hx_name:"Separator",_hx_index:3,__enum__:"hre.ast.Atom",toString:$estr}
	,NotSeparator: {_hx_name:"NotSeparator",_hx_index:4,__enum__:"hre.ast.Atom",toString:$estr}
	,Word: {_hx_name:"Word",_hx_index:5,__enum__:"hre.ast.Atom",toString:$estr}
	,NotWord: {_hx_name:"NotWord",_hx_index:6,__enum__:"hre.ast.Atom",toString:$estr}
	,Backreference: ($_=function(captureId) { return {_hx_index:7,captureId:captureId,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="Backreference",$_.__params__ = ["captureId"],$_)
	,Literal: ($_=function(literal) { return {_hx_index:8,literal:literal,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="Literal",$_.__params__ = ["literal"],$_)
	,Class: ($_=function(characterClass) { return {_hx_index:9,characterClass:characterClass,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="Class",$_.__params__ = ["characterClass"],$_)
	,CaptureGroup: ($_=function(disjunction,captureIndex) { return {_hx_index:10,disjunction:disjunction,captureIndex:captureIndex,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="CaptureGroup",$_.__params__ = ["disjunction","captureIndex"],$_)
	,SimpleGroup: ($_=function(disjunction) { return {_hx_index:11,disjunction:disjunction,__enum__:"hre.ast.Atom",toString:$estr}; },$_._hx_name="SimpleGroup",$_.__params__ = ["disjunction"],$_)
};
hre_ast_Atom.__constructs__ = [hre_ast_Atom.AnyCharacter,hre_ast_Atom.Decimal,hre_ast_Atom.NotDecimal,hre_ast_Atom.Separator,hre_ast_Atom.NotSeparator,hre_ast_Atom.Word,hre_ast_Atom.NotWord,hre_ast_Atom.Backreference,hre_ast_Atom.Literal,hre_ast_Atom.Class,hre_ast_Atom.CaptureGroup,hre_ast_Atom.SimpleGroup];
var hre_ast_CharacterClass = function(inverted,ranges) {
	this.inverted = inverted;
	this.ranges = ranges;
};
$hxClasses["hre.ast.CharacterClass"] = hre_ast_CharacterClass;
hre_ast_CharacterClass.__name__ = "hre.ast.CharacterClass";
hre_ast_CharacterClass.prototype = {
	inverted: null
	,ranges: null
	,__class__: hre_ast_CharacterClass
};
var hre_ast_CharacterClassAtom = $hxEnums["hre.ast.CharacterClassAtom"] = { __ename__:"hre.ast.CharacterClassAtom",__constructs__:null
	,Literal: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}; },$_._hx_name="Literal",$_.__params__ = ["value"],$_)
	,Decimal: {_hx_name:"Decimal",_hx_index:1,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotDecimal: {_hx_name:"NotDecimal",_hx_index:2,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,Separator: {_hx_name:"Separator",_hx_index:3,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotSeparator: {_hx_name:"NotSeparator",_hx_index:4,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,Word: {_hx_name:"Word",_hx_index:5,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotWord: {_hx_name:"NotWord",_hx_index:6,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
};
hre_ast_CharacterClassAtom.__constructs__ = [hre_ast_CharacterClassAtom.Literal,hre_ast_CharacterClassAtom.Decimal,hre_ast_CharacterClassAtom.NotDecimal,hre_ast_CharacterClassAtom.Separator,hre_ast_CharacterClassAtom.NotSeparator,hre_ast_CharacterClassAtom.Word,hre_ast_CharacterClassAtom.NotWord];
var hre_ast_CharacterClassRange = $hxEnums["hre.ast.CharacterClassRange"] = { __ename__:"hre.ast.CharacterClassRange",__constructs__:null
	,Range: ($_=function(start,end) { return {_hx_index:0,start:start,end:end,__enum__:"hre.ast.CharacterClassRange",toString:$estr}; },$_._hx_name="Range",$_.__params__ = ["start","end"],$_)
	,Simple: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"hre.ast.CharacterClassRange",toString:$estr}; },$_._hx_name="Simple",$_.__params__ = ["value"],$_)
};
hre_ast_CharacterClassRange.__constructs__ = [hre_ast_CharacterClassRange.Range,hre_ast_CharacterClassRange.Simple];
var hre_ast_Disjunction = function(alternatives) {
	this.alternatives = alternatives;
};
$hxClasses["hre.ast.Disjunction"] = hre_ast_Disjunction;
hre_ast_Disjunction.__name__ = "hre.ast.Disjunction";
hre_ast_Disjunction.prototype = {
	alternatives: null
	,__class__: hre_ast_Disjunction
};
var hre_ast_Pattern = function(alternatives,captures) {
	hre_ast_Disjunction.call(this,alternatives);
	this.captures = captures;
};
$hxClasses["hre.ast.Pattern"] = hre_ast_Pattern;
hre_ast_Pattern.__name__ = "hre.ast.Pattern";
hre_ast_Pattern.__super__ = hre_ast_Disjunction;
hre_ast_Pattern.prototype = $extend(hre_ast_Disjunction.prototype,{
	captures: null
	,__class__: hre_ast_Pattern
});
var hre_ast_Quantifier = function(min,max,greedy) {
	this.min = min;
	this.max = max;
	this.greedy = greedy;
};
$hxClasses["hre.ast.Quantifier"] = hre_ast_Quantifier;
hre_ast_Quantifier.__name__ = "hre.ast.Quantifier";
hre_ast_Quantifier.prototype = {
	min: null
	,max: null
	,greedy: null
	,__class__: hre_ast_Quantifier
};
var hre_ast_Term = $hxEnums["hre.ast.Term"] = { __ename__:"hre.ast.Term",__constructs__:null
	,Assertion: ($_=function(assertion) { return {_hx_index:0,assertion:assertion,__enum__:"hre.ast.Term",toString:$estr}; },$_._hx_name="Assertion",$_.__params__ = ["assertion"],$_)
	,Atom: ($_=function(atom) { return {_hx_index:1,atom:atom,__enum__:"hre.ast.Term",toString:$estr}; },$_._hx_name="Atom",$_.__params__ = ["atom"],$_)
	,QuantifiedAtom: ($_=function(atom,quantifier,capturesStartIndex,capturesEndIndex) { return {_hx_index:2,atom:atom,quantifier:quantifier,capturesStartIndex:capturesStartIndex,capturesEndIndex:capturesEndIndex,__enum__:"hre.ast.Term",toString:$estr}; },$_._hx_name="QuantifiedAtom",$_.__params__ = ["atom","quantifier","capturesStartIndex","capturesEndIndex"],$_)
};
hre_ast_Term.__constructs__ = [hre_ast_Term.Assertion,hre_ast_Term.Atom,hre_ast_Term.QuantifiedAtom];
var hre_tokens_Symbol = $hxEnums["hre.tokens.Symbol"] = { __ename__:"hre.tokens.Symbol",__constructs__:null
	,EndOfText: {_hx_name:"EndOfText",_hx_index:0,__enum__:"hre.tokens.Symbol",toString:$estr}
	,Character: ($_=function(character) { return {_hx_index:1,character:character,__enum__:"hre.tokens.Symbol",toString:$estr}; },$_._hx_name="Character",$_.__params__ = ["character"],$_)
};
hre_tokens_Symbol.__constructs__ = [hre_tokens_Symbol.EndOfText,hre_tokens_Symbol.Character];
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__:"hscript.Const",__constructs__:null
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CInt",$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CFloat",$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["s"],$_)
};
hscript_Const.__constructs__ = [hscript_Const.CInt,hscript_Const.CFloat,hscript_Const.CString];
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__:"hscript.Expr",__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EConst",$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EIdent",$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EVar",$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EParent",$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EBlock",$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EField",$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EBinop",$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EUnop",$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ECall",$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EIf",$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EWhile",$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EFor",$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EFunction",$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EReturn",$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EArray",$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EArrayDecl",$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ENew",$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EThrow",$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ETry",$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EObject",$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ETernary",$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ESwitch",$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EDoWhile",$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EMeta",$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ECheckType",$_.__params__ = ["e","t"],$_)
};
hscript_Expr.__constructs__ = [hscript_Expr.EConst,hscript_Expr.EIdent,hscript_Expr.EVar,hscript_Expr.EParent,hscript_Expr.EBlock,hscript_Expr.EField,hscript_Expr.EBinop,hscript_Expr.EUnop,hscript_Expr.ECall,hscript_Expr.EIf,hscript_Expr.EWhile,hscript_Expr.EFor,hscript_Expr.EBreak,hscript_Expr.EContinue,hscript_Expr.EFunction,hscript_Expr.EReturn,hscript_Expr.EArray,hscript_Expr.EArrayDecl,hscript_Expr.ENew,hscript_Expr.EThrow,hscript_Expr.ETry,hscript_Expr.EObject,hscript_Expr.ETernary,hscript_Expr.ESwitch,hscript_Expr.EDoWhile,hscript_Expr.EMeta,hscript_Expr.ECheckType];
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__:"hscript.CType",__constructs__:null
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTPath",$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTFun",$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTAnon",$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTParent",$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTOpt",$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTNamed",$_.__params__ = ["n","t"],$_)
};
hscript_CType.__constructs__ = [hscript_CType.CTPath,hscript_CType.CTFun,hscript_CType.CTAnon,hscript_CType.CTParent,hscript_CType.CTOpt,hscript_CType.CTNamed];
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__:"hscript.Error",__constructs__:null
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidChar",$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EUnexpected",$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_name:"EUnterminatedString",_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_name:"EUnterminatedComment",_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidPreprocessor",$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EUnknownVariable",$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidIterator",$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidOp",$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidAccess",$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="ECustom",$_.__params__ = ["msg"],$_)
};
hscript_Error.__constructs__ = [hscript_Error.EInvalidChar,hscript_Error.EUnexpected,hscript_Error.EUnterminatedString,hscript_Error.EUnterminatedComment,hscript_Error.EInvalidPreprocessor,hscript_Error.EUnknownVariable,hscript_Error.EInvalidIterator,hscript_Error.EInvalidOp,hscript_Error.EInvalidAccess,hscript_Error.ECustom];
var hscript_ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__:"hscript.ModuleDecl",__constructs__:null
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DPackage",$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DImport",$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DClass",$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DTypedef",$_.__params__ = ["c"],$_)
};
hscript_ModuleDecl.__constructs__ = [hscript_ModuleDecl.DPackage,hscript_ModuleDecl.DImport,hscript_ModuleDecl.DClass,hscript_ModuleDecl.DTypedef];
var hscript_FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__:"hscript.FieldAccess",__constructs__:null
	,APublic: {_hx_name:"APublic",_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_name:"APrivate",_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_name:"AInline",_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_name:"AOverride",_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_name:"AStatic",_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_name:"AMacro",_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
hscript_FieldAccess.__constructs__ = [hscript_FieldAccess.APublic,hscript_FieldAccess.APrivate,hscript_FieldAccess.AInline,hscript_FieldAccess.AOverride,hscript_FieldAccess.AStatic,hscript_FieldAccess.AMacro];
var hscript_FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__:"hscript.FieldKind",__constructs__:null
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_._hx_name="KFunction",$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_._hx_name="KVar",$_.__params__ = ["v"],$_)
};
hscript_FieldKind.__constructs__ = [hscript_FieldKind.KFunction,hscript_FieldKind.KVar];
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__:"hscript._Interp.Stop",__constructs__:null
	,SBreak: {_hx_name:"SBreak",_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_name:"SContinue",_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_name:"SReturn",_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
hscript__$Interp_Stop.__constructs__ = [hscript__$Interp_Stop.SBreak,hscript__$Interp_Stop.SContinue,hscript__$Interp_Stop.SReturn];
var hscript_Interp = function() {
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	this.resetVariables();
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,returnValue: null
	,resetVariables: function() {
		var _gthis = this;
		this.variables = new haxe_ds_StringMap();
		this.variables.h["null"] = null;
		this.variables.h["true"] = true;
		this.variables.h["false"] = false;
		var this1 = this.variables;
		var value = Reflect.makeVarArgs(function(el) {
			var inf = _gthis.posInfos();
			var v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe_Log.trace(Std.string(v),inf);
		});
		this1.h["trace"] = value;
	}
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	,setVar: function(name,v) {
		this.variables.h[name] = v;
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			if(l == null) {
				this.setVar(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			var e = e1.e;
			var f = e1.f;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var e = e1.e;
			var index = e1.index;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp("=");
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.setVar(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			var e = e1.e;
			var f = e1.f;
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var e = e1.e;
			var index = e1.index;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(op);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			var l = this.locals.h[id];
			var v = l == null ? this.resolve(id) : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.setVar(id,v);
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.setVar(id,v + delta);
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var e1 = e.e;
			var f = e.f;
			var obj = this.expr(e1);
			var v = this.get(obj,f);
			if(prefix) {
				v += delta;
				this.set(obj,f,v);
			} else {
				this.set(obj,f,v + delta);
			}
			return v;
		case 16:
			var e1 = e.e;
			var index = e.index;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				var v = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				var v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw haxe_Exception.thrown(e);
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe_Exception.thrown("Invalid break");
				case 1:
					throw haxe_Exception.thrown("Invalid continue");
				case 2:
					var v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var h1 = h.h;
		var k_h = h1;
		var k_keys = Object.keys(h1);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			h2.h[k] = h.h[k];
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	,error: function(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw haxe_Exception.thrown(e);
		} else {
			throw haxe_Exception.thrown(e);
		}
	}
	,rethrow: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,resolve: function(id) {
		var l = this.locals.h[id];
		if(l != null) {
			return l.r;
		}
		var v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			var e = hscript_Error.EUnknownVariable(id);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var c = e.c;
			switch(c._hx_index) {
			case 0:
				var v = c.v;
				return v;
			case 1:
				var f = c.f;
				return f;
			case 2:
				var s = c.s;
				return s;
			}
			break;
		case 1:
			var id = e.v;
			return this.resolve(id);
		case 2:
			var _g = e.t;
			var n = e.n;
			var e1 = e.e;
			this.declared.push({ n : n, old : this.locals.h[n]});
			var this1 = this.locals;
			var value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			var e1 = e.e;
			return this.expr(e1);
		case 4:
			var exprs = e.e;
			var old = this.declared.length;
			var v = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e1 = exprs[_g];
				++_g;
				v = this.expr(e1);
			}
			this.restore(old);
			return v;
		case 5:
			var e1 = e.e;
			var f = e.f;
			return this.get(this.expr(e1),f);
		case 6:
			var op = e.op;
			var e1 = e.e1;
			var e2 = e.e2;
			var fop = this.binops.h[op];
			if(fop == null) {
				var e3 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e3);
			}
			return fop(e1,e2);
		case 7:
			var op = e.op;
			var prefix = e.prefix;
			var e1 = e.e;
			switch(op) {
			case "!":
				return this.expr(e1) != true;
			case "++":
				return this.increment(e1,prefix,1);
			case "-":
				return -this.expr(e1);
			case "--":
				return this.increment(e1,prefix,-1);
			case "~":
				return ~this.expr(e1);
			default:
				var e1 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e1);
			}
			break;
		case 8:
			var e1 = e.e;
			var params = e.params;
			var args = [];
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				args.push(this.expr(p));
			}
			if(e1._hx_index == 5) {
				var e2 = e1.e;
				var f = e1.f;
				var obj = this.expr(e2);
				if(obj == null) {
					var e2 = hscript_Error.EInvalidAccess(f);
					throw haxe_Exception.thrown(e2);
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e1),args);
			}
			break;
		case 9:
			var econd = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else if(e2 == null) {
				return null;
			} else {
				return this.expr(e2);
			}
			break;
		case 10:
			var econd = e.cond;
			var e1 = e.e;
			this.whileLoop(econd,e1);
			return null;
		case 11:
			var v = e.v;
			var it = e.it;
			var e1 = e.e;
			this.forLoop(v,it,e1);
			return null;
		case 12:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SBreak);
		case 13:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SContinue);
		case 14:
			var _g = e.ret;
			var params = e.args;
			var fexpr = e.e;
			var name = e.name;
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f = function(args) {
				if((args == null ? 0 : args.length) != params.length) {
					if(args.length < minParams) {
						var str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						var e = hscript_Error.ECustom(str);
						throw haxe_Exception.thrown(e);
					}
					var args2 = [];
					var extraParams = args.length - minParams;
					var pos = 0;
					var _g = 0;
					while(_g < params.length) {
						var p = params[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				var old = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					me.locals.h[params[i].name] = { r : args[i]};
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						me.locals = old;
						me.depth = depth;
						throw haxe_Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old;
				me.depth = depth;
				return r;
			};
			var f1 = Reflect.makeVarArgs(f);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f1;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					var ref = { r : f1};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f1;
		case 15:
			var e1 = e.e;
			this.returnValue = e1 == null ? null : this.expr(e1);
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SReturn);
		case 16:
			var e1 = e.e;
			var index = e.index;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr = e.e;
			var tmp;
			if(arr.length > 0) {
				var _g = arr[0];
				if(_g._hx_index == 6) {
					var _g1 = _g.e1;
					var _g1 = _g.e2;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					if(e1._hx_index == 6) {
						if(e1.op == "=>") {
							var eKey = e1.e1;
							var eValue = e1.e2;
							var key = this.expr(eKey);
							var value = this.expr(eValue);
							isAllString = isAllString && typeof(key) == "string";
							isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
							isAllObject = isAllObject && Reflect.isObject(key);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key);
							keys.push(key);
							values.push(value);
						} else {
							throw haxe_Exception.thrown("=> expected");
						}
					} else {
						throw haxe_Exception.thrown("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw haxe_Exception.thrown("Inconsistent key types");
				}
				var _g = 0;
				var _g1 = keys.length;
				while(_g < _g1) {
					var n = _g++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n],values[n]);
				}
				return map;
			} else {
				var a = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					a.push(this.expr(e1));
				}
				return a;
			}
			break;
		case 18:
			var cl = e.cl;
			var params1 = e.params;
			var a = [];
			var _g = 0;
			while(_g < params1.length) {
				var e1 = params1[_g];
				++_g;
				a.push(this.expr(e1));
			}
			return this.cnew(cl,a);
		case 19:
			var e1 = e.e;
			throw haxe_Exception.thrown(this.expr(e1));
		case 20:
			var _g = e.t;
			var e1 = e.e;
			var n = e.v;
			var ecatch = e.ecatch;
			var old = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v = this.expr(e1);
				this.restore(old);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					this.inTry = oldTry;
					throw haxe_Exception.thrown(err);
				} else {
					var err = _g1;
					this.restore(old);
					this.inTry = oldTry;
					this.declared.push({ n : n, old : this.locals.h[n]});
					this.locals.h[n] = { r : err};
					var v = this.expr(ecatch);
					this.restore(old);
					return v;
				}
			}
			break;
		case 21:
			var fl = e.fl;
			var o = { };
			var _g = 0;
			while(_g < fl.length) {
				var f = fl[_g];
				++_g;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			var econd = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else {
				return this.expr(e2);
			}
			break;
		case 23:
			var e1 = e.e;
			var cases = e.cases;
			var def = e.defaultExpr;
			var val = this.expr(e1);
			var match = false;
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var _g1 = 0;
				var _g2 = c.values;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			var econd = e.cond;
			var e1 = e.e;
			this.doWhileLoop(econd,e1);
			return null;
		case 25:
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.expr(e1);
		case 26:
			var _g = e.t;
			var e1 = e.e;
			return this.expr(e1);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var err = _g1;
				switch(err._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					throw haxe_Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $getIterator(v);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(v.hasNext == null || v.next == null) {
			var e = hscript_Error.EInvalidIterator(v);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			var this1 = this.locals;
			var value = { r : it1.next()};
			this1.h[n] = value;
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
		}
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__:"hscript.Token",__constructs__:null
	,TEof: {_hx_name:"TEof",_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TConst",$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TId",$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TOp",$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_name:"TPOpen",_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_name:"TPClose",_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_name:"TBrOpen",_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_name:"TBrClose",_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_name:"TDot",_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_name:"TComma",_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_name:"TSemicolon",_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_name:"TBkOpen",_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_name:"TBkClose",_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_name:"TQuestion",_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_name:"TDoubleDot",_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TMeta",$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TPrepro",$_.__params__ = ["s"],$_)
};
hscript_Token.__constructs__ = [hscript_Token.TEof,hscript_Token.TConst,hscript_Token.TId,hscript_Token.TOp,hscript_Token.TPOpen,hscript_Token.TPClose,hscript_Token.TBrOpen,hscript_Token.TBrClose,hscript_Token.TDot,hscript_Token.TComma,hscript_Token.TSemicolon,hscript_Token.TBkOpen,hscript_Token.TBkClose,hscript_Token.TQuestion,hscript_Token.TDoubleDot,hscript_Token.TMeta,hscript_Token.TPrepro];
var hscript_Parser = function() {
	this.uid = 0;
	this.preprocesorValues = new haxe_ds_StringMap();
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"],["->"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = priorities.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.h[x] = i;
			if(i == 9) {
				this.opRightAssoc.h[x] = true;
			}
		}
	}
	var x = "!";
	this.opPriority.h[x] = x == "++" || x == "--" ? -1 : -2;
	var x = "++";
	this.opPriority.h[x] = x == "++" || x == "--" ? -1 : -2;
	var x = "--";
	this.opPriority.h[x] = x == "++" || x == "--" ? -1 : -2;
	var x = "~";
	this.opPriority.h[x] = x == "++" || x == "--" ? -1 : -2;
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,preprocesorValues: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,resumeErrors: null
	,input: null
	,readPos: null
	,char: null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,error: function(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
	}
	,invalidChar: function(c) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidChar(c));
		}
	}
	,initParser: function(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		var _g = 0;
		var _g1 = this.opChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g = 0;
		var _g1 = this.identChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		this.readPos = 0;
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		var err = hscript_Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
		return null;
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,ensureToken: function(tk) {
		var t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	,maybe: function(tk) {
		var t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			var id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		if(e == null) {
			return false;
		}
		switch(e._hx_index) {
		case 2:
			var _g = e.n;
			var t = e.t;
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t._hx_index == 2) {
					var _g = t.fields;
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			var _g = e.e;
			return true;
		case 6:
			var _g = e.op;
			var _g = e.e1;
			var e1 = e.e2;
			return this.isBlock(e1);
		case 7:
			var _g = e.op;
			var prefix = e.prefix;
			var e1 = e.e;
			if(!prefix) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 9:
			var _g = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			if(e2 != null) {
				return this.isBlock(e2);
			} else {
				return this.isBlock(e1);
			}
			break;
		case 10:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 11:
			var _g = e.v;
			var _g = e.it;
			var e1 = e.e;
			return this.isBlock(e1);
		case 14:
			var _g = e.args;
			var _g = e.name;
			var _g = e.ret;
			var e1 = e.e;
			return this.isBlock(e1);
		case 15:
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 20:
			var _g = e.e;
			var _g = e.v;
			var _g = e.t;
			var e1 = e.ecatch;
			return this.isBlock(e1);
		case 21:
			var _g = e.fl;
			return true;
		case 23:
			var _g = e.e;
			var _g = e.cases;
			var _g = e.defaultExpr;
			return true;
		case 24:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 25:
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.isBlock(e1);
		default:
			return false;
		}
	}
	,parseFullExpr: function(exprs) {
		var e = this.parseExpr();
		exprs.push(e);
		var tk = this.token();
		while(true) {
			var tmp;
			if(tk == hscript_Token.TComma && e != null) {
				if(e._hx_index == 2) {
					var _g = e.n;
					var _g1 = e.t;
					var _g2 = e.e;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	,parseObject: function(p1) {
		var fl = [];
		_hx_loop1: while(true) {
			var tk = this.token();
			var id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					var c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						var s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				var c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				var id = tk.s;
				var e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				var op = tk.s;
				if(op == "-") {
					var start = 0;
					var e = this.parseExpr();
					if(e == null) {
						return this.makeUnop(op,e);
					}
					if(e._hx_index == 0) {
						var _g = e.c;
						switch(_g._hx_index) {
						case 0:
							var i = _g.v;
							return hscript_Expr.EConst(hscript_Const.CInt(-i));
						case 1:
							var f = _g.f;
							return hscript_Expr.EConst(hscript_Const.CFloat(-f));
						default:
							return this.makeUnop(op,e);
						}
					} else {
						return this.makeUnop(op,e);
					}
				}
				if(this.opPriority.h[op] < 0) {
					return this.makeUnop(op,this.parseExpr());
				}
				return this.unexpected(tk);
			case 4:
				tk = this.token();
				if(tk == hscript_Token.TPClose) {
					var t = this.token();
					if(!Type.enumEq(t,hscript_Token.TOp("->"))) {
						this.unexpected(t);
					}
					var eret = this.parseExpr();
					return hscript_Expr.EFunction([],hscript_Expr.EReturn(eret));
				}
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				var e = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript_Expr.EParent(e));
					case 9:
						if(e._hx_index == 1) {
							var v = e.v;
							return this.parseLambda([{ name : v}],0);
						}
						break;
					case 14:
						var t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript_Expr.ECheckType(e,t));
							case 9:
								if(e._hx_index == 1) {
									var v = e.v;
									return this.parseLambda([{ name : v, t : t}],0);
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						var c = tk.c;
						if(this.allowJSON) {
							if(c._hx_index == 2) {
								var _g = c.s;
								var tk2 = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk2,_this.head);
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						} else {
							var _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						}
						break;
					case 2:
						var _g = tk.s;
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						if(tk2 != null) {
							if(tk2._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
					}
				}
				var a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript_Token.TBrClose || this.resumeErrors && tk == hscript_Token.TEof) {
						break;
					}
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				var a = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose && (!this.resumeErrors || tk != hscript_Token.TEof)) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					a.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a.length == 1 && a[0] != null) {
					var _g = a[0];
					switch(_g._hx_index) {
					case 10:
						var _g1 = _g.cond;
						var _g1 = _g.e;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 11:
						var _g1 = _g.v;
						var _g1 = _g.it;
						var _g1 = _g.e;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 24:
						var _g1 = _g.cond;
						var _g1 = _g.e;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a));
			case 15:
				var id = tk.s;
				if(this.allowMetadata) {
					var args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	,parseLambda: function(args,pmin) {
		_hx_loop1: while(true) {
			var id = this.getIdent();
			var t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		var t = this.token();
		if(!Type.enumEq(t,hscript_Token.TOp("->"))) {
			this.unexpected(t);
		}
		var eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				var _g = this.token();
				if(_g == null) {
					var tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						var tk1 = _g;
						this.unexpected(tk1);
					}
				}
			}
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		if(e == null) {
			return null;
		}
		var edef;
		switch(e._hx_index) {
		case 3:
			var e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			var _g = e.e;
			if(_g.length == 1) {
				var e1 = _g[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var cond = e.cond;
			var e1 = e.e1;
			var e2 = e.e2;
			edef = e2 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			var cond = e.cond;
			var e2 = e.e;
			edef = hscript_Expr.EWhile(cond,this.mapCompr(tmp,e2));
			break;
		case 11:
			var v = e.v;
			var it = e.it;
			var e2 = e.e;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 24:
			var cond = e.cond;
			var e2 = e.e;
			edef = hscript_Expr.EDoWhile(cond,this.mapCompr(tmp,e2));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		switch(e._hx_index) {
		case 6:
			var bop = e.op;
			var e1 = e.e1;
			var e2 = e.e2;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e1 = e.cond;
			var e2 = e.e1;
			var e3 = e.e2;
			return hscript_Expr.ETernary(this.makeUnop(op,e1),e2,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript_Expr.EBinop(op,e1,e);
		}
		switch(e._hx_index) {
		case 6:
			var op2 = e.op;
			var e2 = e.e1;
			var e3 = e.e2;
			if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e2 = e.cond;
			var e3 = e.e1;
			var e4 = e.e2;
			if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e2),e3,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("in"))) {
				this.unexpected(t);
			}
			var eiter = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e);
		case "function":
			var tk = this.token();
			var name = null;
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else if(tk._hx_index == 2) {
				var id = tk.s;
				name = id;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			var inf = this.parseFunctionDecl();
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var cond = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript_Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				if(semic) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head);
				}
			}
			return hscript_Expr.EIf(cond,e1,e2);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			var a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
						break _hx_loop1;
					}
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk = this.token();
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			var e = tk == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e);
		case "switch":
			var e = this.parseExpr();
			var def = null;
			var cases = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			_hx_loop2: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								var e1 = this.parseExpr();
								c.values.push(e1);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
									break;
								} else {
									switch(tk._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop3;
									default:
										this.unexpected(tk);
										break _hx_loop3;
									}
								}
							}
							var exprs = [];
							_hx_loop4: while(true) {
								tk = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							var t = this.token();
							if(t != hscript_Token.TDoubleDot) {
								this.unexpected(t);
							}
							var exprs1 = [];
							_hx_loop5: while(true) {
								tk = this.token();
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
								if(tk == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk);
						break _hx_loop2;
					}
				}
			}
			return hscript_Expr.ESwitch(e,cases,def);
		case "throw":
			var e = this.parseExpr();
			return hscript_Expr.EThrow(e);
		case "try":
			var e = this.parseExpr();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("catch"))) {
				this.unexpected(t);
			}
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			var t = null;
			if(this.allowTypes) {
				t = this.parseType();
			} else {
				var t1 = this.token();
				if(!Type.enumEq(t1,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t1);
				}
			}
			var t1 = this.token();
			if(t1 != hscript_Token.TPClose) {
				this.unexpected(t1);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e,vname,t,ec);
		case "var":
			var ident = this.getIdent();
			var tk = this.token();
			var t = null;
			if(tk == hscript_Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk = this.token();
			}
			var e = null;
			if(Type.enumEq(tk,hscript_Token.TOp("="))) {
				e = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			return hscript_Expr.EVar(ident,t,e);
		case "while":
			var econd = this.parseExpr();
			var e = this.parseExpr();
			return hscript_Expr.EWhile(econd,e);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				var op = tk.s;
				if(op == "->") {
					switch(e1._hx_index) {
					case 1:
						var i = e1.v;
						var eret = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
					case 3:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i = _hx_tmp.v;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
						}
						break;
					case 26:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i = _hx_tmp.v;
							var t = e1.t;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i, t : t}],hscript_Expr.EReturn(eret));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				if(this.opPriority.h[op] == -1) {
					var tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							var _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				var field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				var e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e2,e3);
			default:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	,parseFunctionArgs: function() {
		var args = [];
		var tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var done = false;
			while(!done) {
				var name = null;
				var opt = false;
				if(tk != null) {
					if(tk._hx_index == 13) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					var id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				var arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 9:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	,parseFunctionDecl: function() {
		var t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		var args = this.parseFunctionArgs();
		var ret = null;
		if(this.allowTypes) {
			var tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	,parsePath: function() {
		var path = [this.getIdent()];
		while(true) {
			var t = this.token();
			if(t != hscript_Token.TDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	,parseType: function() {
		var _gthis = this;
		var t = this.token();
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				var v = t.s;
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				var path = this.parsePath();
				var params = null;
				t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					var op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									var op = t.s;
									if(op == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op,0) == 62) {
										var _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop1;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
					}
				} else {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				var a = this.token();
				var b = this.token();
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(b,_this.head);
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(a,_this.head);
				var withReturn = function(args) {
					var _g = _gthis.token();
					if(_g == null) {
						var t = _g;
						_gthis.unexpected(t);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							var t = _g;
							_gthis.unexpected(t);
						}
					} else {
						var t = _g;
						_gthis.unexpected(t);
					}
					return hscript_CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					var t1 = this.parseType();
					var _g = this.token();
					if(_g == null) {
						var t2 = _g;
						return this.unexpected(t2);
					} else {
						switch(_g._hx_index) {
						case 5:
							return this.parseTypeNext(hscript_CType.CTParent(t1));
						case 9:
							var args = [t1];
							while(true) {
								args.push(this.parseType());
								if(!this.maybe(hscript_Token.TComma)) {
									break;
								}
							}
							var t1 = this.token();
							if(t1 != hscript_Token.TPClose) {
								this.unexpected(t1);
							}
							return withReturn(args);
						default:
							var t1 = _g;
							return this.unexpected(t1);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						var _g = a.s;
						if(b == null) {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						} else if(b._hx_index == 14) {
							var _g = [];
							var _g1 = 0;
							var _g2 = this.parseFunctionArgs();
							while(_g1 < _g2.length) {
								var arg = _g2[_g1];
								++_g1;
								var _g3 = arg.value;
								if(_g3 != null) {
									var v = _g3;
									if(!this.resumeErrors) {
										throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
							}
							var args = _g;
							return withReturn(args);
						} else {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						}
						break;
					case 5:
						var _g = [];
						var _g1 = 0;
						var _g2 = this.parseFunctionArgs();
						while(_g1 < _g2.length) {
							var arg = _g2[_g1];
							++_g1;
							var _g3 = arg.value;
							if(_g3 != null) {
								var v = _g3;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
						}
						var args = _g;
						return withReturn(args);
					default:
						var t1 = this.parseType();
						var _g = this.token();
						if(_g == null) {
							var t2 = _g;
							return this.unexpected(t2);
						} else {
							switch(_g._hx_index) {
							case 5:
								return this.parseTypeNext(hscript_CType.CTParent(t1));
							case 9:
								var args = [t1];
								while(true) {
									args.push(this.parseType());
									if(!this.maybe(hscript_Token.TComma)) {
										break;
									}
								}
								var t1 = this.token();
								if(t1 != hscript_Token.TPClose) {
									this.unexpected(t1);
								}
								return withReturn(args);
							default:
								var t1 = _g;
								return this.unexpected(t1);
							}
						}
					}
				}
				break;
			case 6:
				var fields = [];
				var meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							var _g = t.s;
							if(_g == "var") {
								var name = this.getIdent();
								var t1 = this.token();
								if(t1 != hscript_Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								var t2 = this.token();
								if(t2 != hscript_Token.TSemicolon) {
									this.unexpected(t2);
								}
							} else {
								var name1 = _g;
								var t3 = this.token();
								if(t3 != hscript_Token.TDoubleDot) {
									this.unexpected(t3);
								}
								fields.push({ name : name1, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 15:
							var name2 = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name2, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			var op = tk.s;
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2._hx_index == 1) {
			var _g = t2.ret;
			var args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	,parseModule: function(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		var decls = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	,parseMetadata: function() {
		var meta = [];
		while(true) {
			var tk = this.token();
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 15) {
				var name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				break;
			}
		}
		return meta;
	}
	,parseParams: function() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	,parseModuleDecl: function() {
		var meta = this.parseMetadata();
		var ident = this.getIdent();
		var isPrivate = false;
		var isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			var name = this.getIdent();
			var params = this.parseParams();
			var extend = null;
			var implement = [];
			_hx_loop2: while(true) {
				var t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(t,_this1.head);
						break _hx_loop2;
					}
				} else {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t,_this2.head);
					break;
				}
			}
			var fields = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			var path = [this.getIdent()];
			var star = false;
			while(true) {
				var t = this.token();
				if(t != hscript_Token.TDot) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				}
				t = this.token();
				if(t == null) {
					this.unexpected(t);
				} else {
					switch(t._hx_index) {
					case 2:
						var id = t.s;
						path.push(id);
						break;
					case 3:
						if(t.s == "*") {
							star = true;
						} else {
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			}
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			var path = this.parsePath();
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DPackage(path);
		case "typedef":
			var name = this.getIdent();
			var params = this.parseParams();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TOp("="))) {
				this.unexpected(t);
			}
			var t = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name, meta : meta, params : params, isPrivate : isPrivate, t : t});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	,parseField: function() {
		var meta = this.parseMetadata();
		var access = [];
		_hx_loop1: while(true) {
			var id = this.getIdent();
			switch(id) {
			case "function":
				var name = this.getIdent();
				var inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				var name1 = this.getIdent();
				var get = null;
				var set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					var t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					var t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				var type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				var expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t2 = this.token();
						if(t2 != hscript_Token.TSemicolon) {
							this.unexpected(t2);
						}
					}
				} else {
					var tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							var _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t3 = this.token();
						if(t3 != hscript_Token.TSemicolon) {
							this.unexpected(t3);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	,readChar: function() {
		return this.input.charCodeAt(this.readPos++);
	}
	,readString: function(until) {
		var c = 0;
		var b_b = "";
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			var c = this.input.charCodeAt(this.readPos++);
			if(c != c) {
				this.line = old;
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c);
					break;
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c);
			}
		}
		return b_b;
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript_Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					var id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = char - 48;
					var exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = (char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						var tk = this.token();
						var pow = null;
						if(tk == null) {
							var _this1 = this.tokens;
							_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								var _g = tk.c;
								if(_g._hx_index == 0) {
									var e = _g.v;
									pow = e;
								} else {
									var _this2 = this.tokens;
									_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										var _this3 = this.tokens;
										_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
									} else if(tk._hx_index == 1) {
										var _g1 = tk.c;
										if(_g1._hx_index == 0) {
											var e1 = _g1.v;
											pow = -e1;
										} else {
											var _this4 = this.tokens;
											_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
										}
									} else {
										var _this5 = this.tokens;
										_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
									}
								} else {
									var _this6 = this.tokens;
									_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
								}
								break;
							default:
								var _this7 = this.tokens;
								_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						var n2 = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this.char = char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					var id1 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id1);
						}
						id1 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					var op = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char]) {
							this.char = char;
							return hscript_Token.TOp(op);
						}
						var pop = op;
						op += String.fromCodePoint(char);
						if(!Object.prototype.hasOwnProperty.call(this.opPriority.h,op) && Object.prototype.hasOwnProperty.call(this.opPriority.h,pop)) {
							if(op == "//" || op == "/*") {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(pop);
						}
					}
				}
				if(this.idents[char]) {
					var id2 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id2);
						}
						id2 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	,preprocValue: function(id) {
		return this.preprocesorValues.h[id];
	}
	,preprocStack: null
	,parsePreproCond: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				var id = tk.s;
				return hscript_Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript_Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	,evalPreproCond: function(e) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			var e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			var _g = e.e1;
			var _g1 = e.e2;
			switch(e.op) {
			case "&&":
				var e1 = _g;
				var e2 = _g1;
				if(this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				var e1 = _g;
				var e2 = _g1;
				if(!this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
				}
				return false;
			}
			break;
		case 7:
			var _g = e.prefix;
			if(e.op == "!") {
				var e1 = e.e;
				return !this.evalPreproCond(e1);
			} else {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
			}
			return false;
		}
	}
	,preprocess: function(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			var e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	,skipTokens: function() {
		var spos = this.preprocStack.length - 1;
		var obj = this.preprocStack[spos];
		var pos = this.readPos;
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	,tokenComment: function(op,char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			while(true) {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
					}
					break;
				}
				if(char == 47) {
					break;
				}
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c._hx_index) {
		case 0:
			var v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c.s;
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			var c = t.c;
			return this.constString(c);
		case 2:
			var s = t.s;
			return s;
		case 3:
			var s = t.s;
			return s;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t.s;
			return "@" + id;
		case 16:
			var id = t.s;
			return "#" + id;
		}
	}
	,__class__: hscript_Parser
};
var hscript_Tools = function() { };
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = "hscript.Tools";
hscript_Tools.iter = function(e,f) {
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		break;
	case 1:
		var _g = e.v;
		break;
	case 2:
		var _g = e.n;
		var _g = e.t;
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 3:
		var e1 = e.e;
		f(e1);
		break;
	case 4:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 5:
		var _g = e.f;
		var e1 = e.e;
		f(e1);
		break;
	case 6:
		var _g = e.op;
		var e1 = e.e1;
		var e2 = e.e2;
		f(e1);
		f(e2);
		break;
	case 7:
		var _g = e.op;
		var _g = e.prefix;
		var e1 = e.e;
		f(e1);
		break;
	case 8:
		var e1 = e.e;
		var args = e.params;
		f(e1);
		var _g = 0;
		while(_g < args.length) {
			var a = args[_g];
			++_g;
			f(a);
		}
		break;
	case 9:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		f(c);
		f(e1);
		if(e2 != null) {
			f(e2);
		}
		break;
	case 10:
		var c = e.cond;
		var e1 = e.e;
		f(c);
		f(e1);
		break;
	case 11:
		var _g = e.v;
		var it = e.it;
		var e1 = e.e;
		f(it);
		f(e1);
		break;
	case 12:case 13:
		break;
	case 14:
		var _g = e.args;
		var _g = e.name;
		var _g = e.ret;
		var e1 = e.e;
		f(e1);
		break;
	case 15:
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 16:
		var e1 = e.e;
		var i = e.index;
		f(e1);
		f(i);
		break;
	case 17:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 18:
		var _g = e.cl;
		var el = e.params;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 19:
		var e1 = e.e;
		f(e1);
		break;
	case 20:
		var _g = e.v;
		var _g = e.t;
		var e1 = e.e;
		var c = e.ecatch;
		f(e1);
		f(c);
		break;
	case 21:
		var fl = e.fl;
		var _g = 0;
		while(_g < fl.length) {
			var fi = fl[_g];
			++_g;
			f(fi.e);
		}
		break;
	case 22:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		f(c);
		f(e1);
		f(e2);
		break;
	case 23:
		var e1 = e.e;
		var cases = e.cases;
		var def = e.defaultExpr;
		f(e1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			var _g1 = 0;
			var _g2 = c.values;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 24:
		var c = e.cond;
		var e1 = e.e;
		f(c);
		f(e1);
		break;
	case 25:
		var name = e.name;
		var args = e.args;
		var e1 = e.e;
		if(args != null) {
			var _g = 0;
			while(_g < args.length) {
				var a = args[_g];
				++_g;
				f(a);
			}
		}
		f(e1);
		break;
	case 26:
		var _g = e.t;
		var e1 = e.e;
		f(e1);
		break;
	}
};
hscript_Tools.map = function(e,f) {
	var edef;
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		edef = e;
		break;
	case 1:
		var _g = e.v;
		edef = e;
		break;
	case 2:
		var n = e.n;
		var t = e.t;
		var e1 = e.e;
		edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
		break;
	case 3:
		var e1 = e.e;
		edef = hscript_Expr.EParent(f(e1));
		break;
	case 4:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EBlock(_g);
		break;
	case 5:
		var e1 = e.e;
		var fi = e.f;
		edef = hscript_Expr.EField(f(e1),fi);
		break;
	case 6:
		var op = e.op;
		var e1 = e.e1;
		var e2 = e.e2;
		edef = hscript_Expr.EBinop(op,f(e1),f(e2));
		break;
	case 7:
		var op = e.op;
		var pre = e.prefix;
		var e1 = e.e;
		edef = hscript_Expr.EUnop(op,pre,f(e1));
		break;
	case 8:
		var e1 = e.e;
		var args = e.params;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			_g.push(f(a));
		}
		edef = hscript_Expr.ECall(edef1,_g);
		break;
	case 9:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		edef = hscript_Expr.EIf(f(c),f(e1),e2 != null ? f(e2) : null);
		break;
	case 10:
		var c = e.cond;
		var e1 = e.e;
		edef = hscript_Expr.EWhile(f(c),f(e1));
		break;
	case 11:
		var v = e.v;
		var it = e.it;
		var e1 = e.e;
		edef = hscript_Expr.EFor(v,f(it),f(e1));
		break;
	case 12:case 13:
		edef = e;
		break;
	case 14:
		var args = e.args;
		var e1 = e.e;
		var name = e.name;
		var t = e.ret;
		edef = hscript_Expr.EFunction(args,f(e1),name,t);
		break;
	case 15:
		var e1 = e.e;
		edef = hscript_Expr.EReturn(e1 != null ? f(e1) : null);
		break;
	case 16:
		var e1 = e.e;
		var i = e.index;
		edef = hscript_Expr.EArray(f(e1),f(i));
		break;
	case 17:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EArrayDecl(_g);
		break;
	case 18:
		var cl = e.cl;
		var el = e.params;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.ENew(cl,_g);
		break;
	case 19:
		var e1 = e.e;
		edef = hscript_Expr.EThrow(f(e1));
		break;
	case 20:
		var e1 = e.e;
		var v = e.v;
		var t = e.t;
		var c = e.ecatch;
		edef = hscript_Expr.ETry(f(e1),v,t,f(c));
		break;
	case 21:
		var fl = e.fl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < fl.length) {
			var fi = fl[_g1];
			++_g1;
			_g.push({ name : fi.name, e : f(fi.e)});
		}
		edef = hscript_Expr.EObject(_g);
		break;
	case 22:
		var c = e.cond;
		var e1 = e.e1;
		var e2 = e.e2;
		edef = hscript_Expr.ETernary(f(c),f(e1),f(e2));
		break;
	case 23:
		var e1 = e.e;
		var cases = e.cases;
		var def = e.defaultExpr;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = c.values;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				_g2.push(f(v));
			}
			_g.push({ values : _g2, expr : f(c.expr)});
		}
		edef = hscript_Expr.ESwitch(edef1,_g,def == null ? null : f(def));
		break;
	case 24:
		var c = e.cond;
		var e1 = e.e;
		edef = hscript_Expr.EDoWhile(f(c),f(e1));
		break;
	case 25:
		var name = e.name;
		var args = e.args;
		var e1 = e.e;
		var edef1;
		if(args == null) {
			edef1 = null;
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(f(a));
			}
			edef1 = _g;
		}
		edef = hscript_Expr.EMeta(name,edef1,f(e1));
		break;
	case 26:
		var e1 = e.e;
		var t = e.t;
		edef = hscript_Expr.ECheckType(f(e1),t);
		break;
	}
	return edef;
};
hscript_Tools.expr = function(e) {
	return e;
};
hscript_Tools.mk = function(e,p) {
	return e;
};
var hx_files_GlobPatterns = function() { };
$hxClasses["hx.files.GlobPatterns"] = hx_files_GlobPatterns;
hx_files_GlobPatterns.__name__ = "hx.files.GlobPatterns";
hx_files_GlobPatterns.toEReg = function(globPattern,regexOptions) {
	if(regexOptions == null) {
		regexOptions = "";
	}
	var str = hx_files_GlobPatterns.toRegEx(globPattern);
	var opt = regexOptions;
	if(opt == null) {
		opt = "";
	}
	if(str == null) {
		return null;
	} else {
		return new EReg(str,opt);
	}
};
hx_files_GlobPatterns.toPattern = function(globPattern,options) {
	var str = hx_files_GlobPatterns.toRegEx(globPattern);
	if(str == null) {
		return null;
	} else {
		return hx_strings_Pattern.compile(str,options);
	}
};
hx_files_GlobPatterns.toRegEx = function(globPattern) {
	if(globPattern == null || globPattern.length == 0) {
		return globPattern;
	}
	var sb = new hx_strings_StringBuilder();
	sb.addChar(94);
	var chars = hx_strings_Strings.toChars(globPattern);
	var charsLenMinus1 = chars.length - 1;
	var chPrev = -1;
	var groupDepth = 0;
	var idx = -1;
	while(idx < charsLenMinus1) {
		++idx;
		var ch = chars[idx];
		switch(ch) {
		case 33:
			if(chPrev == 91) {
				sb.addChar(94);
			} else {
				sb.addChar(ch);
			}
			break;
		case 36:
			sb.add("\\$");
			break;
		case 40:
			sb.add("\\(");
			break;
		case 41:
			sb.add("\\)");
			break;
		case 42:
			if(chars[idx + 1] == 42) {
				if(chars[idx + 2] == 47) {
					if(chars[idx + 3] == 42) {
						sb.add(".*");
						idx += 3;
					} else {
						sb.add("(.*[\\/\\\\])?");
						idx += 2;
						ch = 47;
					}
				} else {
					sb.add(".*");
					++idx;
				}
			} else {
				sb.add("[^\\\\^\\/]*");
			}
			break;
		case 44:
			if(chPrev == 92) {
				sb.add("\\,");
			} else {
				sb.addChar(groupDepth > 0 ? 124 : 44);
			}
			break;
		case 46:
			sb.add("\\.");
			break;
		case 47:
			sb.add("[\\/\\\\]");
			break;
		case 63:
			if(chPrev == 92) {
				sb.add("\\?");
			} else {
				sb.add("[^\\\\^\\/]");
			}
			break;
		case 92:
			if(chPrev == 92) {
				sb.add("\\\\");
			}
			break;
		case 123:
			if(chPrev == 92) {
				sb.add("\\{");
			} else {
				++groupDepth;
				sb.addChar(40);
			}
			break;
		case 125:
			if(chPrev == 92) {
				sb.add("\\}");
			} else {
				--groupDepth;
				sb.addChar(41);
			}
			break;
		default:
			if(chPrev == 92) {
				sb.addChar(92);
			}
			sb.addChar(ch);
		}
		chPrev = ch;
	}
	sb.addChar(36);
	return sb.toString();
};
var hx_strings_AnyAsString = {};
hx_strings_AnyAsString.fromBool = function(value) {
	if(value) {
		return "true";
	} else {
		return "false";
	}
};
hx_strings_AnyAsString.fromAny = function(value) {
	return Std.string(value);
};
var hx_strings__$Char_CharCaseMapper = function() {
	this.mapL2U = new haxe_ds_IntMap();
	this.mapU2L = new haxe_ds_IntMap();
	this._addCaseMapping(97,65);
	this._addCaseMapping(98,66);
	this._addCaseMapping(99,67);
	this._addCaseMapping(100,68);
	this._addCaseMapping(101,69);
	this._addCaseMapping(102,70);
	this._addCaseMapping(103,71);
	this._addCaseMapping(104,72);
	this._addCaseMapping(105,73);
	this._addCaseMapping(106,74);
	this._addCaseMapping(107,75);
	this._addCaseMapping(108,76);
	this._addCaseMapping(109,77);
	this._addCaseMapping(110,78);
	this._addCaseMapping(111,79);
	this._addCaseMapping(112,80);
	this._addCaseMapping(113,81);
	this._addCaseMapping(114,82);
	this._addCaseMapping(115,83);
	this._addCaseMapping(116,84);
	this._addCaseMapping(117,85);
	this._addCaseMapping(118,86);
	this._addCaseMapping(119,87);
	this._addCaseMapping(120,88);
	this._addCaseMapping(121,89);
	this._addCaseMapping(122,90);
	this._addCaseMapping(224,192);
	this._addCaseMapping(225,193);
	this._addCaseMapping(226,194);
	this._addCaseMapping(227,195);
	this._addCaseMapping(228,196);
	this._addCaseMapping(229,197);
	this._addCaseMapping(230,198);
	this._addCaseMapping(231,199);
	this._addCaseMapping(232,200);
	this._addCaseMapping(233,201);
	this._addCaseMapping(234,202);
	this._addCaseMapping(235,203);
	this._addCaseMapping(236,204);
	this._addCaseMapping(237,205);
	this._addCaseMapping(238,206);
	this._addCaseMapping(239,207);
	this._addCaseMapping(240,208);
	this._addCaseMapping(241,209);
	this._addCaseMapping(242,210);
	this._addCaseMapping(243,211);
	this._addCaseMapping(244,212);
	this._addCaseMapping(245,213);
	this._addCaseMapping(246,214);
	this._addCaseMapping(248,216);
	this._addCaseMapping(249,217);
	this._addCaseMapping(250,218);
	this._addCaseMapping(251,219);
	this._addCaseMapping(252,220);
	this._addCaseMapping(253,221);
	this._addCaseMapping(254,222);
	this._addCaseMapping(255,376);
	this._addCaseMapping(257,256);
	this._addCaseMapping(259,258);
	this._addCaseMapping(261,260);
	this._addCaseMapping(263,262);
	this._addCaseMapping(265,264);
	this._addCaseMapping(267,266);
	this._addCaseMapping(269,268);
	this._addCaseMapping(271,270);
	this._addCaseMapping(273,272);
	this._addCaseMapping(275,274);
	this._addCaseMapping(277,276);
	this._addCaseMapping(279,278);
	this._addCaseMapping(281,280);
	this._addCaseMapping(283,282);
	this._addCaseMapping(285,284);
	this._addCaseMapping(287,286);
	this._addCaseMapping(289,288);
	this._addCaseMapping(291,290);
	this._addCaseMapping(293,292);
	this._addCaseMapping(295,294);
	this._addCaseMapping(297,296);
	this._addCaseMapping(299,298);
	this._addCaseMapping(301,300);
	this._addCaseMapping(303,302);
	this._addCaseMapping(305,73);
	this._addCaseMapping(307,306);
	this._addCaseMapping(309,308);
	this._addCaseMapping(311,310);
	this._addCaseMapping(314,313);
	this._addCaseMapping(316,315);
	this._addCaseMapping(318,317);
	this._addCaseMapping(320,319);
	this._addCaseMapping(322,321);
	this._addCaseMapping(324,323);
	this._addCaseMapping(326,325);
	this._addCaseMapping(328,327);
	this._addCaseMapping(331,330);
	this._addCaseMapping(333,332);
	this._addCaseMapping(335,334);
	this._addCaseMapping(337,336);
	this._addCaseMapping(339,338);
	this._addCaseMapping(341,340);
	this._addCaseMapping(343,342);
	this._addCaseMapping(345,344);
	this._addCaseMapping(347,346);
	this._addCaseMapping(349,348);
	this._addCaseMapping(351,350);
	this._addCaseMapping(353,352);
	this._addCaseMapping(355,354);
	this._addCaseMapping(357,356);
	this._addCaseMapping(359,358);
	this._addCaseMapping(361,360);
	this._addCaseMapping(363,362);
	this._addCaseMapping(365,364);
	this._addCaseMapping(367,366);
	this._addCaseMapping(369,368);
	this._addCaseMapping(371,370);
	this._addCaseMapping(373,372);
	this._addCaseMapping(375,374);
	this._addCaseMapping(378,377);
	this._addCaseMapping(380,379);
	this._addCaseMapping(382,381);
	this._addCaseMapping(387,386);
	this._addCaseMapping(389,388);
	this._addCaseMapping(392,391);
	this._addCaseMapping(396,395);
	this._addCaseMapping(402,401);
	this._addCaseMapping(409,408);
	this._addCaseMapping(417,416);
	this._addCaseMapping(419,418);
	this._addCaseMapping(421,420);
	this._addCaseMapping(424,423);
	this._addCaseMapping(429,428);
	this._addCaseMapping(432,431);
	this._addCaseMapping(436,435);
	this._addCaseMapping(438,437);
	this._addCaseMapping(441,440);
	this._addCaseMapping(445,444);
	this._addCaseMapping(454,452);
	this._addCaseMapping(457,455);
	this._addCaseMapping(460,458);
	this._addCaseMapping(462,461);
	this._addCaseMapping(464,463);
	this._addCaseMapping(466,465);
	this._addCaseMapping(468,467);
	this._addCaseMapping(470,469);
	this._addCaseMapping(472,471);
	this._addCaseMapping(474,473);
	this._addCaseMapping(476,475);
	this._addCaseMapping(479,478);
	this._addCaseMapping(481,480);
	this._addCaseMapping(483,482);
	this._addCaseMapping(485,484);
	this._addCaseMapping(487,486);
	this._addCaseMapping(489,488);
	this._addCaseMapping(491,490);
	this._addCaseMapping(493,492);
	this._addCaseMapping(495,494);
	this._addCaseMapping(499,497);
	this._addCaseMapping(501,500);
	this._addCaseMapping(507,506);
	this._addCaseMapping(509,508);
	this._addCaseMapping(511,510);
	this._addCaseMapping(513,512);
	this._addCaseMapping(515,514);
	this._addCaseMapping(517,516);
	this._addCaseMapping(519,518);
	this._addCaseMapping(521,520);
	this._addCaseMapping(523,522);
	this._addCaseMapping(525,524);
	this._addCaseMapping(527,526);
	this._addCaseMapping(529,528);
	this._addCaseMapping(531,530);
	this._addCaseMapping(533,532);
	this._addCaseMapping(535,534);
	this._addCaseMapping(595,385);
	this._addCaseMapping(596,390);
	this._addCaseMapping(599,394);
	this._addCaseMapping(600,398);
	this._addCaseMapping(601,399);
	this._addCaseMapping(603,400);
	this._addCaseMapping(608,403);
	this._addCaseMapping(611,404);
	this._addCaseMapping(616,407);
	this._addCaseMapping(617,406);
	this._addCaseMapping(623,412);
	this._addCaseMapping(626,413);
	this._addCaseMapping(629,415);
	this._addCaseMapping(643,425);
	this._addCaseMapping(648,430);
	this._addCaseMapping(650,433);
	this._addCaseMapping(651,434);
	this._addCaseMapping(658,439);
	this._addCaseMapping(924,181);
	this._addCaseMapping(940,902);
	this._addCaseMapping(941,904);
	this._addCaseMapping(942,905);
	this._addCaseMapping(943,906);
	this._addCaseMapping(945,913);
	this._addCaseMapping(946,914);
	this._addCaseMapping(947,915);
	this._addCaseMapping(948,916);
	this._addCaseMapping(949,917);
	this._addCaseMapping(950,918);
	this._addCaseMapping(951,919);
	this._addCaseMapping(952,920);
	this._addCaseMapping(953,921);
	this._addCaseMapping(954,922);
	this._addCaseMapping(955,923);
	this._addCaseMapping(956,924);
	this._addCaseMapping(957,925);
	this._addCaseMapping(958,926);
	this._addCaseMapping(959,927);
	this._addCaseMapping(960,928);
	this._addCaseMapping(961,929);
	this._addCaseMapping(963,931);
	this._addCaseMapping(964,932);
	this._addCaseMapping(965,933);
	this._addCaseMapping(966,934);
	this._addCaseMapping(967,935);
	this._addCaseMapping(968,936);
	this._addCaseMapping(969,937);
	this._addCaseMapping(970,938);
	this._addCaseMapping(971,939);
	this._addCaseMapping(972,908);
	this._addCaseMapping(973,910);
	this._addCaseMapping(974,911);
	this._addCaseMapping(995,994);
	this._addCaseMapping(997,996);
	this._addCaseMapping(999,998);
	this._addCaseMapping(1001,1000);
	this._addCaseMapping(1003,1002);
	this._addCaseMapping(1005,1004);
	this._addCaseMapping(1007,1006);
	this._addCaseMapping(1072,1040);
	this._addCaseMapping(1073,1041);
	this._addCaseMapping(1074,1042);
	this._addCaseMapping(1075,1043);
	this._addCaseMapping(1076,1044);
	this._addCaseMapping(1077,1045);
	this._addCaseMapping(1078,1046);
	this._addCaseMapping(1079,1047);
	this._addCaseMapping(1080,1048);
	this._addCaseMapping(1081,1049);
	this._addCaseMapping(1082,1050);
	this._addCaseMapping(1083,1051);
	this._addCaseMapping(1084,1052);
	this._addCaseMapping(1085,1053);
	this._addCaseMapping(1086,1054);
	this._addCaseMapping(1087,1055);
	this._addCaseMapping(1088,1056);
	this._addCaseMapping(1089,1057);
	this._addCaseMapping(1090,1058);
	this._addCaseMapping(1091,1059);
	this._addCaseMapping(1092,1060);
	this._addCaseMapping(1093,1061);
	this._addCaseMapping(1094,1062);
	this._addCaseMapping(1095,1063);
	this._addCaseMapping(1096,1064);
	this._addCaseMapping(1097,1065);
	this._addCaseMapping(1098,1066);
	this._addCaseMapping(1099,1067);
	this._addCaseMapping(1100,1068);
	this._addCaseMapping(1101,1069);
	this._addCaseMapping(1102,1070);
	this._addCaseMapping(1103,1071);
	this._addCaseMapping(1105,1025);
	this._addCaseMapping(1106,1026);
	this._addCaseMapping(1107,1027);
	this._addCaseMapping(1108,1028);
	this._addCaseMapping(1109,1029);
	this._addCaseMapping(1110,1030);
	this._addCaseMapping(1111,1031);
	this._addCaseMapping(1112,1032);
	this._addCaseMapping(1113,1033);
	this._addCaseMapping(1114,1034);
	this._addCaseMapping(1115,1035);
	this._addCaseMapping(1116,1036);
	this._addCaseMapping(1118,1038);
	this._addCaseMapping(1119,1039);
	this._addCaseMapping(1121,1120);
	this._addCaseMapping(1123,1122);
	this._addCaseMapping(1125,1124);
	this._addCaseMapping(1127,1126);
	this._addCaseMapping(1129,1128);
	this._addCaseMapping(1131,1130);
	this._addCaseMapping(1133,1132);
	this._addCaseMapping(1135,1134);
	this._addCaseMapping(1137,1136);
	this._addCaseMapping(1139,1138);
	this._addCaseMapping(1141,1140);
	this._addCaseMapping(1143,1142);
	this._addCaseMapping(1145,1144);
	this._addCaseMapping(1147,1146);
	this._addCaseMapping(1149,1148);
	this._addCaseMapping(1151,1150);
	this._addCaseMapping(1153,1152);
	this._addCaseMapping(1169,1168);
	this._addCaseMapping(1171,1170);
	this._addCaseMapping(1173,1172);
	this._addCaseMapping(1175,1174);
	this._addCaseMapping(1177,1176);
	this._addCaseMapping(1179,1178);
	this._addCaseMapping(1181,1180);
	this._addCaseMapping(1183,1182);
	this._addCaseMapping(1185,1184);
	this._addCaseMapping(1187,1186);
	this._addCaseMapping(1189,1188);
	this._addCaseMapping(1191,1190);
	this._addCaseMapping(1193,1192);
	this._addCaseMapping(1195,1194);
	this._addCaseMapping(1197,1196);
	this._addCaseMapping(1199,1198);
	this._addCaseMapping(1201,1200);
	this._addCaseMapping(1203,1202);
	this._addCaseMapping(1205,1204);
	this._addCaseMapping(1207,1206);
	this._addCaseMapping(1209,1208);
	this._addCaseMapping(1211,1210);
	this._addCaseMapping(1213,1212);
	this._addCaseMapping(1215,1214);
	this._addCaseMapping(1218,1217);
	this._addCaseMapping(1220,1219);
	this._addCaseMapping(1224,1223);
	this._addCaseMapping(1228,1227);
	this._addCaseMapping(1233,1232);
	this._addCaseMapping(1235,1234);
	this._addCaseMapping(1237,1236);
	this._addCaseMapping(1239,1238);
	this._addCaseMapping(1241,1240);
	this._addCaseMapping(1243,1242);
	this._addCaseMapping(1245,1244);
	this._addCaseMapping(1247,1246);
	this._addCaseMapping(1249,1248);
	this._addCaseMapping(1251,1250);
	this._addCaseMapping(1253,1252);
	this._addCaseMapping(1255,1254);
	this._addCaseMapping(1257,1256);
	this._addCaseMapping(1259,1258);
	this._addCaseMapping(1263,1262);
	this._addCaseMapping(1265,1264);
	this._addCaseMapping(1267,1266);
	this._addCaseMapping(1269,1268);
	this._addCaseMapping(1273,1272);
	this._addCaseMapping(1377,1329);
	this._addCaseMapping(1378,1330);
	this._addCaseMapping(1379,1331);
	this._addCaseMapping(1380,1332);
	this._addCaseMapping(1381,1333);
	this._addCaseMapping(1382,1334);
	this._addCaseMapping(1383,1335);
	this._addCaseMapping(1384,1336);
	this._addCaseMapping(1385,1337);
	this._addCaseMapping(1386,1338);
	this._addCaseMapping(1387,1339);
	this._addCaseMapping(1388,1340);
	this._addCaseMapping(1389,1341);
	this._addCaseMapping(1390,1342);
	this._addCaseMapping(1391,1343);
	this._addCaseMapping(1392,1344);
	this._addCaseMapping(1393,1345);
	this._addCaseMapping(1394,1346);
	this._addCaseMapping(1395,1347);
	this._addCaseMapping(1396,1348);
	this._addCaseMapping(1397,1349);
	this._addCaseMapping(1398,1350);
	this._addCaseMapping(1399,1351);
	this._addCaseMapping(1400,1352);
	this._addCaseMapping(1401,1353);
	this._addCaseMapping(1402,1354);
	this._addCaseMapping(1403,1355);
	this._addCaseMapping(1404,1356);
	this._addCaseMapping(1405,1357);
	this._addCaseMapping(1406,1358);
	this._addCaseMapping(1407,1359);
	this._addCaseMapping(1408,1360);
	this._addCaseMapping(1409,1361);
	this._addCaseMapping(1410,1362);
	this._addCaseMapping(1411,1363);
	this._addCaseMapping(1412,1364);
	this._addCaseMapping(1413,1365);
	this._addCaseMapping(1414,1366);
	this._addCaseMapping(4304,4256);
	this._addCaseMapping(4305,4257);
	this._addCaseMapping(4306,4258);
	this._addCaseMapping(4307,4259);
	this._addCaseMapping(4308,4260);
	this._addCaseMapping(4309,4261);
	this._addCaseMapping(4310,4262);
	this._addCaseMapping(4311,4263);
	this._addCaseMapping(4312,4264);
	this._addCaseMapping(4313,4265);
	this._addCaseMapping(4314,4266);
	this._addCaseMapping(4315,4267);
	this._addCaseMapping(4316,4268);
	this._addCaseMapping(4317,4269);
	this._addCaseMapping(4318,4270);
	this._addCaseMapping(4319,4271);
	this._addCaseMapping(4320,4272);
	this._addCaseMapping(4321,4273);
	this._addCaseMapping(4322,4274);
	this._addCaseMapping(4323,4275);
	this._addCaseMapping(4324,4276);
	this._addCaseMapping(4325,4277);
	this._addCaseMapping(4326,4278);
	this._addCaseMapping(4327,4279);
	this._addCaseMapping(4328,4280);
	this._addCaseMapping(4329,4281);
	this._addCaseMapping(4330,4282);
	this._addCaseMapping(4331,4283);
	this._addCaseMapping(4332,4284);
	this._addCaseMapping(4333,4285);
	this._addCaseMapping(4334,4286);
	this._addCaseMapping(4335,4287);
	this._addCaseMapping(4336,4288);
	this._addCaseMapping(4337,4289);
	this._addCaseMapping(4338,4290);
	this._addCaseMapping(4339,4291);
	this._addCaseMapping(4340,4292);
	this._addCaseMapping(4341,4293);
	this._addCaseMapping(7681,7680);
	this._addCaseMapping(7683,7682);
	this._addCaseMapping(7685,7684);
	this._addCaseMapping(7687,7686);
	this._addCaseMapping(7689,7688);
	this._addCaseMapping(7691,7690);
	this._addCaseMapping(7693,7692);
	this._addCaseMapping(7695,7694);
	this._addCaseMapping(7697,7696);
	this._addCaseMapping(7699,7698);
	this._addCaseMapping(7701,7700);
	this._addCaseMapping(7703,7702);
	this._addCaseMapping(7705,7704);
	this._addCaseMapping(7707,7706);
	this._addCaseMapping(7709,7708);
	this._addCaseMapping(7711,7710);
	this._addCaseMapping(7713,7712);
	this._addCaseMapping(7715,7714);
	this._addCaseMapping(7717,7716);
	this._addCaseMapping(7719,7718);
	this._addCaseMapping(7721,7720);
	this._addCaseMapping(7723,7722);
	this._addCaseMapping(7725,7724);
	this._addCaseMapping(7727,7726);
	this._addCaseMapping(7729,7728);
	this._addCaseMapping(7731,7730);
	this._addCaseMapping(7733,7732);
	this._addCaseMapping(7735,7734);
	this._addCaseMapping(7737,7736);
	this._addCaseMapping(7739,7738);
	this._addCaseMapping(7741,7740);
	this._addCaseMapping(7743,7742);
	this._addCaseMapping(7745,7744);
	this._addCaseMapping(7747,7746);
	this._addCaseMapping(7749,7748);
	this._addCaseMapping(7751,7750);
	this._addCaseMapping(7753,7752);
	this._addCaseMapping(7755,7754);
	this._addCaseMapping(7757,7756);
	this._addCaseMapping(7759,7758);
	this._addCaseMapping(7761,7760);
	this._addCaseMapping(7763,7762);
	this._addCaseMapping(7765,7764);
	this._addCaseMapping(7767,7766);
	this._addCaseMapping(7769,7768);
	this._addCaseMapping(7771,7770);
	this._addCaseMapping(7773,7772);
	this._addCaseMapping(7775,7774);
	this._addCaseMapping(7777,7776);
	this._addCaseMapping(7779,7778);
	this._addCaseMapping(7781,7780);
	this._addCaseMapping(7783,7782);
	this._addCaseMapping(7785,7784);
	this._addCaseMapping(7787,7786);
	this._addCaseMapping(7789,7788);
	this._addCaseMapping(7791,7790);
	this._addCaseMapping(7793,7792);
	this._addCaseMapping(7795,7794);
	this._addCaseMapping(7797,7796);
	this._addCaseMapping(7799,7798);
	this._addCaseMapping(7801,7800);
	this._addCaseMapping(7803,7802);
	this._addCaseMapping(7805,7804);
	this._addCaseMapping(7807,7806);
	this._addCaseMapping(7809,7808);
	this._addCaseMapping(7811,7810);
	this._addCaseMapping(7813,7812);
	this._addCaseMapping(7815,7814);
	this._addCaseMapping(7817,7816);
	this._addCaseMapping(7819,7818);
	this._addCaseMapping(7821,7820);
	this._addCaseMapping(7823,7822);
	this._addCaseMapping(7825,7824);
	this._addCaseMapping(7827,7826);
	this._addCaseMapping(7829,7828);
	this._addCaseMapping(7841,7840);
	this._addCaseMapping(7843,7842);
	this._addCaseMapping(7845,7844);
	this._addCaseMapping(7847,7846);
	this._addCaseMapping(7849,7848);
	this._addCaseMapping(7851,7850);
	this._addCaseMapping(7853,7852);
	this._addCaseMapping(7855,7854);
	this._addCaseMapping(7857,7856);
	this._addCaseMapping(7859,7858);
	this._addCaseMapping(7861,7860);
	this._addCaseMapping(7863,7862);
	this._addCaseMapping(7865,7864);
	this._addCaseMapping(7867,7866);
	this._addCaseMapping(7869,7868);
	this._addCaseMapping(7871,7870);
	this._addCaseMapping(7873,7872);
	this._addCaseMapping(7875,7874);
	this._addCaseMapping(7877,7876);
	this._addCaseMapping(7879,7878);
	this._addCaseMapping(7881,7880);
	this._addCaseMapping(7883,7882);
	this._addCaseMapping(7885,7884);
	this._addCaseMapping(7887,7886);
	this._addCaseMapping(7889,7888);
	this._addCaseMapping(7891,7890);
	this._addCaseMapping(7893,7892);
	this._addCaseMapping(7895,7894);
	this._addCaseMapping(7897,7896);
	this._addCaseMapping(7899,7898);
	this._addCaseMapping(7901,7900);
	this._addCaseMapping(7903,7902);
	this._addCaseMapping(7905,7904);
	this._addCaseMapping(7907,7906);
	this._addCaseMapping(7909,7908);
	this._addCaseMapping(7911,7910);
	this._addCaseMapping(7913,7912);
	this._addCaseMapping(7915,7914);
	this._addCaseMapping(7917,7916);
	this._addCaseMapping(7919,7918);
	this._addCaseMapping(7921,7920);
	this._addCaseMapping(7923,7922);
	this._addCaseMapping(7925,7924);
	this._addCaseMapping(7927,7926);
	this._addCaseMapping(7929,7928);
	this._addCaseMapping(7936,7944);
	this._addCaseMapping(7937,7945);
	this._addCaseMapping(7938,7946);
	this._addCaseMapping(7939,7947);
	this._addCaseMapping(7940,7948);
	this._addCaseMapping(7941,7949);
	this._addCaseMapping(7942,7950);
	this._addCaseMapping(7943,7951);
	this._addCaseMapping(7952,7960);
	this._addCaseMapping(7953,7961);
	this._addCaseMapping(7954,7962);
	this._addCaseMapping(7955,7963);
	this._addCaseMapping(7956,7964);
	this._addCaseMapping(7957,7965);
	this._addCaseMapping(7968,7976);
	this._addCaseMapping(7969,7977);
	this._addCaseMapping(7970,7978);
	this._addCaseMapping(7971,7979);
	this._addCaseMapping(7972,7980);
	this._addCaseMapping(7973,7981);
	this._addCaseMapping(7974,7982);
	this._addCaseMapping(7975,7983);
	this._addCaseMapping(7984,7992);
	this._addCaseMapping(7985,7993);
	this._addCaseMapping(7986,7994);
	this._addCaseMapping(7987,7995);
	this._addCaseMapping(7988,7996);
	this._addCaseMapping(7989,7997);
	this._addCaseMapping(7990,7998);
	this._addCaseMapping(7991,7999);
	this._addCaseMapping(8000,8008);
	this._addCaseMapping(8001,8009);
	this._addCaseMapping(8002,8010);
	this._addCaseMapping(8003,8011);
	this._addCaseMapping(8004,8012);
	this._addCaseMapping(8005,8013);
	this._addCaseMapping(8017,8025);
	this._addCaseMapping(8019,8027);
	this._addCaseMapping(8021,8029);
	this._addCaseMapping(8023,8031);
	this._addCaseMapping(8032,8040);
	this._addCaseMapping(8033,8041);
	this._addCaseMapping(8034,8042);
	this._addCaseMapping(8035,8043);
	this._addCaseMapping(8036,8044);
	this._addCaseMapping(8037,8045);
	this._addCaseMapping(8038,8046);
	this._addCaseMapping(8039,8047);
	this._addCaseMapping(8064,8072);
	this._addCaseMapping(8065,8073);
	this._addCaseMapping(8066,8074);
	this._addCaseMapping(8067,8075);
	this._addCaseMapping(8068,8076);
	this._addCaseMapping(8069,8077);
	this._addCaseMapping(8070,8078);
	this._addCaseMapping(8071,8079);
	this._addCaseMapping(8080,8088);
	this._addCaseMapping(8081,8089);
	this._addCaseMapping(8082,8090);
	this._addCaseMapping(8083,8091);
	this._addCaseMapping(8084,8092);
	this._addCaseMapping(8085,8093);
	this._addCaseMapping(8086,8094);
	this._addCaseMapping(8087,8095);
	this._addCaseMapping(8096,8104);
	this._addCaseMapping(8097,8105);
	this._addCaseMapping(8098,8106);
	this._addCaseMapping(8099,8107);
	this._addCaseMapping(8100,8108);
	this._addCaseMapping(8101,8109);
	this._addCaseMapping(8102,8110);
	this._addCaseMapping(8103,8111);
	this._addCaseMapping(8112,8120);
	this._addCaseMapping(8113,8121);
	this._addCaseMapping(8144,8152);
	this._addCaseMapping(8145,8153);
	this._addCaseMapping(8160,8168);
	this._addCaseMapping(8161,8169);
	this._addCaseMapping(9424,9398);
	this._addCaseMapping(9425,9399);
	this._addCaseMapping(9426,9400);
	this._addCaseMapping(9427,9401);
	this._addCaseMapping(9428,9402);
	this._addCaseMapping(9429,9403);
	this._addCaseMapping(9430,9404);
	this._addCaseMapping(9431,9405);
	this._addCaseMapping(9432,9406);
	this._addCaseMapping(9433,9407);
	this._addCaseMapping(9434,9408);
	this._addCaseMapping(9435,9409);
	this._addCaseMapping(9436,9410);
	this._addCaseMapping(9437,9411);
	this._addCaseMapping(9438,9412);
	this._addCaseMapping(9439,9413);
	this._addCaseMapping(9440,9414);
	this._addCaseMapping(9441,9415);
	this._addCaseMapping(9442,9416);
	this._addCaseMapping(9443,9417);
	this._addCaseMapping(9444,9418);
	this._addCaseMapping(9445,9419);
	this._addCaseMapping(9446,9420);
	this._addCaseMapping(9447,9421);
	this._addCaseMapping(9448,9422);
	this._addCaseMapping(9449,9423);
	this._addCaseMapping(65345,65313);
	this._addCaseMapping(65346,65314);
	this._addCaseMapping(65347,65315);
	this._addCaseMapping(65348,65316);
	this._addCaseMapping(65349,65317);
	this._addCaseMapping(65350,65318);
	this._addCaseMapping(65351,65319);
	this._addCaseMapping(65352,65320);
	this._addCaseMapping(65353,65321);
	this._addCaseMapping(65354,65322);
	this._addCaseMapping(65355,65323);
	this._addCaseMapping(65356,65324);
	this._addCaseMapping(65357,65325);
	this._addCaseMapping(65358,65326);
	this._addCaseMapping(65359,65327);
	this._addCaseMapping(65360,65328);
	this._addCaseMapping(65361,65329);
	this._addCaseMapping(65362,65330);
	this._addCaseMapping(65363,65331);
	this._addCaseMapping(65364,65332);
	this._addCaseMapping(65365,65333);
	this._addCaseMapping(65366,65334);
	this._addCaseMapping(65367,65335);
	this._addCaseMapping(65368,65336);
	this._addCaseMapping(65369,65337);
	this._addCaseMapping(65370,65338);
};
$hxClasses["hx.strings._Char.CharCaseMapper"] = hx_strings__$Char_CharCaseMapper;
hx_strings__$Char_CharCaseMapper.__name__ = "hx.strings._Char.CharCaseMapper";
hx_strings__$Char_CharCaseMapper.prototype = {
	mapU2L: null
	,mapL2U: null
	,_addCaseMapping: function(lowerChar,upperChar) {
		if(!this.mapU2L.h.hasOwnProperty(upperChar)) {
			this.mapU2L.h[upperChar] = lowerChar;
		}
		if(!this.mapL2U.h.hasOwnProperty(lowerChar)) {
			this.mapL2U.h[lowerChar] = upperChar;
		}
	}
	,isLowerCase: function(ch) {
		return this.mapL2U.h.hasOwnProperty(ch);
	}
	,isUpperCase: function(ch) {
		return this.mapU2L.h.hasOwnProperty(ch);
	}
	,toLowerCase: function(ch) {
		var lowerChar = this.mapU2L.h[ch];
		if(lowerChar == null) {
			return ch;
		} else {
			return lowerChar;
		}
	}
	,toUpperCase: function(ch) {
		var upperChar = this.mapL2U.h[ch];
		if(upperChar == null) {
			return ch;
		} else {
			return upperChar;
		}
	}
	,__class__: hx_strings__$Char_CharCaseMapper
};
var hx_strings_Char = {};
hx_strings_Char.fromString = function(str) {
	var strLen = str == null ? 0 : str.length;
	if(strLen == 0 || 0 >= strLen) {
		return -1;
	} else {
		return HxOverrides.cca(str,0);
	}
};
hx_strings_Char.of = function(ch) {
	return ch;
};
hx_strings_Char.op_plus_string = function(ch,other) {
	return String.fromCodePoint(ch) + other;
};
hx_strings_Char.op_plus_string2 = function(str,ch) {
	return str + String.fromCodePoint(ch);
};
hx_strings_Char.op_plus = function(ch,other) {
	return ch + other;
};
hx_strings_Char.isAscii = function(this1) {
	if(this1 > -1) {
		return this1 < 128;
	} else {
		return false;
	}
};
hx_strings_Char.isAsciiAlpha = function(this1) {
	if(!(this1 > 64 && this1 < 91)) {
		if(this1 > 96) {
			return this1 < 123;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hx_strings_Char.isAsciiAlphanumeric = function(this1) {
	if(!(this1 > 64 && this1 < 91 || this1 > 96 && this1 < 123)) {
		if(this1 > 47) {
			return this1 < 58;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hx_strings_Char.isAsciiControl = function(this1) {
	if(!(this1 > -1 && this1 < 32)) {
		return this1 == 127;
	} else {
		return true;
	}
};
hx_strings_Char.isAsciiPrintable = function(this1) {
	if(this1 > 31) {
		return this1 < 127;
	} else {
		return false;
	}
};
hx_strings_Char.isDigit = function(this1) {
	if(this1 > 47) {
		return this1 < 58;
	} else {
		return false;
	}
};
hx_strings_Char.isEOF = function(this1) {
	return this1 != this1;
};
hx_strings_Char.isSpace = function(this1) {
	return this1 == 32;
};
hx_strings_Char.isUTF8 = function(this1) {
	if(this1 > -1) {
		return this1 < 1114112;
	} else {
		return false;
	}
};
hx_strings_Char.isWhitespace = function(this1) {
	if(!(this1 > 8 && this1 < 14)) {
		return this1 == 32;
	} else {
		return true;
	}
};
hx_strings_Char.isLowerCase = function(this1) {
	return hx_strings_Char.CHAR_CASE_MAPPER.mapL2U.h.hasOwnProperty(this1);
};
hx_strings_Char.isUpperCase = function(this1) {
	return hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h.hasOwnProperty(this1);
};
hx_strings_Char.toLowerCase = function(this1) {
	var lowerChar = hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h[this1];
	if(lowerChar == null) {
		return this1;
	} else {
		return lowerChar;
	}
};
hx_strings_Char.toUpperCase = function(this1) {
	var upperChar = hx_strings_Char.CHAR_CASE_MAPPER.mapL2U.h[this1];
	if(upperChar == null) {
		return this1;
	} else {
		return upperChar;
	}
};
hx_strings_Char.toInt = function(this1) {
	return this1;
};
hx_strings_Char.toString = function(this1) {
	return String.fromCodePoint(this1);
};
var hx_strings_CharIterator = function(prevBufferSize) {
	this.prevBufferNextIdx = -1;
	this.prevBufferPrevIdx = -1;
	this.currChar = -1;
	this.col = 0;
	this.line = 0;
	this.index = -1;
	var tmp;
	if(prevBufferSize > 0) {
		var this1 = new hx_strings_internal__$RingBuffer_RingBufferImpl(prevBufferSize + 1);
		tmp = this1;
	} else {
		tmp = null;
	}
	this.prevBuffer = tmp;
};
$hxClasses["hx.strings.CharIterator"] = hx_strings_CharIterator;
hx_strings_CharIterator.__name__ = "hx.strings.CharIterator";
hx_strings_CharIterator.fromString = function(chars,prevBufferSize) {
	if(prevBufferSize == null) {
		prevBufferSize = 0;
	}
	if(chars == null) {
		return hx_strings__$CharIterator_NullCharIterator.INSTANCE;
	}
	return new hx_strings__$CharIterator_StringCharIterator(chars,prevBufferSize);
};
hx_strings_CharIterator.fromArray = function(chars,prevBufferSize) {
	if(prevBufferSize == null) {
		prevBufferSize = 0;
	}
	if(chars == null) {
		return hx_strings__$CharIterator_NullCharIterator.INSTANCE;
	}
	return new hx_strings__$CharIterator_ArrayCharIterator(chars,prevBufferSize);
};
hx_strings_CharIterator.fromInput = function(chars,prevBufferSize) {
	if(prevBufferSize == null) {
		prevBufferSize = 0;
	}
	if(chars == null) {
		return hx_strings__$CharIterator_NullCharIterator.INSTANCE;
	}
	return new hx_strings__$CharIterator_InputCharIterator(chars,prevBufferSize);
};
hx_strings_CharIterator.fromIterator = function(chars,prevBufferSize) {
	if(prevBufferSize == null) {
		prevBufferSize = 0;
	}
	if(chars == null) {
		return hx_strings__$CharIterator_NullCharIterator.INSTANCE;
	}
	return new hx_strings__$CharIterator_IteratorCharIterator(chars,prevBufferSize);
};
hx_strings_CharIterator.prototype = {
	index: null
	,line: null
	,col: null
	,currChar: null
	,prevBuffer: null
	,prevBufferPrevIdx: null
	,prevBufferNextIdx: null
	,get_current: function() {
		if(this.index > -1) {
			return this.currChar;
		} else {
			return null;
		}
	}
	,get_pos: function() {
		return new hx_strings_CharPos(this.index,this.line,this.col);
	}
	,hasPrev: function() {
		return this.prevBufferPrevIdx > -1;
	}
	,prev: function() {
		if(this.prevBufferPrevIdx <= -1) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		var prevChar = this.prevBuffer.get(this.prevBufferPrevIdx);
		this.currChar = prevChar.char;
		this.index = prevChar.index;
		this.line = prevChar.line;
		this.col = prevChar.col;
		this.prevBufferNextIdx = this.prevBufferPrevIdx + 1 < this.prevBuffer.length ? this.prevBufferPrevIdx + 1 : -1;
		this.prevBufferPrevIdx--;
		return this.currChar;
	}
	,hasNext: function() {
		if(this.prevBufferNextIdx > -1) {
			return true;
		} else {
			return !this.isEOF();
		}
	}
	,next: function() {
		if(this.prevBufferNextIdx > -1) {
			var prevChar = this.prevBuffer.get(this.prevBufferNextIdx);
			this.currChar = prevChar.char;
			this.index = prevChar.index;
			this.line = prevChar.line;
			this.col = prevChar.col;
			this.prevBufferPrevIdx = this.prevBufferNextIdx - 1;
			this.prevBufferNextIdx = this.prevBufferNextIdx + 1 < this.prevBuffer.length ? this.prevBufferNextIdx + 1 : -1;
			return this.currChar;
		}
		if(this.isEOF()) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.currChar == 10 || this.currChar < 0) {
			this.line++;
			this.col = 0;
		}
		this.index++;
		this.col++;
		this.currChar = this.getChar();
		if(this.prevBuffer != null) {
			this.prevBuffer.add(new hx_strings__$CharIterator_CharWithPos(this.currChar,this.index,this.col,this.line));
			this.prevBufferPrevIdx = this.prevBuffer.length - 2;
			this.prevBufferNextIdx = -1;
		}
		return this.currChar;
	}
	,getChar: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,isEOF: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,__class__: hx_strings_CharIterator
	,__properties__: {get_pos:"get_pos",get_current:"get_current"}
};
var hx_strings_CharPos = function(index,line,col) {
	this.index = index;
	this.line = line;
	this.col = col;
};
$hxClasses["hx.strings.CharPos"] = hx_strings_CharPos;
hx_strings_CharPos.__name__ = "hx.strings.CharPos";
hx_strings_CharPos.prototype = {
	index: null
	,line: null
	,col: null
	,toString: function() {
		return "CharPos[index=" + this.index + ", line=" + this.line + ", col=" + this.col + "]";
	}
	,__class__: hx_strings_CharPos
};
var hx_strings__$CharIterator_CharWithPos = function(char,index,line,col) {
	hx_strings_CharPos.call(this,index,line,col);
	this.char = char;
};
$hxClasses["hx.strings._CharIterator.CharWithPos"] = hx_strings__$CharIterator_CharWithPos;
hx_strings__$CharIterator_CharWithPos.__name__ = "hx.strings._CharIterator.CharWithPos";
hx_strings__$CharIterator_CharWithPos.__super__ = hx_strings_CharPos;
hx_strings__$CharIterator_CharWithPos.prototype = $extend(hx_strings_CharPos.prototype,{
	char: null
	,__class__: hx_strings__$CharIterator_CharWithPos
});
var hx_strings_internal__$RingBuffer_RingBufferImpl = function(size) {
	this.length = 0;
	this.bufferEndIdx = -1;
	this.bufferStartIdx = 0;
	if(size < 1) {
		throw haxe_Exception.thrown("[size] must be > 0");
	}
	var this1 = new Array(size);
	this.buffer = this1;
	this.size = size;
	this.bufferMaxIdx = size - 1;
};
$hxClasses["hx.strings.internal._RingBuffer.RingBufferImpl"] = hx_strings_internal__$RingBuffer_RingBufferImpl;
hx_strings_internal__$RingBuffer_RingBufferImpl.__name__ = "hx.strings.internal._RingBuffer.RingBufferImpl";
hx_strings_internal__$RingBuffer_RingBufferImpl.prototype = {
	buffer: null
	,bufferStartIdx: null
	,bufferEndIdx: null
	,bufferMaxIdx: null
	,length: null
	,size: null
	,add: function(item) {
		if(this.length == this.size) {
			this.bufferEndIdx = this.bufferStartIdx;
			this.bufferStartIdx++;
			if(this.bufferStartIdx > this.bufferMaxIdx) {
				this.bufferStartIdx = 0;
			}
		} else {
			this.bufferEndIdx++;
			this.length++;
		}
		this.buffer[this.bufferEndIdx] = item;
	}
	,get: function(index) {
		if(index < 0 || index > this.bufferMaxIdx) {
			throw haxe_Exception.thrown("[index] " + index + " is out of bound");
		}
		var realIdx = this.bufferStartIdx + index;
		if(realIdx > this.bufferMaxIdx) {
			realIdx -= this.length;
		}
		return this.buffer[realIdx];
	}
	,iterator: function() {
		return new hx_strings_internal__$RingBuffer_RingBufferIterator(this);
	}
	,toArray: function() {
		var arr = [];
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			arr.push(i1);
		}
		return arr;
	}
	,__class__: hx_strings_internal__$RingBuffer_RingBufferImpl
};
var hx_strings__$CharIterator_NullCharIterator = function() {
	hx_strings_CharIterator.call(this,0);
};
$hxClasses["hx.strings._CharIterator.NullCharIterator"] = hx_strings__$CharIterator_NullCharIterator;
hx_strings__$CharIterator_NullCharIterator.__name__ = "hx.strings._CharIterator.NullCharIterator";
hx_strings__$CharIterator_NullCharIterator.__super__ = hx_strings_CharIterator;
hx_strings__$CharIterator_NullCharIterator.prototype = $extend(hx_strings_CharIterator.prototype,{
	isEOF: function() {
		return true;
	}
	,__class__: hx_strings__$CharIterator_NullCharIterator
});
var hx_strings__$CharIterator_ArrayCharIterator = function(chars,prevBufferSize) {
	hx_strings_CharIterator.call(this,prevBufferSize);
	this.chars = chars;
	this.charsMaxIndex = chars.length - 1;
};
$hxClasses["hx.strings._CharIterator.ArrayCharIterator"] = hx_strings__$CharIterator_ArrayCharIterator;
hx_strings__$CharIterator_ArrayCharIterator.__name__ = "hx.strings._CharIterator.ArrayCharIterator";
hx_strings__$CharIterator_ArrayCharIterator.__super__ = hx_strings_CharIterator;
hx_strings__$CharIterator_ArrayCharIterator.prototype = $extend(hx_strings_CharIterator.prototype,{
	chars: null
	,charsMaxIndex: null
	,isEOF: function() {
		return this.index >= this.charsMaxIndex;
	}
	,getChar: function() {
		return this.chars[this.index];
	}
	,__class__: hx_strings__$CharIterator_ArrayCharIterator
});
var hx_strings__$CharIterator_IteratorCharIterator = function(chars,prevBufferSize) {
	hx_strings_CharIterator.call(this,prevBufferSize);
	this.chars = chars;
};
$hxClasses["hx.strings._CharIterator.IteratorCharIterator"] = hx_strings__$CharIterator_IteratorCharIterator;
hx_strings__$CharIterator_IteratorCharIterator.__name__ = "hx.strings._CharIterator.IteratorCharIterator";
hx_strings__$CharIterator_IteratorCharIterator.__super__ = hx_strings_CharIterator;
hx_strings__$CharIterator_IteratorCharIterator.prototype = $extend(hx_strings_CharIterator.prototype,{
	chars: null
	,isEOF: function() {
		return !this.chars.hasNext();
	}
	,getChar: function() {
		return this.chars.next();
	}
	,__class__: hx_strings__$CharIterator_IteratorCharIterator
});
var hx_strings__$CharIterator_InputCharIterator = function(chars,prevBufferSize) {
	this.nextCharAvailable = null;
	this.currCharIndex = -1;
	this.byteIndex = 0;
	hx_strings_CharIterator.call(this,prevBufferSize);
	this.input = chars;
};
$hxClasses["hx.strings._CharIterator.InputCharIterator"] = hx_strings__$CharIterator_InputCharIterator;
hx_strings__$CharIterator_InputCharIterator.__name__ = "hx.strings._CharIterator.InputCharIterator";
hx_strings__$CharIterator_InputCharIterator.__super__ = hx_strings_CharIterator;
hx_strings__$CharIterator_InputCharIterator.prototype = $extend(hx_strings_CharIterator.prototype,{
	byteIndex: null
	,input: null
	,currCharIndex: null
	,nextChar: null
	,nextCharAvailable: null
	,isEOF: function() {
		if(this.nextCharAvailable == null) {
			try {
				var byte1 = this.input.readByte();
				this.byteIndex++;
				var tmp;
				if(byte1 <= 127) {
					tmp = byte1;
				} else {
					byte1 &= -129;
					byte1 &= -65;
					var totalBytes = 2;
					var isBit6Set = 1 == (byte1 >> 5 & 1);
					var isBit5Set = false;
					if(isBit6Set) {
						byte1 &= -33;
						++totalBytes;
						isBit5Set = 1 == (byte1 >> 4 & 1);
						if(isBit5Set) {
							byte1 &= -17;
							++totalBytes;
							if(1 == (byte1 >> 3 & 1)) {
								throw haxe_Exception.thrown("Valid UTF-8 byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte1 + "]!");
							}
						}
					}
					var result = byte1 << 6 * (totalBytes - 1);
					var byte = this.input.readByte();
					this.byteIndex++;
					if(1 != (byte >> 7 & 1)) {
						throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
					}
					if(1 == (byte >> 6 & 1)) {
						throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
					}
					var byte2 = byte & -129;
					result += byte2 << 6 * (totalBytes - 2);
					if(isBit6Set) {
						var byte = this.input.readByte();
						this.byteIndex++;
						if(1 != (byte >> 7 & 1)) {
							throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
						}
						if(1 == (byte >> 6 & 1)) {
							throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
						}
						var byte3 = byte & -129;
						result += byte3 << 6 * (totalBytes - 3);
						if(isBit5Set) {
							var byte = this.input.readByte();
							this.byteIndex++;
							if(1 != (byte >> 7 & 1)) {
								throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
							}
							if(1 == (byte >> 6 & 1)) {
								throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
							}
							var byte4 = byte & -129;
							result += byte4 << 6 * (totalBytes - 4);
						}
					}
					if(this.index == 0 && result == 65279) {
						var byte1 = this.input.readByte();
						this.byteIndex++;
						if(byte1 <= 127) {
							tmp = byte1;
						} else {
							byte1 &= -129;
							byte1 &= -65;
							var totalBytes = 2;
							var isBit6Set = 1 == (byte1 >> 5 & 1);
							var isBit5Set = false;
							if(isBit6Set) {
								byte1 &= -33;
								++totalBytes;
								isBit5Set = 1 == (byte1 >> 4 & 1);
								if(isBit5Set) {
									byte1 &= -17;
									++totalBytes;
									if(1 == (byte1 >> 3 & 1)) {
										throw haxe_Exception.thrown("Valid UTF-8 byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte1 + "]!");
									}
								}
							}
							var result1 = byte1 << 6 * (totalBytes - 1);
							var byte = this.input.readByte();
							this.byteIndex++;
							if(1 != (byte >> 7 & 1)) {
								throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
							}
							if(1 == (byte >> 6 & 1)) {
								throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
							}
							var byte2 = byte & -129;
							result1 += byte2 << 6 * (totalBytes - 2);
							if(isBit6Set) {
								var byte = this.input.readByte();
								this.byteIndex++;
								if(1 != (byte >> 7 & 1)) {
									throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
								}
								if(1 == (byte >> 6 & 1)) {
									throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
								}
								var byte3 = byte & -129;
								result1 += byte3 << 6 * (totalBytes - 3);
								if(isBit5Set) {
									var byte = this.input.readByte();
									this.byteIndex++;
									if(1 != (byte >> 7 & 1)) {
										throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
									}
									if(1 == (byte >> 6 & 1)) {
										throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
									}
									var byte4 = byte & -129;
									result1 += byte4 << 6 * (totalBytes - 4);
								}
							}
							tmp = this.index == 0 && result1 == 65279 ? this.readUtf8Char() : result1;
						}
					} else {
						tmp = result;
					}
				}
				this.nextChar = tmp;
				this.nextCharAvailable = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
					this.nextCharAvailable = false;
				} else {
					throw _g;
				}
			}
		}
		return this.nextCharAvailable != true;
	}
	,getChar: function() {
		if(this.index != this.currCharIndex) {
			this.currCharIndex = this.index;
			this.nextCharAvailable = null;
			return this.nextChar;
		}
		return this.currChar;
	}
	,readUtf8Char: function() {
		var byte1 = this.input.readByte();
		this.byteIndex++;
		if(byte1 <= 127) {
			return byte1;
		}
		byte1 &= -129;
		byte1 &= -65;
		var totalBytes = 2;
		var isBit6Set = 1 == (byte1 >> 5 & 1);
		var isBit5Set = false;
		if(isBit6Set) {
			byte1 &= -33;
			++totalBytes;
			isBit5Set = 1 == (byte1 >> 4 & 1);
			if(isBit5Set) {
				byte1 &= -17;
				++totalBytes;
				if(1 == (byte1 >> 3 & 1)) {
					throw haxe_Exception.thrown("Valid UTF-8 byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte1 + "]!");
				}
			}
		}
		var result = byte1 << 6 * (totalBytes - 1);
		var byte = this.input.readByte();
		this.byteIndex++;
		if(1 != (byte >> 7 & 1)) {
			throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
		}
		if(1 == (byte >> 6 & 1)) {
			throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
		}
		var byte2 = byte & -129;
		result += byte2 << 6 * (totalBytes - 2);
		if(isBit6Set) {
			var byte = this.input.readByte();
			this.byteIndex++;
			if(1 != (byte >> 7 & 1)) {
				throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
			}
			if(1 == (byte >> 6 & 1)) {
				throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
			}
			var byte3 = byte & -129;
			result += byte3 << 6 * (totalBytes - 3);
			if(isBit5Set) {
				var byte = this.input.readByte();
				this.byteIndex++;
				if(1 != (byte >> 7 & 1)) {
					throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
				}
				if(1 == (byte >> 6 & 1)) {
					throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
				}
				var byte4 = byte & -129;
				result += byte4 << 6 * (totalBytes - 4);
			}
		}
		if(this.index == 0 && result == 65279) {
			return this.readUtf8Char();
		}
		return result;
	}
	,readUtf8MultiSequenceByte: function() {
		var byte = this.input.readByte();
		this.byteIndex++;
		if(1 != (byte >> 7 & 1)) {
			throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
		}
		if(1 == (byte >> 6 & 1)) {
			throw haxe_Exception.thrown("Valid UTF-8 multi-sequence byte expected at position [" + this.byteIndex + "] but found byte with value [" + byte + "]!");
		}
		return byte & -129;
	}
	,__class__: hx_strings__$CharIterator_InputCharIterator
});
var hx_strings__$CharIterator_StringCharIterator = function(chars,prevBufferSize) {
	hx_strings_CharIterator.call(this,prevBufferSize);
	this.chars = chars;
	this.charsMaxIndex = (chars == null ? 0 : chars.length) - 1;
};
$hxClasses["hx.strings._CharIterator.StringCharIterator"] = hx_strings__$CharIterator_StringCharIterator;
hx_strings__$CharIterator_StringCharIterator.__name__ = "hx.strings._CharIterator.StringCharIterator";
hx_strings__$CharIterator_StringCharIterator.__super__ = hx_strings_CharIterator;
hx_strings__$CharIterator_StringCharIterator.prototype = $extend(hx_strings_CharIterator.prototype,{
	chars: null
	,charsMaxIndex: null
	,isEOF: function() {
		return this.index >= this.charsMaxIndex;
	}
	,getChar: function() {
		return HxOverrides.cca(this.chars,this.index);
	}
	,__class__: hx_strings__$CharIterator_StringCharIterator
});
var hx_strings_Pattern = function(pattern,options) {
	this.pattern = pattern;
	this.options = options;
	this.ereg = new EReg(pattern,options);
	this.options += "u";
};
$hxClasses["hx.strings.Pattern"] = hx_strings_Pattern;
hx_strings_Pattern.__name__ = "hx.strings.Pattern";
hx_strings_Pattern.compile = function(pattern,options) {
	if(options == null) {
		return new hx_strings_Pattern(pattern,"");
	}
	var _g = options;
	var tmp;
	switch(_g._hx_index) {
	case 0:
		var str = _g.v;
		var str1 = hx_strings_Strings.toLowerCase8(str);
		if(str1 == null || str1.length == 0) {
			tmp = str1;
		} else {
			var _g1 = [];
			var _g2 = 0;
			var _g3 = hx_strings_Strings.toChars(str1);
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				var tmp1;
				var tmp2;
				var strLen = "i".length;
				if(v != (strLen == 0 || 0 >= strLen ? -1 : HxOverrides.cca("i",0))) {
					var strLen1 = "m".length;
					tmp2 = v == (strLen1 == 0 || 0 >= strLen1 ? -1 : HxOverrides.cca("m",0));
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var strLen2 = "g".length;
					tmp1 = v == (strLen2 == 0 || 0 >= strLen2 ? -1 : HxOverrides.cca("g",0));
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					_g1.push(v);
				}
			}
			var _this = _g1;
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g2 = _this.length;
			while(_g1 < _g2) {
				var i = _g1++;
				result[i] = String.fromCodePoint(_this[i]);
			}
			tmp = result.join("");
		}
		break;
	case 1:
		var opt = _g.v;
		tmp = Std.string(opt);
		break;
	case 2:
		var arr = _g.v;
		var _g = [];
		var _g1 = 0;
		var _g2 = arr;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v != null) {
				_g.push(v);
			}
		}
		tmp = _g.join("");
		break;
	}
	return new hx_strings_Pattern(pattern,tmp);
};
hx_strings_Pattern.prototype = {
	pattern: null
	,options: null
	,ereg: null
	,matcher: function(str) {
		return new hx_strings__$Pattern_MatcherImpl(this.ereg,this.pattern,this.options,str);
	}
	,replace: function(str,replaceWith) {
		return str.replace(this.ereg.r,replaceWith);
	}
	,remove: function(str) {
		return str.replace(this.ereg.r,"");
	}
	,split: function(str) {
		return this.ereg.split(str);
	}
	,__class__: hx_strings_Pattern
};
var hx_strings_Matcher = function() { };
$hxClasses["hx.strings.Matcher"] = hx_strings_Matcher;
hx_strings_Matcher.__name__ = "hx.strings.Matcher";
hx_strings_Matcher.__isInterface__ = true;
hx_strings_Matcher.prototype = {
	iterate: null
	,map: null
	,matched: null
	,matchedPos: null
	,matches: null
	,matchesInRegion: null
	,reset: null
	,substringAfterMatch: null
	,substringBeforeMatch: null
	,__class__: hx_strings_Matcher
};
var hx_strings__$Pattern_MatcherImpl = function(ereg,pattern,options,str) {
	this.ereg = this._cloneEReg(ereg,pattern,options);
	this.str = str;
	this.isMatch = null;
};
$hxClasses["hx.strings._Pattern.MatcherImpl"] = hx_strings__$Pattern_MatcherImpl;
hx_strings__$Pattern_MatcherImpl.__name__ = "hx.strings._Pattern.MatcherImpl";
hx_strings__$Pattern_MatcherImpl.__interfaces__ = [hx_strings_Matcher];
hx_strings__$Pattern_MatcherImpl.prototype = {
	ereg: null
	,isMatch: null
	,str: null
	,reset: function(str) {
		this.str = str;
		this.isMatch = null;
		return this;
	}
	,iterate: function(onMatch) {
		var startAt = 0;
		while(this.ereg.matchSub(this.str,startAt)) {
			this.isMatch = true;
			var matchedPos = this.ereg.matchedPos();
			onMatch(this);
			startAt = matchedPos.pos + matchedPos.len;
		}
		this.isMatch = false;
	}
	,map: function(mapper) {
		var _gthis = this;
		return this.ereg.map(this.str,function(ereg) {
			_gthis.isMatch = true;
			return mapper(_gthis);
		});
	}
	,matched: function(n) {
		if(n == null) {
			n = 0;
		}
		if(this.isMatch == null) {
			this.isMatch = this.ereg.match(this.str);
		}
		if(!this.isMatch) {
			throw haxe_Exception.thrown("No string matched");
		}
		var result = this.ereg.matched(n);
		return result;
	}
	,matches: function() {
		return this.isMatch = this.ereg.match(this.str);
	}
	,matchesInRegion: function(pos,len) {
		if(len == null) {
			len = -1;
		}
		return this.isMatch = this.ereg.matchSub(this.str,pos,len);
	}
	,matchedPos: function() {
		if(this.isMatch == null) {
			this.isMatch = this.ereg.match(this.str);
		}
		if(!this.isMatch) {
			throw haxe_Exception.thrown("No string matched");
		}
		return this.ereg.matchedPos();
	}
	,substringAfterMatch: function() {
		if(this.isMatch == null) {
			this.isMatch = this.ereg.match(this.str);
		}
		if(!this.isMatch) {
			return "";
		}
		return this.ereg.matchedRight();
	}
	,substringBeforeMatch: function() {
		if(this.isMatch == null) {
			this.isMatch = this.ereg.match(this.str);
		}
		if(!this.isMatch) {
			return "";
		}
		return this.ereg.matchedLeft();
	}
	,_cloneEReg: function(from,pattern,options) {
		var clone = new EReg(pattern,options);
		return clone;
	}
	,__class__: hx_strings__$Pattern_MatcherImpl
};
var hx_strings_StringBuilder = function(initialContent) {
	this.len = 0;
	this.pre = null;
	this.sb = new StringBuf();
	if(initialContent != null) {
		this.add(initialContent);
	}
};
$hxClasses["hx.strings.StringBuilder"] = hx_strings_StringBuilder;
hx_strings_StringBuilder.__name__ = "hx.strings.StringBuilder";
hx_strings_StringBuilder.prototype = {
	sb: null
	,pre: null
	,len: null
	,length: null
	,get_length: function() {
		return this.len;
	}
	,add: function(item) {
		this.sb.b += Std.string(item);
		this.len += item == null ? 0 : item.length;
		return this;
	}
	,addChar: function(ch) {
		if(ch > -1 && ch < 128) {
			this.sb.b += String.fromCodePoint(ch);
		} else {
			var _this = this.sb;
			var x = String.fromCodePoint(ch);
			_this.b += Std.string(x);
		}
		this.len++;
		return this;
	}
	,addAll: function(items) {
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			this.sb.b += Std.string(item);
			this.len += item == null ? 0 : item.length;
		}
		return this;
	}
	,clear: function() {
		this.pre = null;
		this.sb = new StringBuf();
		this.len = 0;
		return this;
	}
	,isEmpty: function() {
		return this.len == 0;
	}
	,newLine: function() {
		this.sb.b += "\n";
		this.len++;
		return this;
	}
	,insert: function(pos,item) {
		if(pos < 0) {
			throw haxe_Exception.thrown("[pos] must not be negative");
		}
		if(pos > this.len) {
			throw haxe_Exception.thrown("[pos] must not be greater than this.length");
		}
		if(pos == this.len) {
			this.add(item);
			return this;
		}
		if(pos == 0) {
			if(this.pre == null) {
				this.pre = [];
			}
			this.pre.unshift(item);
			this.len += item == null ? 0 : item.length;
			return this;
		}
		var pre_len = 0;
		if(this.pre != null) {
			var i = this.pre.length;
			var _g = 0;
			var _g1 = this.pre.length;
			while(_g < _g1) {
				var i = _g++;
				var str = this.pre[i];
				var next_pre_len = pre_len + (str == null ? 0 : str.length);
				if(next_pre_len == pos) {
					this.pre.splice(i + 1,0,item);
					this.len += item == null ? 0 : item.length;
					return this;
				}
				if(next_pre_len > pos) {
					var preSplitted = hx_strings_Strings.splitAt(this.pre[i],[pos - pre_len]);
					this.pre[i] = preSplitted[0];
					this.pre.splice(i + 1,0,item);
					this.pre.splice(i + 2,0,preSplitted[1]);
					this.len += item == null ? 0 : item.length;
					return this;
				}
				pre_len = next_pre_len;
			}
		}
		if(this.sb.b.length == 0) {
			this.add(item);
			return this;
		}
		var sbSplitted = hx_strings_Strings.splitAt(this.sb.b,[pos - pre_len]);
		this.sb = new StringBuf();
		this.sb.b += Std.string(sbSplitted[0]);
		this.sb.b += Std.string(item);
		this.len += item == null ? 0 : item.length;
		this.sb.b += Std.string(sbSplitted[1]);
		return this;
	}
	,insertChar: function(pos,ch) {
		if(pos < 0) {
			throw haxe_Exception.thrown("[pos] must not be negative");
		}
		if(pos > this.len) {
			throw haxe_Exception.thrown("[pos] must not be greater than this.length");
		}
		if(pos == this.len) {
			this.addChar(ch);
			return this;
		}
		if(pos == 0) {
			if(this.pre == null) {
				this.pre = [];
			}
			this.pre.unshift(String.fromCodePoint(ch));
			this.len++;
			return this;
		}
		var pre_len = 0;
		if(this.pre != null) {
			var i = this.pre.length;
			var _g = 0;
			var _g1 = this.pre.length;
			while(_g < _g1) {
				var i = _g++;
				var str = this.pre[i];
				var next_pre_len = pre_len + (str == null ? 0 : str.length);
				if(next_pre_len == pos) {
					var _this = this.pre;
					var x = String.fromCodePoint(ch);
					_this.splice(i + 1,0,x);
					this.len++;
					return this;
				}
				if(next_pre_len > pos) {
					var preSplitted = hx_strings_Strings.splitAt(this.pre[i],[pos - pre_len]);
					this.pre[i] = preSplitted[0];
					var _this1 = this.pre;
					var x1 = String.fromCodePoint(ch);
					_this1.splice(i + 1,0,x1);
					this.pre.splice(i + 2,0,preSplitted[1]);
					this.len++;
					return this;
				}
				pre_len = next_pre_len;
			}
		}
		if(this.sb.b.length == 0) {
			this.addChar(ch);
			return this;
		}
		var sbSplitted = hx_strings_Strings.splitAt(this.sb.b,[pos - pre_len]);
		this.sb = new StringBuf();
		this.sb.b += Std.string(sbSplitted[0]);
		this.addChar(ch);
		this.sb.b += Std.string(sbSplitted[1]);
		return this;
	}
	,insertAll: function(pos,items) {
		if(pos < 0) {
			throw haxe_Exception.thrown("[pos] must not be negative");
		}
		if(pos > this.len) {
			throw haxe_Exception.thrown("[pos] must not be greater than this.length");
		}
		if(pos == this.len) {
			this.addAll(items);
			return this;
		}
		if(pos == 0) {
			if(this.pre == null) {
				this.pre = [];
			}
			var i = items.length;
			while(i-- > 0) {
				var item = items[i];
				this.pre.unshift(item);
				this.len += item == null ? 0 : item.length;
			}
			return this;
		}
		var pre_len = 0;
		if(this.pre != null) {
			var i = this.pre.length;
			var _g = 0;
			var _g1 = this.pre.length;
			while(_g < _g1) {
				var i = _g++;
				var str = this.pre[i];
				var next_pre_len = pre_len + (str == null ? 0 : str.length);
				if(next_pre_len == pos) {
					var j = items.length;
					while(j-- > 0) {
						var item = items[j];
						this.pre.splice(i + 1,0,item);
						this.len += item == null ? 0 : item.length;
					}
					return this;
				}
				if(next_pre_len > pos) {
					var preSplitted = hx_strings_Strings.splitAt(this.pre[i],[pos - pre_len]);
					this.pre[i] = preSplitted[0];
					this.pre.splice(i + 1,0,preSplitted[1]);
					var j1 = items.length;
					while(j1-- > 0) {
						var item1 = items[j1];
						this.pre.splice(i + 1,0,item1);
						this.len += item1 == null ? 0 : item1.length;
					}
					return this;
				}
				pre_len = next_pre_len;
			}
		}
		if(this.sb.b.length == 0) {
			var _g = 0;
			while(_g < items.length) {
				var item = items[_g];
				++_g;
				this.add(item);
			}
			return this;
		}
		var sbSplitted = hx_strings_Strings.splitAt(this.sb.b,[pos - pre_len]);
		this.sb = new StringBuf();
		this.sb.b += Std.string(sbSplitted[0]);
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			this.sb.b += Std.string(item);
			this.len += item == null ? 0 : item.length;
		}
		this.sb.b += Std.string(sbSplitted[1]);
		return this;
	}
	,asOutput: function() {
		return new hx_strings__$StringBuilder_OutputWrapper(this);
	}
	,toString: function() {
		if(this.pre == null) {
			return this.sb.b;
		}
		var str = this.pre.join("") + this.sb.b;
		this.clear();
		this.add(str);
		return str;
	}
	,__class__: hx_strings_StringBuilder
	,__properties__: {get_length:"get_length"}
};
var hx_strings__$StringBuilder_OutputWrapper = function(sb) {
	this.sb = sb;
};
$hxClasses["hx.strings._StringBuilder.OutputWrapper"] = hx_strings__$StringBuilder_OutputWrapper;
hx_strings__$StringBuilder_OutputWrapper.__name__ = "hx.strings._StringBuilder.OutputWrapper";
hx_strings__$StringBuilder_OutputWrapper.__super__ = haxe_io_Output;
hx_strings__$StringBuilder_OutputWrapper.prototype = $extend(haxe_io_Output.prototype,{
	sb: null
	,bo: null
	,flush: function() {
		if(this.bo != null && this.bo.b.pos > 0) {
			this.sb.add(this.bo.getBytes().toString());
		}
	}
	,writeByte: function(c) {
		if(this.bo == null) {
			this.bo = new haxe_io_BytesOutput();
		}
		this.bo.writeByte(c);
	}
	,writeString: function(str,encoding) {
		this.flush();
		this.sb.add(str);
	}
	,__class__: hx_strings__$StringBuilder_OutputWrapper
});
var hx_strings_internal_OS = function() { };
$hxClasses["hx.strings.internal.OS"] = hx_strings_internal_OS;
hx_strings_internal_OS.__name__ = "hx.strings.internal.OS";
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hx_strings_internal__$Either3__$Either3 = $hxEnums["hx.strings.internal._Either3._Either3"] = { __ename__:"hx.strings.internal._Either3._Either3",__constructs__:null
	,a: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hx.strings.internal._Either3._Either3",toString:$estr}; },$_._hx_name="a",$_.__params__ = ["v"],$_)
	,b: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hx.strings.internal._Either3._Either3",toString:$estr}; },$_._hx_name="b",$_.__params__ = ["v"],$_)
	,c: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hx.strings.internal._Either3._Either3",toString:$estr}; },$_._hx_name="c",$_.__params__ = ["v"],$_)
};
hx_strings_internal__$Either3__$Either3.__constructs__ = [hx_strings_internal__$Either3__$Either3.a,hx_strings_internal__$Either3__$Either3.b,hx_strings_internal__$Either3__$Either3.c];
var hx_strings_Strings = function() { };
$hxClasses["hx.strings.Strings"] = hx_strings_Strings;
hx_strings_Strings.__name__ = "hx.strings.Strings";
hx_strings_Strings._getNotFoundDefault = function(str,notFoundDefault) {
	switch(notFoundDefault) {
	case 1:
		return null;
	case 2:
		return "";
	case 3:
		return str;
	}
};
hx_strings_Strings._charCodeAt8Unsafe = function(str,pos) {
	return HxOverrides.cca(str,pos);
};
hx_strings_Strings._splitAsciiWordsUnsafe = function(str) {
	var words = [];
	var currentWord = new hx_strings_StringBuilder();
	var chars = hx_strings_Strings.toChars(str);
	var len = chars.length;
	var lastIndex = len - 1;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var ch = chars[i];
		if(ch > 64 && ch < 91 || ch > 96 && ch < 123) {
			var chNext = i < lastIndex ? chars[i + 1] : -1;
			currentWord.addChar(ch);
			if(chNext > 47 && chNext < 58) {
				words.push(currentWord.toString());
				currentWord.clear();
			} else if(hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h.hasOwnProperty(ch)) {
				if(hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h.hasOwnProperty(chNext) && chars.length > i + 2) {
					if(!hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h.hasOwnProperty(chars[i + 2])) {
						words.push(currentWord.toString());
						currentWord.clear();
					}
				}
			} else if(hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h.hasOwnProperty(chNext)) {
				words.push(currentWord.toString());
				currentWord.clear();
			}
		} else if(ch > 47 && ch < 58) {
			currentWord.addChar(ch);
			var chNext1 = i < lastIndex ? chars[i + 1] : -1;
			if(!(chNext1 > 47 && chNext1 < 58)) {
				words.push(currentWord.toString());
				currentWord.clear();
			}
		} else if(currentWord.len > 0) {
			words.push(currentWord.toString());
			currentWord.clear();
		}
	}
	if(currentWord.len > 0) {
		words.push(currentWord.toString());
	}
	return words;
};
hx_strings_Strings.ansiToHtml = function(str,renderMethod,initialState) {
	if(str == null || str.length == 0) {
		return str;
	}
	if(renderMethod == null) {
		renderMethod = hx_strings_AnsiToHtmlRenderMethod.StyleAttributes;
	}
	var styleOrClassAttribute;
	switch(renderMethod._hx_index) {
	case 0:
		styleOrClassAttribute = "style";
		break;
	case 1:
		styleOrClassAttribute = "class";
		break;
	case 2:
		var cb = renderMethod.func;
		styleOrClassAttribute = "class";
		break;
	}
	var sb = new hx_strings_StringBuilder();
	if(initialState != null && (initialState.fgcolor != null || initialState.bgcolor != null || initialState.bold || initialState.underline || initialState.blink)) {
		sb.add("<span " + styleOrClassAttribute + "=\"").add(initialState.toCSS(renderMethod)).add("\">");
	}
	var effectiveState = new hx_strings_AnsiState(initialState);
	var strLenMinus1 = (str == null ? 0 : str.length) - 1;
	var i = -1;
	var lookAhead = new hx_strings_StringBuilder();
	while(i < strLenMinus1) {
		++i;
		var ch = HxOverrides.cca(str,i);
		if(ch == 27 && i < strLenMinus1 && HxOverrides.cca(str,i + 1) == 91) {
			lookAhead.clear();
			var currentState = new hx_strings_AnsiState(effectiveState);
			var currentGraphicModeParam = 0;
			var isValidEscapeSequence = false;
			++i;
			_hx_loop2: while(i < strLenMinus1) {
				++i;
				var ch2 = HxOverrides.cca(str,i);
				lookAhead.addChar(ch2);
				switch(ch2) {
				case 48:
					currentGraphicModeParam *= 10;
					break;
				case 49:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 1;
					break;
				case 50:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 2;
					break;
				case 51:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 3;
					break;
				case 52:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 4;
					break;
				case 53:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 5;
					break;
				case 54:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 6;
					break;
				case 55:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 7;
					break;
				case 56:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 8;
					break;
				case 57:
					currentGraphicModeParam = currentGraphicModeParam * 10 + 9;
					break;
				case 59:
					currentState.setGraphicModeParameter(currentGraphicModeParam);
					currentGraphicModeParam = 0;
					break;
				case 109:
					currentState.setGraphicModeParameter(currentGraphicModeParam);
					if(effectiveState.fgcolor != null || effectiveState.bgcolor != null || effectiveState.bold || effectiveState.underline || effectiveState.blink) {
						sb.add("</span>");
					}
					if(currentState.fgcolor != null || currentState.bgcolor != null || currentState.bold || currentState.underline || currentState.blink) {
						sb.add("<span " + styleOrClassAttribute + "=\"").add(currentState.toCSS(renderMethod)).add("\">");
					}
					effectiveState = currentState;
					isValidEscapeSequence = true;
					break _hx_loop2;
				default:
					break _hx_loop2;
				}
			}
			if(!isValidEscapeSequence) {
				sb.addChar(27).add("[").add(Std.string(lookAhead));
			}
		} else {
			sb.addChar(ch);
		}
	}
	if(effectiveState.fgcolor != null || effectiveState.bgcolor != null || effectiveState.bold || effectiveState.underline || effectiveState.blink) {
		sb.add("</span>");
	}
	return sb.toString();
};
hx_strings_Strings.appendIfMissing = function(str,suffix) {
	if(str == null) {
		return null;
	}
	if(str.length == 0) {
		return str + suffix;
	}
	if(hx_strings_Strings.endsWith(str,suffix)) {
		return str;
	}
	return str + suffix;
};
hx_strings_Strings.base64Encode = function(plain) {
	if(plain == null) {
		return null;
	}
	return haxe_crypto_Base64.encode(plain == null ? null : haxe_io_Bytes.ofString(plain));
};
hx_strings_Strings.base64Decode = function(encoded) {
	if(encoded == null) {
		return null;
	}
	return haxe_crypto_Base64.decode(encoded).toString();
};
hx_strings_Strings.charAt8 = function(str,pos,resultIfOutOfBound) {
	if(resultIfOutOfBound == null) {
		resultIfOutOfBound = "";
	}
	if(str == null || str.length == 0 || pos < 0 || pos >= (str == null ? 0 : str.length)) {
		return resultIfOutOfBound;
	}
	return str.charAt(pos);
};
hx_strings_Strings.charCodeAt8 = function(str,pos,resultIfOutOfBound) {
	if(resultIfOutOfBound == null) {
		resultIfOutOfBound = -1;
	}
	var strLen = str == null ? 0 : str.length;
	if(strLen == 0 || pos < 0 || pos >= strLen) {
		return resultIfOutOfBound;
	}
	return HxOverrides.cca(str,pos);
};
hx_strings_Strings.compact = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var sb = new hx_strings_StringBuilder();
	var needWhiteSpace = false;
	var _g = 0;
	var _g1 = hx_strings_Strings.toChars(str);
	while(_g < _g1.length) {
		var char = _g1[_g];
		++_g;
		if(char > 8 && char < 14 || char == 32) {
			if(sb.len != 0) {
				needWhiteSpace = true;
			}
			continue;
		} else if(needWhiteSpace) {
			sb.addChar(32);
			needWhiteSpace = false;
		}
		sb.addChar(char);
	}
	return sb.toString();
};
hx_strings_Strings.contains = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	if(searchFor == "") {
		return true;
	}
	return searchIn.indexOf(searchFor) > -1;
};
hx_strings_Strings.containsOnly = function(searchIn,allowedChars) {
	if(searchIn == null || searchIn.length == 0) {
		return true;
	}
	if(allowedChars == null) {
		return false;
	}
	var allowedCharsArray;
	var _g = allowedChars;
	switch(_g._hx_index) {
	case 0:
		var str = _g.v;
		allowedCharsArray = hx_strings_Strings.toChars(str);
		break;
	case 1:
		var chars = _g.v;
		allowedCharsArray = chars;
		break;
	}
	var _g = 0;
	var _g1 = hx_strings_Strings.toChars(searchIn);
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		if(allowedCharsArray.indexOf(ch) < 0) {
			return false;
		}
	}
	return true;
};
hx_strings_Strings.containsAll = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		if(!(searchIn == null || candidate == null ? false : candidate == "" ? true : searchIn.indexOf(candidate) > -1)) {
			return false;
		}
	}
	return true;
};
hx_strings_Strings.containsAllIgnoreCase = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	searchIn = searchIn.toLowerCase();
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		var searchFor1 = candidate.toLowerCase();
		if(!(searchIn == null || searchFor1 == null ? false : searchFor1 == "" ? true : searchIn.indexOf(searchFor1) > -1)) {
			return false;
		}
	}
	return true;
};
hx_strings_Strings.containsAny = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		if(searchIn == null || candidate == null ? false : candidate == "" ? true : searchIn.indexOf(candidate) > -1) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.containsAnyIgnoreCase = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	searchIn = searchIn.toLowerCase();
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		var searchFor1 = candidate.toLowerCase();
		if(searchIn == null || searchFor1 == null ? false : searchFor1 == "" ? true : searchIn.indexOf(searchFor1) > -1) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.containsNone = function(searchIn,searchFor) {
	return !hx_strings_Strings.containsAny(searchIn,searchFor);
};
hx_strings_Strings.containsNoneIgnoreCase = function(searchIn,searchFor) {
	return !hx_strings_Strings.containsAnyIgnoreCase(searchIn,searchFor);
};
hx_strings_Strings.containsWhitespaces = function(searchIn) {
	if(searchIn == null) {
		return false;
	}
	var _g = 0;
	var _g1 = hx_strings_Strings.toChars(searchIn);
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		if(ch > 8 && ch < 14 || ch == 32) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.countMatches = function(searchIn,searchFor,startAt) {
	if(startAt == null) {
		startAt = 0;
	}
	if(searchIn == null || searchIn.length == 0 || (searchFor == null || searchFor.length == 0) || startAt >= searchIn.length) {
		return 0;
	}
	if(startAt < 0) {
		startAt = 0;
	}
	var count = 0;
	var foundAt = startAt > -1 ? startAt - 1 : 0;
	while(true) {
		foundAt = searchIn.indexOf(searchFor,foundAt + 1);
		if(!(foundAt > -1)) {
			break;
		}
		++count;
	}
	return count;
};
hx_strings_Strings.countMatchesIgnoreCase = function(searchIn,searchFor,startAt) {
	if(startAt == null) {
		startAt = 0;
	}
	if(searchIn == null || searchIn.length == 0 || (searchFor == null || searchFor.length == 0) || startAt >= searchIn.length) {
		return 0;
	}
	if(startAt < 0) {
		startAt = 0;
	}
	searchIn = searchIn.toLowerCase();
	searchFor = searchFor.toLowerCase();
	var count = 0;
	var foundAt = startAt > -1 ? startAt - 1 : 0;
	while(true) {
		foundAt = searchIn.indexOf(searchFor,foundAt + 1);
		if(!(foundAt > -1)) {
			break;
		}
		++count;
	}
	return count;
};
hx_strings_Strings.compare = function(str,other) {
	if(str == null) {
		if(other == null) {
			return 0;
		} else {
			return -1;
		}
	}
	if(other == null) {
		if(str == null) {
			return 0;
		} else {
			return 1;
		}
	}
	if(str > other) {
		return 1;
	} else if(str == other) {
		return 0;
	} else {
		return -1;
	}
};
hx_strings_Strings.compareIgnoreCase = function(str,other) {
	if(str == null) {
		if(other == null) {
			return 0;
		} else {
			return -1;
		}
	}
	if(other == null) {
		if(str == null) {
			return 0;
		} else {
			return 1;
		}
	}
	str = hx_strings_Strings.toLowerCase8(str);
	other = hx_strings_Strings.toLowerCase8(other);
	if(str > other) {
		return 1;
	} else if(str == other) {
		return 0;
	} else {
		return -1;
	}
};
hx_strings_Strings.diff = function(left,right) {
	var diff = new hx_strings_StringDiff();
	diff.at = hx_strings_Strings.diffAt(left,right);
	diff.left = hx_strings_Strings.substr8(left,diff.at);
	diff.right = hx_strings_Strings.substr8(right,diff.at);
	return diff;
};
hx_strings_Strings.diffAt = function(str,other) {
	if(str == other) {
		return -1;
	}
	var strLen = str == null ? 0 : str.length;
	var otherLen = other == null ? 0 : other.length;
	if(strLen == 0 || otherLen == 0) {
		return 0;
	}
	var checkLen = strLen > otherLen ? otherLen : strLen;
	var _g = 0;
	var _g1 = checkLen;
	while(_g < _g1) {
		var i = _g++;
		if(HxOverrides.cca(str,i) != HxOverrides.cca(other,i)) {
			return i;
		}
	}
	return checkLen;
};
hx_strings_Strings.ellipsizeLeft = function(str,maxLength,ellipsis) {
	if(ellipsis == null) {
		ellipsis = "...";
	}
	if((str == null ? 0 : str.length) <= maxLength) {
		return str;
	}
	var ellipsisLen = ellipsis == null ? 0 : ellipsis.length;
	if(maxLength < ellipsisLen) {
		throw haxe_Exception.thrown("[maxLength] must not be smaller than " + ellipsisLen);
	}
	return ellipsis + hx_strings_Strings.right(str,maxLength - ellipsisLen);
};
hx_strings_Strings.ellipsizeMiddle = function(str,maxLength,ellipsis) {
	if(ellipsis == null) {
		ellipsis = "...";
	}
	var strLen = str == null ? 0 : str.length;
	if(strLen <= maxLength) {
		return str;
	}
	var ellipsisLen = ellipsis == null ? 0 : ellipsis.length;
	if(maxLength < ellipsisLen) {
		throw haxe_Exception.thrown("[maxLength] must not be smaller than " + ellipsisLen);
	}
	var maxStrLen = maxLength - ellipsisLen;
	var leftLen = Math.round(maxStrLen / 2);
	var rightLen = maxStrLen - leftLen;
	return ((str == null ? 0 : str.length) <= leftLen ? str : hx_strings_Strings.substring8(str,0,leftLen)) + ellipsis + hx_strings_Strings.right(str,rightLen);
};
hx_strings_Strings.ellipsizeRight = function(str,maxLength,ellipsis) {
	if(ellipsis == null) {
		ellipsis = "...";
	}
	if((str == null ? 0 : str.length) <= maxLength) {
		return str;
	}
	var ellipsisLen = ellipsis == null ? 0 : ellipsis.length;
	if(maxLength < ellipsisLen) {
		throw haxe_Exception.thrown("[maxLength] must not be smaller than " + ellipsisLen);
	}
	var len = maxLength - ellipsisLen;
	return ((str == null ? 0 : str.length) <= len ? str : hx_strings_Strings.substring8(str,0,len)) + ellipsis;
};
hx_strings_Strings.endsWith = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	return StringTools.endsWith(searchIn,searchFor);
};
hx_strings_Strings.endsWithAny = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		if(candidate != null && hx_strings_Strings.endsWith(searchIn,candidate)) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.endsWithAnyIgnoreCase = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	searchIn = hx_strings_Strings.toLowerCase8(searchIn);
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		if(candidate != null && hx_strings_Strings.endsWith(searchIn,hx_strings_Strings.toLowerCase8(candidate))) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.endsWithIgnoreCase = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	return hx_strings_Strings.endsWith(searchIn.toLowerCase(),searchFor.toLowerCase());
};
hx_strings_Strings.equals = function(str,other) {
	return str == other;
};
hx_strings_Strings.equalsIgnoreCase = function(str,other) {
	return hx_strings_Strings.toLowerCase8(str) == hx_strings_Strings.toLowerCase8(other);
};
hx_strings_Strings.filter = function(str,filter,separator) {
	if(separator == null) {
		separator = "";
	}
	if(str == null || str.length == 0) {
		return str;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = hx_strings_Strings.split8(str,[separator]);
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(filter(v)) {
			_g.push(v);
		}
	}
	return _g.join(separator);
};
hx_strings_Strings.filterChars = function(str,filter) {
	if(str == null || str.length == 0) {
		return str;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = hx_strings_Strings.toChars(str);
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(filter(v)) {
			_g.push(v);
		}
	}
	var _this = _g;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = String.fromCodePoint(_this[i]);
	}
	return result.join("");
};
hx_strings_Strings.getFuzzyDistance = function(left,right) {
	if(left == null || left.length == 0 || (right == null || right.length == 0)) {
		return 0;
	}
	left = hx_strings_Strings.toLowerCase8(left);
	right = hx_strings_Strings.toLowerCase8(right);
	var leftChars = hx_strings_Strings.toChars(left);
	var rightChars = hx_strings_Strings.toChars(right);
	var leftLastMatchAt = -100;
	var rightLastMatchAt = -100;
	var score = 0;
	var _g = 0;
	var _g1 = leftChars.length;
	while(_g < _g1) {
		var leftIdx = _g++;
		var leftChar = leftChars[leftIdx];
		var _g2 = rightLastMatchAt > -1 ? rightLastMatchAt + 1 : 0;
		var _g3 = rightChars.length;
		while(_g2 < _g3) {
			var rightIdx = _g2++;
			var rightChar = rightChars[rightIdx];
			if(leftChar == rightChar) {
				++score;
				if(leftLastMatchAt == leftIdx - 1 && rightLastMatchAt == rightIdx - 1) {
					score += 2;
				}
				leftLastMatchAt = leftIdx;
				rightLastMatchAt = rightIdx;
				break;
			}
		}
	}
	return score;
};
hx_strings_Strings.getLevenshteinDistance = function(left,right) {
	var leftLen = left == null ? 0 : left.length;
	var rightLen = right == null ? 0 : right.length;
	if(leftLen == 0) {
		return rightLen;
	}
	if(rightLen == 0) {
		return leftLen;
	}
	if(leftLen > rightLen) {
		var tmp = left;
		left = right;
		right = tmp;
		var tmpLen = leftLen;
		leftLen = rightLen;
		rightLen = tmpLen;
	}
	var prevCosts = [];
	var costs = [];
	var _g = 0;
	var _g1 = leftLen + 1;
	while(_g < _g1) {
		var leftIdx = _g++;
		prevCosts.push(leftIdx);
		costs.push(0);
	}
	var leftChars = hx_strings_Strings.toChars(left);
	var rightChars = hx_strings_Strings.toChars(right);
	var min = function(a,b) {
		if(a > b) {
			return b;
		} else {
			return a;
		}
	};
	var _g = 1;
	var _g1 = rightLen + 1;
	while(_g < _g1) {
		var rightIdx = _g++;
		var rightChar = rightChars[rightIdx - 1];
		costs[0] = rightIdx;
		var _g2 = 1;
		var _g3 = leftLen + 1;
		while(_g2 < _g3) {
			var leftIdx = _g2++;
			var leftIdxMinus1 = leftIdx - 1;
			var cost = leftChars[leftIdxMinus1] == rightChar ? 0 : 1;
			costs[leftIdx] = min(min(costs[leftIdxMinus1] + 1,prevCosts[leftIdx] + 1),prevCosts[leftIdxMinus1] + cost);
		}
		var tmp = prevCosts;
		prevCosts = costs;
		costs = tmp;
	}
	return prevCosts[leftLen];
};
hx_strings_Strings.getLongestCommonSubstring = function(left,right) {
	if(left == null || right == null) {
		return null;
	}
	var leftLen = left == null ? 0 : left.length;
	var rightLen = right == null ? 0 : right.length;
	if(leftLen == 0 || rightLen == 0) {
		return "";
	}
	var leftChars = hx_strings_Strings.toChars(left);
	var rightChars = hx_strings_Strings.toChars(right);
	var leftSubStartAt = 0;
	var leftSubLen = 0;
	var _g = 0;
	var _g1 = leftLen;
	while(_g < _g1) {
		var leftIdx = _g++;
		var _g2 = 0;
		var _g3 = rightLen;
		while(_g2 < _g3) {
			var rightIdx = _g2++;
			var currLen = 0;
			while(leftChars[leftIdx + currLen] == rightChars[rightIdx + currLen]) {
				++currLen;
				if(leftIdx + currLen >= leftLen || rightIdx + currLen >= rightLen) {
					break;
				}
			}
			if(currLen > leftSubLen) {
				leftSubLen = currLen;
				leftSubStartAt = leftIdx;
			}
		}
	}
	return hx_strings_Strings.substr8(left,leftSubStartAt,leftSubLen);
};
hx_strings_Strings.hashCode = function(str,algo) {
	if(str == null || str.length == 0) {
		return 0;
	}
	if(algo == null) {
		algo = hx_strings_HashCodeAlgorithm.PLATFORM_SPECIFIC;
	}
	if(algo == null) {
		return haxe_crypto_Crc32.make(str == null ? null : haxe_io_Bytes.ofString(str));
	} else {
		switch(algo._hx_index) {
		case 1:
			return haxe_crypto_Adler32.make(str == null ? null : haxe_io_Bytes.ofString(str));
		case 2:
			return haxe_crypto_Crc32.make(str == null ? null : haxe_io_Bytes.ofString(str));
		case 3:
			var hc = 5381;
			var _g = 0;
			var _g1 = hx_strings_Strings.toChars(str);
			while(_g < _g1.length) {
				var ch = _g1[_g];
				++_g;
				hc = ((hc << 5) + hc | 0) ^ ch;
			}
			return hc;
		case 4:
			var hc = 0;
			var _g = 0;
			var _g1 = hx_strings_Strings.toChars(str);
			while(_g < _g1.length) {
				var ch = _g1[_g];
				++_g;
				hc = ((hc << 5) - hc | 0) + ch | 0;
			}
			return hc;
		case 5:
			var hc = 0;
			var _g = 0;
			var _g1 = hx_strings_Strings.toChars(str);
			while(_g < _g1.length) {
				var ch = _g1[_g];
				++_g;
				hc = (((hc << 6) + (hc << 16) | 0) - hc | 0) + ch | 0;
			}
			return hc;
		default:
			return haxe_crypto_Crc32.make(str == null ? null : haxe_io_Bytes.ofString(str));
		}
	}
};
hx_strings_Strings.htmlDecode = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var _this = hx_strings_Strings.REGEX_HTML_UNESCAPE;
	return new hx_strings__$Pattern_MatcherImpl(_this.ereg,_this.pattern,_this.options,str).map(function(m) {
		var match = m.matched();
		switch(match) {
		case "&amp;":
			return "&";
		case "&apos;":
			return "'";
		case "&gt;":
			return ">";
		case "&lt;":
			return "<";
		case "&nbsp;":
			return " ";
		case "&quot;":
			return "\"";
		default:
			var this1 = Std.parseInt(hx_strings_Strings.substr8(match,2,(match == null ? 0 : match.length) - 3));
			return String.fromCodePoint(this1);
		}
	});
};
hx_strings_Strings.htmlEncode = function(str,escapeQuotes) {
	if(escapeQuotes == null) {
		escapeQuotes = false;
	}
	if(str == null || str.length == 0) {
		return str;
	}
	var sb = new hx_strings_StringBuilder();
	var isFirstSpace = true;
	var _g = 0;
	var _g1 = str == null ? 0 : str.length;
	while(_g < _g1) {
		var i = _g++;
		var ch = HxOverrides.cca(str,i);
		switch(ch) {
		case 32:
			if(isFirstSpace) {
				sb.add(" ");
				isFirstSpace = false;
			} else {
				sb.add("&nbsp;");
			}
			break;
		case 34:
			sb.add(escapeQuotes ? "&quot;" : "\"");
			break;
		case 38:
			sb.add("&amp;");
			break;
		case 39:
			sb.add(escapeQuotes ? "&#039;" : "'");
			break;
		case 60:
			sb.add("&lt;");
			break;
		case 62:
			sb.add("&gt;");
			break;
		default:
			if(ch > 127) {
				sb.add("&#").add(Std.string(ch)).add(";");
			} else {
				sb.addChar(ch);
			}
		}
		if(ch != 32) {
			isFirstSpace = true;
		}
	}
	return sb.toString();
};
hx_strings_Strings.insertAt = function(str,pos,insertion) {
	if(str == null) {
		return null;
	}
	var strLen = str == null ? 0 : str.length;
	if(pos < 0) {
		pos = strLen + pos;
	}
	if(pos < 0 || pos > strLen) {
		throw haxe_Exception.thrown("Absolute value of [pos] must be <= str.length");
	}
	if(insertion == null || insertion.length == 0) {
		return str;
	}
	return hx_strings_Strings.substring8(str,0,pos) + insertion + hx_strings_Strings.substring8(str,pos);
};
hx_strings_Strings.ifBlank = function(str,fallback) {
	if(str == null ? true : StringTools.trim(str).length == 0) {
		return fallback;
	} else {
		return str;
	}
};
hx_strings_Strings.ifEmpty = function(str,fallback) {
	if(str == null || str.length == 0) {
		return fallback;
	} else {
		return str;
	}
};
hx_strings_Strings.ifNull = function(str,fallback) {
	if(str == null) {
		return fallback;
	} else {
		return str;
	}
};
hx_strings_Strings.indentLines = function(str,indentWith) {
	if(str == null) {
		return null;
	}
	if(str.length == 0 || (indentWith == null || indentWith.length == 0)) {
		return str;
	}
	var isFirstLine = true;
	var sb = new hx_strings_StringBuilder();
	var _g = 0;
	var _g1 = hx_strings_Strings.REGEX_SPLIT_LINES.ereg.split(str);
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		if(isFirstLine) {
			isFirstLine = false;
		} else {
			sb.newLine();
		}
		sb.add(indentWith);
		sb.add(line);
	}
	return sb.toString();
};
hx_strings_Strings.indexOf8 = function(str,searchFor,startAt) {
	if(startAt == null) {
		startAt = 0;
	}
	if(str == null || searchFor == null) {
		return -1;
	}
	var strLen = str == null ? 0 : str.length;
	var searchForLen = searchFor == null ? 0 : searchFor.length;
	if(startAt < 0) {
		startAt = 0;
	}
	if(searchForLen == 0) {
		if(startAt == 0) {
			return 0;
		}
		if(startAt > 0 && startAt < strLen) {
			return startAt;
		}
		return strLen;
	}
	if(startAt >= strLen) {
		return -1;
	}
	return str.indexOf(searchFor,startAt);
};
hx_strings_Strings.isBlank = function(str) {
	if(str == null) {
		return true;
	} else {
		return StringTools.trim(str).length == 0;
	}
};
hx_strings_Strings.isDigits = function(str) {
	if(str == null || str.length == 0) {
		return false;
	}
	var _g = 0;
	var _g1 = str == null ? 0 : str.length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = HxOverrides.cca(str,i);
		if(!(this1 > 47 && this1 < 58)) {
			return false;
		}
	}
	return true;
};
hx_strings_Strings.isEmpty = function(str) {
	if(str != null) {
		return str.length == 0;
	} else {
		return true;
	}
};
hx_strings_Strings.isNotBlank = function(str) {
	if(str != null) {
		return StringTools.trim(str).length > 0;
	} else {
		return false;
	}
};
hx_strings_Strings.isNotEmpty = function(str) {
	if(str != null) {
		return str.length > 0;
	} else {
		return false;
	}
};
hx_strings_Strings.isLowerCase = function(str) {
	if(str == null || str.length == 0) {
		return false;
	}
	return str == hx_strings_Strings.toLowerCase8(str);
};
hx_strings_Strings.isUpperCase = function(str) {
	if(str == null || str.length == 0) {
		return false;
	}
	return str == hx_strings_Strings.toUpperCase8(str);
};
hx_strings_Strings.iterate = function(str,callback,separator) {
	if(separator == null) {
		separator = "";
	}
	if(str == null || str.length == 0) {
		return;
	}
	var _g = 0;
	var _g1 = hx_strings_Strings.split8(str,[separator]);
	while(_g < _g1.length) {
		var sub = _g1[_g];
		++_g;
		callback(sub);
	}
};
hx_strings_Strings.iterateChars = function(str,callback) {
	if(str == null || str.length == 0) {
		return;
	}
	var _g = 0;
	var _g1 = str == null ? 0 : str.length;
	while(_g < _g1) {
		var i = _g++;
		callback(HxOverrides.cca(str,i));
	}
};
hx_strings_Strings.lastIndexOf8 = function(str,searchFor,startAt) {
	if(str == null || searchFor == null) {
		return -1;
	}
	var strLen = str == null ? 0 : str.length;
	var searchForLen = searchFor == null ? 0 : searchFor.length;
	if(startAt == null) {
		startAt = strLen;
	}
	if(searchForLen == 0) {
		if(startAt < 0) {
			return 0;
		}
		if(startAt > strLen) {
			return strLen;
		}
		return startAt;
	}
	if(startAt < 0) {
		return -1;
	} else if(startAt >= strLen) {
		startAt = strLen - 1;
	}
	var strNeedsUTF8Workaround = str.length != strLen;
	var searchForNeedsUTF8Workaround = searchFor.length != searchForLen;
	if(!strNeedsUTF8Workaround && !searchForNeedsUTF8Workaround) {
		return str.lastIndexOf(searchFor,startAt);
	}
	if(searchForNeedsUTF8Workaround && !strNeedsUTF8Workaround) {
		return -1;
	}
	var searchForChars = hx_strings_Strings.toChars(searchFor);
	startAt += searchForLen - 1;
	var searchForPosToCheck = searchForLen - 1;
	var strPos = strLen;
	while(strPos-- > 0) {
		if(strPos > startAt) {
			continue;
		}
		var strCh = HxOverrides.cca(str,strPos);
		if(strCh == searchForChars[searchForPosToCheck]) {
			if(searchForPosToCheck == 0) {
				return strPos;
			}
			--searchForPosToCheck;
		} else {
			searchForPosToCheck = searchForLen - 1;
		}
	}
	return -1;
};
hx_strings_Strings.length8 = function(str) {
	if(str == null) {
		return 0;
	}
	return str.length;
};
hx_strings_Strings.left = function(str,len) {
	if((str == null ? 0 : str.length) <= len) {
		return str;
	}
	return hx_strings_Strings.substring8(str,0,len);
};
hx_strings_Strings.lpad = function(str,targetLength,padStr,canOverflow) {
	if(canOverflow == null) {
		canOverflow = true;
	}
	if(padStr == null) {
		padStr = " ";
	}
	var strLen = str == null ? 0 : str.length;
	if(str == null || strLen > targetLength) {
		return str;
	}
	if(padStr == null || padStr.length == 0) {
		padStr = " ";
	}
	var sb = [str];
	var padLen = padStr == null ? 0 : padStr.length;
	while(strLen < targetLength) {
		sb.unshift(padStr);
		strLen += padLen;
	}
	if(canOverflow) {
		return sb.join("");
	}
	return hx_strings_Strings.right(sb.join(""),targetLength);
};
hx_strings_Strings.map = function(str,mapper,separator) {
	if(separator == null) {
		separator = "";
	}
	if(str == null) {
		return null;
	}
	if(separator == null) {
		throw haxe_Exception.thrown("[separator] must not be null");
	}
	var _this = hx_strings_Strings.split8(str,[separator]);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = mapper(_this[i]);
	}
	return result;
};
hx_strings_Strings.prependIfMissing = function(str,suffix) {
	if(str == null) {
		return null;
	}
	if(str.length == 0) {
		return suffix + str;
	}
	if(hx_strings_Strings.startsWith(str,suffix)) {
		return str;
	}
	return suffix + str;
};
hx_strings_Strings.quoteDouble = function(str) {
	if(str == null) {
		return str;
	}
	if(str.length == 0) {
		return "\"\"";
	}
	if(!(str == null ? false : str.indexOf("\"") > -1)) {
		return "\"" + str + "\"";
	}
	return "\"" + hx_strings_Strings.replaceAll(str,"\"","\\\"") + "\"";
};
hx_strings_Strings.quoteSingle = function(str) {
	if(str == null) {
		return str;
	}
	if(str.length == 0) {
		return "''";
	}
	if(!(str == null ? false : str.indexOf("'") > -1)) {
		return "'" + str + "'";
	}
	return "'" + hx_strings_Strings.replaceAll(str,"'","\\'") + "'";
};
hx_strings_Strings.removeAfter = function(str,searchFor) {
	return hx_strings_Strings.substringBefore(str,searchFor);
};
hx_strings_Strings.removeAfterLast = function(str,searchFor) {
	return hx_strings_Strings.substringBeforeLast(str,searchFor);
};
hx_strings_Strings.removeAfterIgnoreCase = function(str,searchFor) {
	return hx_strings_Strings.substringBeforeIgnoreCase(str,searchFor);
};
hx_strings_Strings.removeAfterLastIgnoreCase = function(str,searchFor) {
	return hx_strings_Strings.substringBeforeLastIgnoreCase(str,searchFor);
};
hx_strings_Strings.removeAt = function(str,pos,length) {
	if(str == null || str.length == 0 || length < 1) {
		return str;
	}
	var strLen = str == null ? 0 : str.length;
	if(pos < 0) {
		pos = strLen + pos;
	}
	if(pos < 0) {
		throw haxe_Exception.thrown("[pos] must be smaller than -1 * str.length");
	}
	if(pos + length >= strLen) {
		return hx_strings_Strings.substring8(str,0,pos);
	}
	return hx_strings_Strings.substring8(str,0,pos) + hx_strings_Strings.substring8(str,pos + length);
};
hx_strings_Strings.removeBefore = function(str,searchFor) {
	return hx_strings_Strings.substringAfter(str,searchFor);
};
hx_strings_Strings.removeBeforeLast = function(str,searchFor) {
	return hx_strings_Strings.substringAfterLast(str,searchFor);
};
hx_strings_Strings.removeBeforeIgnoreCase = function(str,searchFor) {
	return hx_strings_Strings.substringAfterIgnoreCase(str,searchFor);
};
hx_strings_Strings.removeBeforeLastIgnoreCase = function(str,searchFor) {
	return hx_strings_Strings.substringAfterLastIgnoreCase(str,searchFor);
};
hx_strings_Strings.removeAll = function(searchIn,searchFor) {
	return hx_strings_Strings.replaceAll(searchIn,searchFor,"");
};
hx_strings_Strings.removeFirst = function(searchIn,searchFor) {
	return hx_strings_Strings.replaceFirst(searchIn,searchFor,"");
};
hx_strings_Strings.removeFirstIgnoreCase = function(searchIn,searchFor) {
	return hx_strings_Strings.replaceFirstIgnoreCase(searchIn,searchFor,"");
};
hx_strings_Strings.removeAnsi = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	return str.replace(hx_strings_Strings.REGEX_ANSI_ESC.ereg.r,"");
};
hx_strings_Strings.removeLeading = function(searchIn,searchFor) {
	if(searchIn == null || searchIn.length == 0 || (searchFor == null || searchFor.length == 0)) {
		return searchIn;
	}
	while(hx_strings_Strings.startsWith(searchIn,searchFor)) searchIn = searchIn.substring(searchFor.length,searchIn.length);
	return searchIn;
};
hx_strings_Strings.removeTags = function(xml) {
	if(xml == null || xml.length == 0) {
		return xml;
	}
	return xml.replace(hx_strings_Strings.REGEX_REMOVE_XML_TAGS.ereg.r,"");
};
hx_strings_Strings.removeTrailing = function(searchIn,searchFor) {
	if(searchIn == null || searchIn.length == 0 || (searchFor == null || searchFor.length == 0)) {
		return searchIn;
	}
	while(hx_strings_Strings.endsWith(searchIn,searchFor)) searchIn = searchIn.substring(0,searchIn.length - searchFor.length);
	return searchIn;
};
hx_strings_Strings.repeat = function(str,count,separator) {
	if(separator == null) {
		separator = "";
	}
	if(str == null) {
		return null;
	}
	if(count < 1) {
		return "";
	}
	if(count == 1) {
		return str;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = count;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(str);
	}
	return _g.join(separator);
};
hx_strings_Strings.replaceAll = function(searchIn,searchFor,replaceWith) {
	if(searchIn == null || (searchIn == null || searchIn.length == 0) || searchFor == null) {
		return searchIn;
	}
	if(replaceWith == null) {
		replaceWith = "null";
	}
	return StringTools.replace(searchIn,searchFor,replaceWith);
};
hx_strings_Strings.replaceFirst = function(searchIn,searchFor,replaceWith) {
	if(searchIn == null || (searchIn == null || searchIn.length == 0) || searchFor == null) {
		return searchIn;
	}
	if(replaceWith == null) {
		replaceWith = "null";
	}
	var foundAt;
	if(searchFor.length == 0) {
		if((searchIn == null ? 0 : searchIn.length) > 1) {
			foundAt = 1;
		} else {
			return searchIn;
		}
	} else {
		foundAt = hx_strings_Strings.indexOf8(searchIn,searchFor);
	}
	return hx_strings_Strings.substr8(searchIn,0,foundAt) + replaceWith + hx_strings_Strings.substr8(searchIn,foundAt + (searchFor == null ? 0 : searchFor.length));
};
hx_strings_Strings.replaceFirstIgnoreCase = function(searchIn,searchFor,replaceWith) {
	if(searchIn == null || (searchIn == null || searchIn.length == 0) || searchFor == null) {
		return searchIn;
	}
	if(replaceWith == null) {
		replaceWith = "null";
	}
	searchFor = searchFor.toLowerCase();
	var foundAt;
	if(searchFor.length == 0) {
		if((searchIn == null ? 0 : searchIn.length) > 1) {
			foundAt = 1;
		} else {
			return searchIn;
		}
	} else {
		foundAt = hx_strings_Strings.indexOf8(searchIn.toLowerCase(),searchFor);
	}
	return hx_strings_Strings.substr8(searchIn,0,foundAt) + replaceWith + hx_strings_Strings.substr8(searchIn,foundAt + (searchFor == null ? 0 : searchFor.length));
};
hx_strings_Strings.reverse = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var chars = hx_strings_Strings.split8(str,[""]);
	chars.reverse();
	return chars.join("");
};
hx_strings_Strings.right = function(str,len) {
	if(str == null || str.length == 0) {
		return str;
	}
	return hx_strings_Strings.substring8(str,(str == null ? 0 : str.length) - len);
};
hx_strings_Strings.rpad = function(str,targetLength,padStr,canOverflow) {
	if(canOverflow == null) {
		canOverflow = true;
	}
	if(padStr == null) {
		padStr = " ";
	}
	var strLen = str == null ? 0 : str.length;
	if(str == null || strLen > targetLength) {
		return str;
	}
	if(padStr == null || padStr.length == 0) {
		padStr = " ";
	}
	var padLen = padStr == null ? 0 : padStr.length;
	var sb = new hx_strings_StringBuilder(str);
	while(strLen < targetLength) {
		sb.add(padStr);
		strLen += padLen;
	}
	if(canOverflow) {
		return sb.toString();
	}
	var str = sb.toString();
	if((str == null ? 0 : str.length) <= targetLength) {
		return str;
	} else {
		return hx_strings_Strings.substring8(str,0,targetLength);
	}
};
hx_strings_Strings.split8 = function(str,separator,maxParts) {
	if(maxParts == null) {
		maxParts = 0;
	}
	if(str == null || separator == null) {
		return null;
	}
	var strLen = str == null ? 0 : str.length;
	if(strLen == 0) {
		return [];
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = separator;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null) {
			_g.push(v);
		}
	}
	var separators = _g;
	if(separators.length == 0) {
		return null;
	}
	if(maxParts <= 0 && separators.length == 1) {
		return str.split(separators[0]);
	}
	if(separators.indexOf("") > -1) {
		if(maxParts <= 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = strLen;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(HxOverrides.substr(str,i,1));
			}
			return _g;
		}
		if(maxParts > strLen) {
			maxParts = strLen;
		}
		--maxParts;
		var _g = [];
		var _g1 = 0;
		var _g2 = maxParts;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(HxOverrides.substr(str,i,1));
		}
		var result = _g;
		result.push(HxOverrides.substr(str,maxParts,strLen - maxParts));
		return result;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < separators.length) {
		var sep = separators[_g1];
		++_g1;
		_g.push(sep == null ? 0 : sep.length);
	}
	var separatorsLengths = _g;
	var lastFoundAt = 0;
	var result = [];
	var resultCount = 0;
	while(true) {
		var separatorLen = 0;
		var foundAt = -1;
		var _g = 0;
		var _g1 = separators.length;
		while(_g < _g1) {
			var i = _g++;
			var sepFoundAt = hx_strings_Strings.indexOf8(str,separators[i],lastFoundAt);
			if(sepFoundAt != -1) {
				if(foundAt == -1 || sepFoundAt < foundAt) {
					foundAt = sepFoundAt;
					separatorLen = separatorsLengths[i];
				}
			}
		}
		++resultCount;
		if(foundAt == -1 || resultCount == maxParts) {
			result.push(HxOverrides.substr(str,lastFoundAt,strLen - lastFoundAt));
			break;
		}
		result.push(HxOverrides.substr(str,lastFoundAt,foundAt - lastFoundAt));
		lastFoundAt = foundAt + separatorLen;
	}
	return result;
};
hx_strings_Strings.splitAt = function(str,splitPos) {
	if(str == null) {
		return null;
	}
	if(splitPos == null || splitPos.length == 0) {
		return [str];
	}
	var strLen = str == null ? 0 : str.length;
	if(strLen == 0) {
		return [str];
	}
	var pos = [];
	var _g = 0;
	var _g1 = splitPos;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p < 0) {
			p = strLen + p;
		}
		if(p < 0 || p >= strLen) {
			continue;
		}
		if(pos.indexOf(p) > -1) {
			continue;
		}
		pos.push(p);
	}
	pos.sort(function(a,b) {
		if(a < b) {
			return -1;
		} else if(a > b) {
			return 1;
		} else {
			return 0;
		}
	});
	var result = [];
	var lastPos = 0;
	var _g = 0;
	while(_g < pos.length) {
		var p = pos[_g];
		++_g;
		var chunk = hx_strings_Strings.substring8(str,lastPos,p);
		if(chunk != null && chunk.length > 0) {
			result.push(chunk);
		}
		lastPos = p;
	}
	var chunk = hx_strings_Strings.substring8(str,lastPos);
	if(chunk != null && chunk.length > 0) {
		result.push(chunk);
	}
	return result;
};
hx_strings_Strings.splitEvery = function(str,count) {
	if(str == null) {
		return null;
	}
	if(count < 1) {
		throw haxe_Exception.thrown("[count] must be greater than 0");
	}
	var strLen = str == null ? 0 : str.length;
	if(strLen == 0 || count >= strLen) {
		return [str];
	}
	var result = [];
	var pos = 0;
	while(true) {
		var chunk = hx_strings_Strings.substr8(str,pos,count);
		pos += count;
		if(chunk == null || chunk.length == 0) {
			break;
		}
		result.push(chunk);
	}
	return result;
};
hx_strings_Strings.splitLines = function(str) {
	if(str == null || str.length == 0) {
		return [];
	} else {
		return hx_strings_Strings.REGEX_SPLIT_LINES.ereg.split(str);
	}
};
hx_strings_Strings.startsWith = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	if(searchFor == null || searchFor.length == 0 || searchIn == searchFor) {
		return true;
	}
	return StringTools.startsWith(searchIn,searchFor);
};
hx_strings_Strings.startsWithAny = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		if(candidate != null && hx_strings_Strings.startsWith(searchIn,candidate)) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.startsWithAnyIgnoreCase = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	searchIn = hx_strings_Strings.toLowerCase8(searchIn);
	var _g = 0;
	while(_g < searchFor.length) {
		var candidate = searchFor[_g];
		++_g;
		if(candidate != null && hx_strings_Strings.startsWith(searchIn,hx_strings_Strings.toLowerCase8(candidate))) {
			return true;
		}
	}
	return false;
};
hx_strings_Strings.startsWithIgnoreCase = function(searchIn,searchFor) {
	if(searchIn == null || searchFor == null) {
		return false;
	}
	if(searchFor == null || searchFor.length == 0) {
		return true;
	}
	return hx_strings_Strings.startsWith(searchIn.toLowerCase(),searchFor.toLowerCase());
};
hx_strings_Strings.substr8 = function(str,startAt,len) {
	if(str == null || str.length == 0) {
		return str;
	}
	if(len == null) {
		len = str == null ? 0 : str.length;
	}
	if(len <= 0) {
		return "";
	}
	if(startAt < 0) {
		startAt += str == null ? 0 : str.length;
		if(startAt < 0) {
			startAt = 0;
		}
	}
	return HxOverrides.substr(str,startAt,len);
};
hx_strings_Strings.substring8 = function(str,startAt,endAt) {
	if(str == null || str.length == 0) {
		return str;
	}
	if(endAt == null) {
		endAt = str == null ? 0 : str.length;
	}
	return str.substring(startAt,endAt);
};
hx_strings_Strings.substringAfter = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundAt = str.indexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(foundAt + searchFor.length);
};
hx_strings_Strings.substringAfterIgnoreCase = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	searchFor = searchFor.toLowerCase();
	var foundAt = str.toLowerCase().indexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(foundAt + searchFor.length);
};
hx_strings_Strings.substringBetween = function(str,after,before,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(before == null) {
		before = after;
	}
	if(str == "" || (after == null || after.length == 0) || (before == null || before.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundAfterAt = str.indexOf(after);
	if(foundAfterAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundBeforeAt = str.indexOf(before,foundAfterAt + after.length);
	if(foundBeforeAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(foundAfterAt + after.length,foundBeforeAt);
};
hx_strings_Strings.substringBetweenIgnoreCase = function(str,after,before,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(before == null) {
		before = after;
	}
	if(str == "" || (after == null || after.length == 0) || (before == null || before.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var strLower = hx_strings_Strings.toLowerCase8(str);
	after = hx_strings_Strings.toLowerCase8(after);
	before = hx_strings_Strings.toLowerCase8(before);
	var foundAfterAt = strLower.indexOf(after);
	if(foundAfterAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundBeforeAt = strLower.indexOf(before,foundAfterAt + after.length);
	if(foundBeforeAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(foundAfterAt + after.length,foundBeforeAt);
};
hx_strings_Strings.substringAfterLast = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundAt = str.lastIndexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(foundAt + searchFor.length);
};
hx_strings_Strings.substringAfterLastIgnoreCase = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	searchFor = searchFor.toLowerCase();
	var foundAt = str.toLowerCase().lastIndexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(foundAt + searchFor.length);
};
hx_strings_Strings.substringBefore = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundAt = str.indexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(0,foundAt);
};
hx_strings_Strings.substringBeforeIgnoreCase = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	searchFor = searchFor.toLowerCase();
	var foundAt = str.toLowerCase().indexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(0,foundAt);
};
hx_strings_Strings.substringBeforeLast = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	var foundAt = str.lastIndexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(0,foundAt);
};
hx_strings_Strings.substringBeforeLastIgnoreCase = function(str,searchFor,notFoundDefault) {
	if(notFoundDefault == null) {
		notFoundDefault = 2;
	}
	if(str == null) {
		return null;
	}
	if(str == "" || (searchFor == null || searchFor.length == 0)) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	searchFor = searchFor.toLowerCase();
	var foundAt = str.toLowerCase().lastIndexOf(searchFor);
	if(foundAt == -1) {
		switch(notFoundDefault) {
		case 1:
			return null;
		case 2:
			return "";
		case 3:
			return str;
		}
	}
	return str.substring(0,foundAt);
};
hx_strings_Strings.toBool = function(str) {
	if(str == null || str.length == 0) {
		return false;
	}
	switch(str.toLowerCase()) {
	case "0":case "false":case "no":
		return false;
	default:
		return true;
	}
};
hx_strings_Strings.toBytes = function(str) {
	if(str == null) {
		return null;
	}
	return haxe_io_Bytes.ofString(str);
};
hx_strings_Strings.toChar = function(charCode) {
	return charCode;
};
hx_strings_Strings.toCharIterator = function(str) {
	if(str == null) {
		return hx_strings__$CharIterator_NullCharIterator.INSTANCE;
	} else {
		return new hx_strings__$CharIterator_StringCharIterator(str,0);
	}
};
hx_strings_Strings.toChars = function(str) {
	if(str == null) {
		return null;
	}
	var strLen = str == null ? 0 : str.length;
	if(strLen == 0) {
		return [];
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = strLen;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(HxOverrides.cca(str,i));
	}
	return _g;
};
hx_strings_Strings.toPattern = function(str,options) {
	if(str == null) {
		return null;
	}
	return hx_strings_Pattern.compile(str,options);
};
hx_strings_Strings.toEReg = function(str,opt) {
	if(opt == null) {
		opt = "";
	}
	if(str == null) {
		return null;
	}
	return new EReg(str,opt);
};
hx_strings_Strings.toFloat = function(str,ifUnparseable) {
	var result = parseFloat(str);
	if(isNaN(result)) {
		return ifUnparseable;
	}
	return result;
};
hx_strings_Strings.toHex = function(num,minDigits,upperCase) {
	if(upperCase == null) {
		upperCase = true;
	}
	if(minDigits == null) {
		minDigits = 0;
	}
	var hexed = StringTools.hex(num,0);
	if(!upperCase) {
		return hexed.toLowerCase();
	}
	if(hexed.length >= minDigits) {
		return hexed;
	}
	return hx_strings_Strings.lpad(hexed,minDigits,"0");
};
hx_strings_Strings.toInt = function(str,ifUnparseable) {
	var result = Std.parseInt(str);
	if(result == null) {
		return ifUnparseable;
	}
	return result;
};
hx_strings_Strings.toLowerCase8 = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	return str.toLowerCase();
};
hx_strings_Strings.toLowerCaseFirstChar = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var this1 = HxOverrides.cca(str,0);
	var lowerChar = hx_strings_Char.CHAR_CASE_MAPPER.mapU2L.h[this1];
	var firstChar = lowerChar == null ? this1 : lowerChar;
	if(str.length == 1) {
		return String.fromCodePoint(firstChar);
	}
	var other = hx_strings_Strings.substr8(str,1);
	return String.fromCodePoint(firstChar) + other;
};
hx_strings_Strings.toLowerCamel = function(str,keepUppercasedWords) {
	if(keepUppercasedWords == null) {
		keepUppercasedWords = true;
	}
	if(str == null || str.length == 0) {
		return str;
	}
	var sb = new hx_strings_StringBuilder();
	if(keepUppercasedWords) {
		var _g = 0;
		var _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(str);
		while(_g < _g1.length) {
			var word = _g1[_g];
			++_g;
			sb.add(hx_strings_Strings.toUpperCaseFirstChar(word));
		}
	} else {
		var _g = 0;
		var _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(str);
		while(_g < _g1.length) {
			var word = _g1[_g];
			++_g;
			sb.add(hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(word)));
		}
	}
	return hx_strings_Strings.toLowerCaseFirstChar(sb.toString());
};
hx_strings_Strings.toLowerHyphen = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var _this = hx_strings_Strings._splitAsciiWordsUnsafe(str);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = hx_strings_Strings.toLowerCase8(_this[i]);
	}
	return result.join("-");
};
hx_strings_Strings.toLowerUnderscore = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var _this = hx_strings_Strings._splitAsciiWordsUnsafe(str);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = hx_strings_Strings.toLowerCase8(_this[i]);
	}
	return result.join("_");
};
hx_strings_Strings.toTitle = function(str,keepUppercasedWords) {
	if(keepUppercasedWords == null) {
		keepUppercasedWords = true;
	}
	if(str == null || str.length == 0) {
		return str;
	}
	if(keepUppercasedWords) {
		var _this = hx_strings_Strings._splitAsciiWordsUnsafe(str);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var s = _this[i];
			result[i] = hx_strings_Strings.toUpperCase8(s) == s ? s : hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(s));
		}
		return result.join(" ");
	}
	var _this = hx_strings_Strings._splitAsciiWordsUnsafe(str);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(_this[i]));
	}
	return result.join(" ");
};
hx_strings_Strings.toUpperCamel = function(str,keepUppercasedWords) {
	if(keepUppercasedWords == null) {
		keepUppercasedWords = true;
	}
	if(str == null || str.length == 0) {
		return str;
	}
	var sb = new hx_strings_StringBuilder();
	if(keepUppercasedWords) {
		var _g = 0;
		var _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(str);
		while(_g < _g1.length) {
			var word = _g1[_g];
			++_g;
			sb.add(hx_strings_Strings.toUpperCaseFirstChar(word));
		}
	} else {
		var _g = 0;
		var _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(str);
		while(_g < _g1.length) {
			var word = _g1[_g];
			++_g;
			sb.add(hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(word)));
		}
	}
	return sb.toString();
};
hx_strings_Strings.toUpperUnderscore = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var _this = hx_strings_Strings._splitAsciiWordsUnsafe(str);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = hx_strings_Strings.toUpperCase8(_this[i]);
	}
	return result.join("_");
};
hx_strings_Strings.toString = function(str) {
	if(str == null) {
		return "null";
	} else {
		return str;
	}
};
hx_strings_Strings.toUpperCase8 = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var sb = new hx_strings_StringBuilder();
	var _g = 0;
	var _g1 = str == null ? 0 : str.length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = HxOverrides.cca(str,i);
		var upperChar = hx_strings_Char.CHAR_CASE_MAPPER.mapL2U.h[this1];
		sb.addChar(upperChar == null ? this1 : upperChar);
	}
	return sb.toString();
};
hx_strings_Strings.toUpperCaseFirstChar = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	var this1 = HxOverrides.cca(str,0);
	var upperChar = hx_strings_Char.CHAR_CASE_MAPPER.mapL2U.h[this1];
	var firstChar = upperChar == null ? this1 : upperChar;
	if(str.length == 1) {
		return String.fromCodePoint(firstChar);
	}
	var other = hx_strings_Strings.substr8(str,1);
	return String.fromCodePoint(firstChar) + other;
};
hx_strings_Strings.trim = function(str,charsToRemove) {
	if(str == null || str.length == 0) {
		return str;
	}
	if(charsToRemove == null) {
		return StringTools.trim(str);
	}
	var removableChars;
	var _g = charsToRemove;
	switch(_g._hx_index) {
	case 0:
		var str1 = _g.v;
		removableChars = hx_strings_Strings.toChars(str1);
		break;
	case 1:
		var chars = _g.v;
		removableChars = chars;
		break;
	}
	var this1 = hx_strings_internal__$Either2__$Either2.b(removableChars);
	var this2 = hx_strings_internal__$Either2__$Either2.b(removableChars);
	return hx_strings_Strings.trimLeft(hx_strings_Strings.trimRight(str,this1),this2);
};
hx_strings_Strings.trimRight = function(str,charsToRemove) {
	if(str == null || str.length == 0) {
		return str;
	}
	if(charsToRemove == null) {
		return StringTools.rtrim(str);
	}
	var removableChars;
	var _g = charsToRemove;
	switch(_g._hx_index) {
	case 0:
		var str1 = _g.v;
		removableChars = hx_strings_Strings.toChars(str1);
		break;
	case 1:
		var chars = _g.v;
		removableChars = chars;
		break;
	}
	if(removableChars.length == 0) {
		return str;
	}
	var len = str == null ? 0 : str.length;
	var i = len - 1;
	while(true) {
		var tmp;
		if(i > -1) {
			var str1 = hx_strings_Strings.charAt8(str,i);
			var strLen = str1 == null ? 0 : str1.length;
			tmp = removableChars.indexOf(strLen == 0 || 0 >= strLen ? -1 : HxOverrides.cca(str1,0)) > -1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		--i;
	}
	if(i < len - 1) {
		return hx_strings_Strings.substring8(str,0,i + 1);
	}
	return str;
};
hx_strings_Strings.trimLeft = function(str,charsToRemove) {
	if(str == null) {
		return str;
	}
	if(charsToRemove == null) {
		return StringTools.ltrim(str);
	}
	var removableChars;
	var _g = charsToRemove;
	switch(_g._hx_index) {
	case 0:
		var str1 = _g.v;
		removableChars = hx_strings_Strings.toChars(str1);
		break;
	case 1:
		var chars = _g.v;
		removableChars = chars;
		break;
	}
	if(removableChars.length == 0) {
		return str;
	}
	var len = str == null ? 0 : str.length;
	var i = 0;
	while(true) {
		var tmp;
		if(i < len) {
			var str1 = hx_strings_Strings.charAt8(str,i);
			var strLen = str1 == null ? 0 : str1.length;
			tmp = removableChars.indexOf(strLen == 0 || 0 >= strLen ? -1 : HxOverrides.cca(str1,0)) > -1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		++i;
	}
	if(i > 0) {
		return hx_strings_Strings.substring8(str,i,len);
	}
	return str;
};
hx_strings_Strings.trimLines = function(str,charsToRemove) {
	if(str == null || str.length == 0) {
		return str;
	}
	var _this = hx_strings_Strings.REGEX_SPLIT_LINES.ereg.split(str);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = hx_strings_Strings.trim(_this[i],charsToRemove);
	}
	return result.join("\n");
};
hx_strings_Strings.trimToNull = function(str) {
	if(str == null) {
		return null;
	}
	var trimmed = hx_strings_Strings.trim(str);
	if(trimmed == null || trimmed.length == 0) {
		return null;
	}
	return trimmed;
};
hx_strings_Strings.trimToEmpty = function(str) {
	var trimmed = hx_strings_Strings.trim(str);
	if(trimmed == null || trimmed.length == 0) {
		return "";
	}
	return trimmed;
};
hx_strings_Strings.truncate = function(str,maxLength) {
	if((str == null ? 0 : str.length) <= maxLength) {
		return str;
	} else {
		return hx_strings_Strings.substring8(str,0,maxLength);
	}
};
hx_strings_Strings.urlDecode = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	return decodeURIComponent(str.split("+").join(" "));
};
hx_strings_Strings.urlEncode = function(str) {
	if(str == null || str.length == 0) {
		return str;
	}
	return encodeURIComponent(str);
};
hx_strings_Strings.wrap = function(str,maxLineLength,splitLongWords,newLineSeparator) {
	if(newLineSeparator == null) {
		newLineSeparator = "\n";
	}
	if(splitLongWords == null) {
		splitLongWords = true;
	}
	if((str == null ? 0 : str.length) <= maxLineLength || maxLineLength < 1) {
		return str;
	}
	var sb = new hx_strings_StringBuilder();
	var wordChars = [];
	var currLineLength = 0;
	var _g = 0;
	var _g1 = hx_strings_Strings.toChars(str);
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		if(ch > 8 && ch < 14 || ch == 32) {
			if(wordChars.length > 0) {
				var _g2 = 0;
				while(_g2 < wordChars.length) {
					var wordCh = wordChars[_g2];
					++_g2;
					if(currLineLength == maxLineLength && splitLongWords) {
						sb.add(newLineSeparator);
						currLineLength = 0;
					}
					++currLineLength;
					sb.addChar(wordCh);
				}
				wordChars = [];
			}
			if(currLineLength >= maxLineLength) {
				sb.add(newLineSeparator);
				currLineLength = 0;
			}
			sb.addChar(ch);
			++currLineLength;
		} else {
			wordChars.push(ch);
		}
	}
	if(wordChars.length > 0) {
		var _g = 0;
		while(_g < wordChars.length) {
			var wordCh = wordChars[_g];
			++_g;
			if(currLineLength == maxLineLength && splitLongWords) {
				sb.add(newLineSeparator);
				currLineLength = 0;
			}
			++currLineLength;
			sb.addChar(wordCh);
		}
	}
	return sb.toString();
};
var hx_strings_StringDiff = function() {
};
$hxClasses["hx.strings.StringDiff"] = hx_strings_StringDiff;
hx_strings_StringDiff.__name__ = "hx.strings.StringDiff";
hx_strings_StringDiff.prototype = {
	at: null
	,left: null
	,right: null
	,toString: function() {
		return "StringDiff[at=" + this.at + ", left=" + this.left + ", right=" + this.right + "]";
	}
	,__class__: hx_strings_StringDiff
};
var hx_strings_HashCodeAlgorithm = $hxEnums["hx.strings.HashCodeAlgorithm"] = { __ename__:"hx.strings.HashCodeAlgorithm",__constructs__:null
	,PLATFORM_SPECIFIC: {_hx_name:"PLATFORM_SPECIFIC",_hx_index:0,__enum__:"hx.strings.HashCodeAlgorithm",toString:$estr}
	,ADLER32: {_hx_name:"ADLER32",_hx_index:1,__enum__:"hx.strings.HashCodeAlgorithm",toString:$estr}
	,CRC32B: {_hx_name:"CRC32B",_hx_index:2,__enum__:"hx.strings.HashCodeAlgorithm",toString:$estr}
	,DJB2A: {_hx_name:"DJB2A",_hx_index:3,__enum__:"hx.strings.HashCodeAlgorithm",toString:$estr}
	,JAVA: {_hx_name:"JAVA",_hx_index:4,__enum__:"hx.strings.HashCodeAlgorithm",toString:$estr}
	,SDBM: {_hx_name:"SDBM",_hx_index:5,__enum__:"hx.strings.HashCodeAlgorithm",toString:$estr}
};
hx_strings_HashCodeAlgorithm.__constructs__ = [hx_strings_HashCodeAlgorithm.PLATFORM_SPECIFIC,hx_strings_HashCodeAlgorithm.ADLER32,hx_strings_HashCodeAlgorithm.CRC32B,hx_strings_HashCodeAlgorithm.DJB2A,hx_strings_HashCodeAlgorithm.JAVA,hx_strings_HashCodeAlgorithm.SDBM];
var hx_strings_AnsiToHtmlRenderMethod = $hxEnums["hx.strings.AnsiToHtmlRenderMethod"] = { __ename__:"hx.strings.AnsiToHtmlRenderMethod",__constructs__:null
	,StyleAttributes: {_hx_name:"StyleAttributes",_hx_index:0,__enum__:"hx.strings.AnsiToHtmlRenderMethod",toString:$estr}
	,CssClasses: {_hx_name:"CssClasses",_hx_index:1,__enum__:"hx.strings.AnsiToHtmlRenderMethod",toString:$estr}
	,CssClassesCallback: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"hx.strings.AnsiToHtmlRenderMethod",toString:$estr}; },$_._hx_name="CssClassesCallback",$_.__params__ = ["func"],$_)
};
hx_strings_AnsiToHtmlRenderMethod.__constructs__ = [hx_strings_AnsiToHtmlRenderMethod.StyleAttributes,hx_strings_AnsiToHtmlRenderMethod.CssClasses,hx_strings_AnsiToHtmlRenderMethod.CssClassesCallback];
var hx_strings_AnsiState = function(copyFrom) {
	if(copyFrom == null) {
		this.reset();
	} else {
		this.copyFrom(copyFrom);
	}
};
$hxClasses["hx.strings.AnsiState"] = hx_strings_AnsiState;
hx_strings_AnsiState.__name__ = "hx.strings.AnsiState";
hx_strings_AnsiState.defaultCssClassesCallback = function(state) {
	var classes = [];
	if(state.fgcolor != null) {
		classes.push("ansi_fg_" + state.fgcolor);
	}
	if(state.bgcolor != null) {
		classes.push("ansi_bg_" + state.bgcolor);
	}
	if(state.bold) {
		classes.push("ansi_bold");
	}
	if(state.underline) {
		classes.push("ansi_underline");
	}
	if(state.blink) {
		classes.push("ansi_blink");
	}
	return classes.join(" ");
};
hx_strings_AnsiState.prototype = {
	bgcolor: null
	,blink: null
	,bold: null
	,fgcolor: null
	,underline: null
	,isActive: function() {
		if(!(this.fgcolor != null || this.bgcolor != null || this.bold || this.underline)) {
			return this.blink;
		} else {
			return true;
		}
	}
	,reset: function() {
		this.fgcolor = null;
		this.bgcolor = null;
		this.bold = false;
		this.underline = false;
		this.blink = false;
	}
	,copyFrom: function(other) {
		this.fgcolor = other.fgcolor;
		this.bgcolor = other.bgcolor;
		this.bold = other.bold;
		this.underline = other.underline;
		this.blink = other.blink;
	}
	,setGraphicModeParameter: function(param) {
		switch(param) {
		case 0:
			this.reset();
			break;
		case 1:
			this.bold = true;
			break;
		case 4:
			this.underline = true;
			break;
		case 5:
			this.blink = true;
			break;
		case 30:
			this.fgcolor = "black";
			break;
		case 31:
			this.fgcolor = "red";
			break;
		case 32:
			this.fgcolor = "green";
			break;
		case 33:
			this.fgcolor = "yellow";
			break;
		case 34:
			this.fgcolor = "blue";
			break;
		case 35:
			this.fgcolor = "magenta";
			break;
		case 36:
			this.fgcolor = "cyan";
			break;
		case 37:
			this.fgcolor = "white";
			break;
		case 40:
			this.bgcolor = "black";
			break;
		case 41:
			this.bgcolor = "red";
			break;
		case 42:
			this.bgcolor = "green";
			break;
		case 43:
			this.bgcolor = "yellow";
			break;
		case 44:
			this.bgcolor = "blue";
			break;
		case 45:
			this.bgcolor = "magenta";
			break;
		case 46:
			this.bgcolor = "cyan";
			break;
		case 47:
			this.bgcolor = "white";
			break;
		}
	}
	,toCSS: function(renderMethod) {
		if(this.fgcolor != null || this.bgcolor != null || this.bold || this.underline || this.blink) {
			var sb = new hx_strings_StringBuilder();
			if(renderMethod == null) {
				renderMethod = hx_strings_AnsiToHtmlRenderMethod.StyleAttributes;
			}
			switch(renderMethod._hx_index) {
			case 0:
				if(this.fgcolor != null) {
					sb.add("color:").add(this.fgcolor).add(";");
				}
				if(this.bgcolor != null) {
					sb.add("background-color:").add(this.bgcolor).add(";");
				}
				if(this.bold) {
					sb.add("font-weight:bold;");
				}
				if(this.underline) {
					sb.add("text-decoration:underline;");
				}
				if(this.blink) {
					sb.add("text-decoration:blink;");
				}
				break;
			case 1:
				sb.add(hx_strings_AnsiState.defaultCssClassesCallback(this));
				break;
			case 2:
				var func = renderMethod.func;
				sb.add(func(this));
				break;
			}
			return sb.toString();
		}
		return "";
	}
	,__class__: hx_strings_AnsiState
};
var hx_strings_internal_Bits = function() { };
$hxClasses["hx.strings.internal.Bits"] = hx_strings_internal_Bits;
hx_strings_internal_Bits.__name__ = "hx.strings.internal.Bits";
hx_strings_internal_Bits.clearBit = function(num,bitPos) {
	return num & ~(1 << bitPos - 1);
};
hx_strings_internal_Bits.setBit = function(num,bitPos) {
	return num | 1 << bitPos - 1;
};
hx_strings_internal_Bits.toggleBit = function(num,bitPos) {
	return num ^ 1 << bitPos - 1;
};
hx_strings_internal_Bits.getBit = function(num,bitPos) {
	return 1 == (num >> bitPos - 1 & 1);
};
var hx_strings_internal_Either2 = {};
hx_strings_internal_Either2.__properties__ = {get_value:"get_value"};
hx_strings_internal_Either2._new = function(value) {
	var this1 = value;
	return this1;
};
hx_strings_internal_Either2.get_value = function(this1) {
	return this1;
};
hx_strings_internal_Either2.fromA = function(value) {
	var this1 = hx_strings_internal__$Either2__$Either2.a(value);
	return this1;
};
hx_strings_internal_Either2.fromB = function(value) {
	var this1 = hx_strings_internal__$Either2__$Either2.b(value);
	return this1;
};
var hx_strings_internal__$Either2__$Either2 = $hxEnums["hx.strings.internal._Either2._Either2"] = { __ename__:"hx.strings.internal._Either2._Either2",__constructs__:null
	,a: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hx.strings.internal._Either2._Either2",toString:$estr}; },$_._hx_name="a",$_.__params__ = ["v"],$_)
	,b: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hx.strings.internal._Either2._Either2",toString:$estr}; },$_._hx_name="b",$_.__params__ = ["v"],$_)
};
hx_strings_internal__$Either2__$Either2.__constructs__ = [hx_strings_internal__$Either2__$Either2.a,hx_strings_internal__$Either2__$Either2.b];
var hx_strings_internal_Either3 = {};
hx_strings_internal_Either3.__properties__ = {get_value:"get_value"};
hx_strings_internal_Either3._new = function(value) {
	var this1 = value;
	return this1;
};
hx_strings_internal_Either3.get_value = function(this1) {
	return this1;
};
hx_strings_internal_Either3.fromA = function(value) {
	var this1 = hx_strings_internal__$Either3__$Either3.a(value);
	return this1;
};
hx_strings_internal_Either3.fromB = function(value) {
	var this1 = hx_strings_internal__$Either3__$Either3.b(value);
	return this1;
};
hx_strings_internal_Either3.fromC = function(value) {
	var this1 = hx_strings_internal__$Either3__$Either3.c(value);
	return this1;
};
var hx_strings_internal_OneOrMany = {};
hx_strings_internal_OneOrMany.fromSingle = function(value) {
	return [value];
};
var hx_strings_internal_RingBuffer = {};
hx_strings_internal_RingBuffer._new = function(size) {
	var this1 = new hx_strings_internal__$RingBuffer_RingBufferImpl(size);
	return this1;
};
hx_strings_internal_RingBuffer.get = function(this1,index) {
	return this1.get(index);
};
var hx_strings_internal__$RingBuffer_RingBufferIterator = function(buff) {
	this.idx = -1;
	this.buff = buff;
};
$hxClasses["hx.strings.internal._RingBuffer.RingBufferIterator"] = hx_strings_internal__$RingBuffer_RingBufferIterator;
hx_strings_internal__$RingBuffer_RingBufferIterator.__name__ = "hx.strings.internal._RingBuffer.RingBufferIterator";
hx_strings_internal__$RingBuffer_RingBufferIterator.prototype = {
	buff: null
	,idx: null
	,hasNext: function() {
		return this.idx + 1 < this.buff.length;
	}
	,next: function() {
		this.idx++;
		return this.buff.get(this.idx);
	}
	,__class__: hx_strings_internal__$RingBuffer_RingBufferIterator
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry.__properties__ = {get_value:"get_value",get_name:"get_name"};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var stx_LiftAssert = function() { };
$hxClasses["stx.LiftAssert"] = stx_LiftAssert;
stx_LiftAssert.__name__ = "stx.LiftAssert";
stx_LiftAssert.that = function(stx,pos) {
	return new stx_assert_Module(pos);
};
stx_LiftAssert.assert = function(__,pos) {
	return new stx_assert_module_Crunch(pos);
};
stx_LiftAssert.expect = function(b,err) {
	if(b) {
		return stx_nano_Report.unit();
	} else {
		return stx_nano_Report.pure(err);
	}
};
var stx_LiftCoroutine = function() { };
$hxClasses["stx.LiftCoroutine"] = stx_LiftCoroutine;
stx_LiftCoroutine.__name__ = "stx.LiftCoroutine";
stx_LiftCoroutine.upcast = function(wildcard,spx) {
	return spx;
};
stx_LiftCoroutine.quit = function(wildcard,er) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(er)));
};
stx_LiftCoroutine.exit = function(wildcard,er) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(er)));
};
stx_LiftCoroutine.halt = function(wildcard,ret) {
	return stx_coroutine_core_CoroutineSum.Halt(ret);
};
stx_LiftCoroutine.term = function(wildcard,cause) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
};
stx_LiftCoroutine.stop = function(wildcard) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
};
stx_LiftCoroutine.prod = function(wildcard,v) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(v));
};
stx_LiftCoroutine.wait = function(wildcard,fn) {
	return stx_coroutine_core_CoroutineSum.Wait(fn);
};
stx_LiftCoroutine.emit = function(wildcard,head,next) {
	return stx_coroutine_core_CoroutineSum.Emit(head,next);
};
stx_LiftCoroutine.hold = function(wildcard,h) {
	return stx_coroutine_core_CoroutineSum.Hold(h);
};
stx_LiftCoroutine.lazy = function(wildcard,self) {
	return stx_coroutine_core_Held.lazy(self);
};
stx_LiftCoroutine.into = function(wildcard,fn) {
	return fn;
};
stx_LiftCoroutine.tran = function(wildcard,fn) {
	var fn1 = fn;
	return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	}));
};
stx_LiftCoroutine.coroutine = function(wildcard) {
	return new stx_coroutine_Module();
};
var stx_LiftSource = function() { };
$hxClasses["stx.LiftSource"] = stx_LiftSource;
stx_LiftSource.__name__ = "stx.LiftSource";
var stx_Fn = function() { };
$hxClasses["stx.Fn"] = stx_Fn;
stx_Fn.__name__ = "stx.Fn";
stx_Fn.fn = function(wildcard) {
	return new stx_fn_Module();
};
stx_Fn.f = function(wildcard,f) {
	switch(f._hx_index) {
	case 0:
		var f1 = f.f;
		return function(_) {
			f1();
			return null;
		};
	case 1:
		var f2 = f.f;
		return function(x) {
			f2(x);
			return null;
		};
	case 2:
		var f3 = f.f;
		return function(x) {
			return f3(x);
		};
	}
};
stx_Fn._0x = function(fn) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn),stx_fn_Block.lift);
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_fn_Block.unit();
	}
};
stx_Fn._1x = function(fn) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn),stx_fn_Sink.lift);
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		var this1 = function(p) {
		};
		return this1;
	}
};
stx_Fn._1r = function() {
	return stx_fn_Unary.unit();
};
var stx_LiftCurriedBinary = function() { };
$hxClasses["stx.LiftCurriedBinary"] = stx_LiftCurriedBinary;
stx_LiftCurriedBinary.__name__ = "stx.LiftCurriedBinary";
stx_LiftCurriedBinary.uncurry = function(f) {
	return function(p1,p2) {
		return (f(p1))(p2);
	};
};
var stx_LiftCurriedTernary = function() { };
$hxClasses["stx.LiftCurriedTernary"] = stx_LiftCurriedTernary;
stx_LiftCurriedTernary.__name__ = "stx.LiftCurriedTernary";
stx_LiftCurriedTernary.uncurry = function(f) {
	return function(p1,p2,p3) {
		return ((f(p1))(p2))(p3);
	};
};
var stx_LiftFn = function() { };
$hxClasses["stx.LiftFn"] = stx_LiftFn;
stx_LiftFn.__name__ = "stx.LiftFn";
stx_LiftFn.pinch = function(fn0) {
	return function(x) {
		return fn0(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,x));
	};
};
stx_LiftFn.repeat = function(fn) {
	return function(v) {
		var i = null;
		var o = null;
		_hx_loop1: while(true) {
			var _g = fn(i);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				i = v;
				break;
			case 1:
				var v1 = _g.v;
				o = v1;
				break _hx_loop1;
			}
		}
		return o;
	};
};
var stx_LiftUnary = function() { };
$hxClasses["stx.LiftUnary"] = stx_LiftUnary;
stx_LiftUnary.__name__ = "stx.LiftUnary";
stx_LiftUnary.fn = function(f) {
	return f;
};
var stx_LiftThunk = function() { };
$hxClasses["stx.LiftThunk"] = stx_LiftThunk;
stx_LiftThunk.__name__ = "stx.LiftThunk";
stx_LiftThunk.fn = function(fn) {
	return fn;
};
var stx_LiftBlock = function() { };
$hxClasses["stx.LiftBlock"] = stx_LiftBlock;
stx_LiftBlock.__name__ = "stx.LiftBlock";
stx_LiftBlock.fn = function(f) {
	return f;
};
var stx_LiftBinary = function() { };
$hxClasses["stx.LiftBinary"] = stx_LiftBinary;
stx_LiftBinary.__name__ = "stx.LiftBinary";
stx_LiftBinary.fn = function(fn) {
	return stx_fn_Binary._new(fn);
};
stx_LiftBinary.bind1 = function(fn,p) {
	var _g = fn;
	var a1 = p;
	return function(a2) {
		return _g(a1,a2);
	};
};
var stx_LiftPerhapsConstructor = function() { };
$hxClasses["stx.LiftPerhapsConstructor"] = stx_LiftPerhapsConstructor;
stx_LiftPerhapsConstructor.__name__ = "stx.LiftPerhapsConstructor";
stx_LiftPerhapsConstructor.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return fn(v);
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftPerhaps = function() { };
$hxClasses["stx.LiftPerhaps"] = stx_LiftPerhaps;
stx_LiftPerhaps.__name__ = "stx.LiftPerhaps";
stx_LiftPerhaps.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return haxe_ds_Option.Some(fn(v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftTernary = function() { };
$hxClasses["stx.LiftTernary"] = stx_LiftTernary;
stx_LiftTernary.__name__ = "stx.LiftTernary";
stx_LiftTernary.fn = function(fn) {
	return fn;
};
var stx_LiftIf = function() { };
$hxClasses["stx.LiftIf"] = stx_LiftIf;
stx_LiftIf.__name__ = "stx.LiftIf";
stx_LiftIf.if_else = function(b,yes,no) {
	if(b) {
		return yes();
	} else {
		return no();
	}
};
var stx_Fp = function() { };
$hxClasses["stx.Fp"] = stx_Fp;
stx_Fp.__name__ = "stx.Fp";
stx_Fp.handle = function(opt) {
};
stx_Fp.with = function(wildcard,a,b) {
	return function(c) {
		return stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,a,b,c);
	};
};
var stx_LiftFp = function() { };
$hxClasses["stx.LiftFp"] = stx_LiftFp;
stx_LiftFp.__name__ = "stx.LiftFp";
stx_LiftFp.asState = function(fn) {
	return stx_fp_State._new(fn);
};
var stx_In = {};
stx_In._new = function(x) {
	var this1 = x;
	return this1;
};
var stx_OfI = {};
stx_OfI._new = function(x) {
	var this1 = x;
	return this1;
};
var stx_Of = {};
stx_Of._new = function(o) {
	var this1 = o;
	return this1;
};
var stx_MeetSemiLatticeApi = function() { };
$hxClasses["stx.MeetSemiLatticeApi"] = stx_MeetSemiLatticeApi;
stx_MeetSemiLatticeApi.__name__ = "stx.MeetSemiLatticeApi";
stx_MeetSemiLatticeApi.__isInterface__ = true;
stx_MeetSemiLatticeApi.prototype = {
	meet: null
	,'with': null
	,__class__: stx_MeetSemiLatticeApi
};
var stx_JoinSemiLatticeApi = function() { };
$hxClasses["stx.JoinSemiLatticeApi"] = stx_JoinSemiLatticeApi;
stx_JoinSemiLatticeApi.__name__ = "stx.JoinSemiLatticeApi";
stx_JoinSemiLatticeApi.__isInterface__ = true;
stx_JoinSemiLatticeApi.prototype = {
	join: null
	,'with': null
	,__class__: stx_JoinSemiLatticeApi
};
var stx_LatticeApi = function() { };
$hxClasses["stx.LatticeApi"] = stx_LatticeApi;
stx_LatticeApi.__name__ = "stx.LatticeApi";
stx_LatticeApi.__isInterface__ = true;
stx_LatticeApi.__interfaces__ = [stx_MeetSemiLatticeApi,stx_JoinSemiLatticeApi];
var stx_BoundedLatticeApi = function() { };
$hxClasses["stx.BoundedLatticeApi"] = stx_BoundedLatticeApi;
stx_BoundedLatticeApi.__name__ = "stx.BoundedLatticeApi";
stx_BoundedLatticeApi.__isInterface__ = true;
stx_BoundedLatticeApi.__interfaces__ = [stx_LatticeApi];
stx_BoundedLatticeApi.prototype = {
	zero: null
	,one: null
	,__class__: stx_BoundedLatticeApi
};
var stx_BoundedLattice = {};
stx_BoundedLattice.__properties__ = {get_self:"get_self"};
stx_BoundedLattice._new = function(self) {
	var this1 = self;
	return this1;
};
stx_BoundedLattice.lift = function(self) {
	return stx_BoundedLattice._new(self);
};
stx_BoundedLattice.meeter = function(this1) {
	return { plus : $bind(this1,this1.meet), unit : $bind(this1,this1.zero)};
};
stx_BoundedLattice.joiner = function(this1) {
	return { plus : $bind(this1,this1.join), unit : $bind(this1,this1.one)};
};
stx_BoundedLattice.prj = function(this1) {
	return this1;
};
stx_BoundedLattice.get_self = function(this1) {
	return stx_BoundedLattice.lift(this1);
};
var stx_LiftLog = function() { };
$hxClasses["stx.LiftLog"] = stx_LiftLog;
stx_LiftLog.__name__ = "stx.LiftLog";
stx_LiftLog.log = function(wildcard) {
	return stx_Log.ZERO;
};
stx_LiftLog.scope = function(stx,pos,method) {
	var scoping = stx_log_LogPosition.fromPos(pos).get_scoping();
	if(method != null) {
		scoping = scoping.with_method(method);
	}
	return scoping;
};
stx_LiftLog.stamp = function(pos) {
	return stx_log_LogPosition.pure(pos);
};
var stx_log_logger_Global = {};
stx_log_logger_Global.__properties__ = {get_ZERO:"get_ZERO"};
stx_log_logger_Global.ZERO = null;
stx_log_logger_Global.get_ZERO = function() {
	var result;
	if(stx_log_logger_Global.ZERO == null) {
		stx_log_logger_Global.ZERO = new stx_log_logger_Unit();
		haxe_Log.trace("stx.Log.global = stx.log.logger.Unit()",{ fileName : "stx/log/logger/Global.hx", lineNumber : 14, className : "stx.log.logger._Global.Global_Impl_", methodName : "get_ZERO"});
		result = stx_log_logger_Global.ZERO;
	} else {
		result = stx_log_logger_Global.ZERO;
	}
	var level = $iterator(stx_pico_OptionLift)(stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,process.env["STX_LOG__LEVEL"]),function(x) {
		return stx_log_Level.fromString(x);
	}));
	while(level.hasNext()) {
		var level1 = level.next();
		stx_log_logger_Global.ZERO.level = level1;
		haxe_Log.trace("ENV SET STX_LOG Global " + (level1 == null ? "null" : stx_log_Level.toString(level1)),{ fileName : "stx/log/logger/Global.hx", lineNumber : 23, className : "stx.log.logger._Global.Global_Impl_", methodName : "get_ZERO"});
	}
	var this1 = Sys.environment();
	if(Object.prototype.hasOwnProperty.call(this1.h,"VERBOSE")) {
		haxe_Log.trace("ENV SET STX_LOG Global VERBOSE",{ fileName : "stx/log/logger/Global.hx", lineNumber : 26, className : "stx.log.logger._Global.Global_Impl_", methodName : "get_ZERO"});
		stx_log_logger_Global.ZERO.verbose = true;
	}
	return result;
};
stx_log_logger_Global._new = function() {
	var this1 = stx_log_logger_Global.get_ZERO();
	return this1;
};
stx_log_logger_Global.unit = function() {
	return stx_log_logger_Global._new();
};
stx_log_logger_Global.toLoggerApi = function(this1) {
	return this1;
};
stx_log_logger_Global.prj = function(this1) {
	return this1;
};
var stx_log_Debugging = function() { };
$hxClasses["stx.log.Debugging"] = stx_log_Debugging;
stx_log_Debugging.__name__ = "stx.log.Debugging";
stx_log_Debugging.prototype = {
	note: function(str,pos) {
	}
	,__class__: stx_log_Debugging
};
var stx_log_OutputApi = function() { };
$hxClasses["stx.log.OutputApi"] = stx_log_OutputApi;
stx_log_OutputApi.__name__ = "stx.log.OutputApi";
stx_log_OutputApi.__isInterface__ = true;
stx_log_OutputApi.prototype = {
	render: null
	,__class__: stx_log_OutputApi
};
var stx_log_output_term_Full = function() { };
$hxClasses["stx.log.output.term.Full"] = stx_log_output_term_Full;
stx_log_output_term_Full.__name__ = "stx.log.output.term.Full";
stx_log_output_term_Full.__interfaces__ = [stx_log_OutputApi];
stx_log_output_term_Full.clear = function() {
	js_Boot.__clear_trace();
};
stx_log_output_term_Full.__super__ = stx_log_Debugging;
stx_log_output_term_Full.prototype = $extend(stx_log_Debugging.prototype,{
	render: function(v,infos) {
		this.note("haxelog " + Std.string(infos),{ fileName : "stx/log/output/term/Full.hx", lineNumber : 9, className : "stx.log.output.term.Full", methodName : "render"});
		this.note("js",{ fileName : "stx/log/output/term/Full.hx", lineNumber : 28, className : "stx.log.output.term.Full", methodName : "render"});
		new stx_log_output_term_Js().render(v,infos);
	}
	,__class__: stx_log_output_term_Full
});
var stx_log_LoggerApi = function() { };
$hxClasses["stx.log.LoggerApi"] = stx_log_LoggerApi;
stx_log_LoggerApi.__name__ = "stx.log.LoggerApi";
stx_log_LoggerApi.__isInterface__ = true;
stx_log_LoggerApi.prototype = {
	format: null
	,logic: null
	,apply: null
	,do_apply: null
	,__class__: stx_log_LoggerApi
};
var stx_log_logger_Base = function(logic,format) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,logic);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_log_Filter.Unit();
	}
	this.logic = stx_log_Logic.fromFilter(tmp);
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,format);
	var v = stx_log_core_Format.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.format = tmp;
};
$hxClasses["stx.log.logger.Base"] = stx_log_logger_Base;
stx_log_logger_Base.__name__ = "stx.log.logger.Base";
stx_log_logger_Base.__interfaces__ = [stx_log_LoggerApi];
stx_log_logger_Base.__super__ = stx_log_output_term_Full;
stx_log_logger_Base.prototype = $extend(stx_log_output_term_Full.prototype,{
	logic: null
	,format: null
	,apply: function(value) {
		var _gthis = this;
		return stx_fp_ContinuationLift.mod(this.do_apply(value),function(res) {
			var fn = stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,function(string) {
				if(!value.get_stamp().hidden) {
					_gthis.render(string,value.source);
				}
			});
			var self;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				self = stx_nano_ResSum.Accept(fn(t));
				break;
			case 1:
				var e = res.e;
				self = stx_nano_ResSum.Reject(e);
				break;
			}
			var this1 = self;
			return this1;
		});
	}
	,do_apply: function(value) {
		var _gthis = this;
		return stx_fp_Continuation.lift(function(fn) {
			var result = stx_nano_ReportLift.resolve(stx_log_Logic.apply(_gthis.logic,value),function() {
				return _gthis.format.print(value);
			});
			return result;
		});
	}
	,__class__: stx_log_logger_Base
});
var stx_log_logger_Unit = function(logic,format,level,verbose,reinstate) {
	if(reinstate == null) {
		reinstate = false;
	}
	if(verbose == null) {
		verbose = false;
	}
	if(level == null) {
		level = 2;
	}
	stx_log_logger_Base.call(this,logic,format);
	this.level = level;
	this.verbose = verbose;
	this.reinstate = reinstate;
	this.includes = [];
};
$hxClasses["stx.log.logger.Unit"] = stx_log_logger_Unit;
stx_log_logger_Unit.__name__ = "stx.log.logger.Unit";
stx_log_logger_Unit.__super__ = stx_log_logger_Base;
stx_log_logger_Unit.prototype = $extend(stx_log_logger_Base.prototype,{
	level: null
	,reinstate: null
	,includes: null
	,verbose: null
	,do_apply: function(data) {
		var _gthis = this;
		this.note("" + Std.string(this),{ fileName : "stx/log/logger/Unit.hx", lineNumber : 17, className : "stx.log.logger.Unit", methodName : "do_apply"});
		var applied = stx_log_logger_Base.prototype.do_apply.call(this,data);
		var _g = function(e) {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		};
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/logger/Unit.hx", lineNumber : 19, className : "stx.log.logger.Unit", methodName : "do_apply"});
		var data1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_Zero));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data1 == null) {
			data1 = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data1,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		var e = this2;
		var applied_fn = function() {
			return _g(e);
		};
		var self = applied(function(_) {
			return applied_fn();
		});
		var parent;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			parent = true;
			break;
		case 1:
			var e1 = self.e;
			parent = false;
			break;
		}
		var has_custom = stx_log_Signal.has_custom;
		var stamp_level = data.get_stamp().level;
		this.note("level: " + (this.level == null ? "null" : stx_log_Level.toString(this.level)) + " stamp.level: " + (stamp_level == null ? "null" : stx_log_Level.toString(stamp_level)) + " " + stx_log_Level.asInt(stamp_level) + " >= " + stx_log_Level.asInt(this.level),{ fileName : "stx/log/logger/Unit.hx", lineNumber : 23, className : "stx.log.logger.Unit", methodName : "do_apply"});
		this.note("" + stx_log_Level.asInt(data.get_stamp().level),{ fileName : "stx/log/logger/Unit.hx", lineNumber : 24, className : "stx.log.logger.Unit", methodName : "do_apply"});
		this.note("" + stx_log_Level.asInt(this.level),{ fileName : "stx/log/logger/Unit.hx", lineNumber : 25, className : "stx.log.logger.Unit", methodName : "do_apply"});
		this.note("" + (data.detail == null ? "null" : stx_log_core_Entry.toString(data.detail)),{ fileName : "stx/log/logger/Unit.hx", lineNumber : 26, className : "stx.log.logger.Unit", methodName : "do_apply"});
		var level = stx_log_Level.asInt(data.get_stamp().level) >= stx_log_Level.asInt(this.level);
		var include_tag = stx_nano_lift_LiftNano.if_else(this.includes.length > 0,function() {
			var self = stx_pico_OptionLift.flat_map(stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data),function(x) {
				return stx_pico_Option.fromNullT(x.get_stamp());
			}),function(x) {
				return stx_pico_Option.fromNullT(x.tags);
			});
			var include_tag;
			if(self._hx_index == 0) {
				var v = self.v;
				include_tag = v;
			} else {
				include_tag = [];
			}
			return stx_lift_ArrayLift.lfold(include_tag,function(next,memo) {
				return stx_nano_lift_LiftNano.if_else(memo,function() {
					return true;
				},function() {
					return stx_log_Includes.match(_gthis.includes,next);
				});
			},false);
		},function() {
			return data.get_stamp().tags.length <= 0;
		});
		var res = stx_nano_lift_LiftNano.if_else(has_custom,function() {
			return _gthis.reinstate;
		},function() {
			return stx_nano_lift_LiftNano.if_else(_gthis.verbose,function() {
				return true;
			},function() {
				return stx_nano_lift_LiftNano.if_else(include_tag,function() {
					if(parent) {
						return level;
					} else {
						return false;
					}
				},function() {
					return false;
				});
			});
		});
		this.note("has_custom:" + (has_custom == null ? "null" : "" + has_custom) + " " + ("parent:" + (parent == null ? "null" : "" + parent) + " ") + ("level:" + (level == null ? "null" : "" + level) + " ") + ("includes:" + Std.string(this.includes) + " ") + ("include_tag:" + (include_tag == null ? "null" : "" + include_tag) + " ") + ("stamp_tag:" + Std.string(data.get_stamp().tags) + " ") + ("parent && level: " + Std.string(parent && level) + " ") + ("verbose:" + Std.string(this.verbose) + " ") + ("res:" + (res == null ? "null" : "" + res) + " "),{ fileName : "stx/log/logger/Unit.hx", lineNumber : 50, className : "stx.log.logger.Unit", methodName : "do_apply"});
		return function(fn) {
			return stx_nano_lift_LiftNano.if_else(res,function() {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,_gthis.format.print(data));
			},function() {
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/logger/Unit.hx", lineNumber : 63, className : "stx.log.logger.Unit", methodName : "do_apply"});
				var data1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_Default({ has_custom : has_custom, parent : parent, level : level, includes : _gthis.includes, include_tag : include_tag, stamp_tag : data.get_stamp().tags, verbose : _gthis.verbose})));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data1 == null) {
					data1 = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data1,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
			});
		};
	}
	,reset: function() {
		stx_log_Includes.clear(this.includes);
		this.level = 2;
		this.logic = stx_log_Logic._.make().always();
	}
	,__class__: stx_log_logger_Unit
});
var stx_log_LogicLift = function() { };
$hxClasses["stx.log.LogicLift"] = stx_log_LogicLift;
stx_log_LogicLift.__name__ = "stx.log.LogicLift";
stx_log_LogicLift.make = function() {
	return { pack : stx_log_Logic.pack, type : stx_log_Logic.type, line : stx_log_Logic.line, lines : stx_log_Logic.lines, tag : stx_log_Logic.tag, always : stx_log_Logic.always, never : stx_log_Logic.never, method : stx_log_Logic.method};
};
stx_log_LogicLift._ = function(fn) {
	return fn(stx_log_LogicLift.make());
};
var stx_log_Logic = {};
stx_log_Logic.__properties__ = {get_self:"get_self"};
stx_log_Logic._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_Logic.lift = function(self) {
	return stx_log_Logic._new(self);
};
stx_log_Logic.ctr = function(fn) {
	return stx_log_Logic._._(fn);
};
stx_log_Logic.fromPosPredicate = function(self) {
	return stx_log_Logic.fromFilter(new stx_log_filter_term_PosPredicate(self));
};
stx_log_Logic.fromFilter = function(self) {
	return stx_log_LogicSum.LV(self);
};
stx_log_Logic.and = function(this1,that) {
	return stx_log_LogicSum.LAnd(this1,that);
};
stx_log_Logic.or = function(this1,that) {
	return stx_log_LogicSum.LOr(this1,that);
};
stx_log_Logic.not = function(this1) {
	return stx_log_LogicSum.LNot(stx_log_Logic.lift(this1));
};
stx_log_Logic.apply = function(this1,value) {
	switch(this1._hx_index) {
	case 0:
		var l = this1.l;
		var r = this1.r;
		return stx_nano_Report.or(stx_log_Logic.apply(l,value),function() {
			return stx_log_Logic.apply(r,value);
		});
	case 1:
		var l = this1.l;
		var r1 = this1.r;
		var fst = stx_log_Logic.apply(l,value);
		return stx_nano_lift_LiftNano.if_else(stx_nano_ReportLift.is_defined(fst),function() {
			return stx_log_Logic.apply(r1,value);
		},function() {
			return fst;
		});
	case 2:
		var v = this1.l;
		var self = stx_log_Logic.apply(v,value);
		if(self == null) {
			return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Not,{ fileName : "stx/log/Logic.hx", lineNumber : 58, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"});
		} else {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				return stx_nano_Report.unit();
			case 1:
				return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Not,{ fileName : "stx/log/Logic.hx", lineNumber : 58, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"});
			}
		}
		break;
	case 3:
		var v = this1.v;
		return v.apply(value);
	}
};
stx_log_Logic.opine = function(this1,value) {
	return stx_log_Logic.apply(this1,value);
};
stx_log_Logic.prj = function(this1) {
	return this1;
};
stx_log_Logic.get_self = function(this1) {
	return stx_log_Logic.lift(this1);
};
stx_log_Logic.construct = function(fn) {
	return stx_log_Logic.fromPosPredicate(stx_assert_Predicate.Anon(fn));
};
stx_log_Logic.pack = function(pack) {
	return stx_log_Logic.construct(function(info) {
		var canonical = pack.join(".");
		var query = new hre_RegExp("" + canonical + ".*","g");
		var self = stx_pico_OptionLift.map(info.pos,function(pos) {
			return query.test(stx_pico_Identifier.get_pack(stx_pico_Identifier.lift(stx_nano_Position.get_fileName(pos))).join("."));
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = false;
		}
		return stx_nano_lift_LiftNano.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 84, className : "stx.log._Logic.Logic_Impl_", methodName : "pack"});
			var self = stx_pico_OptionLift.map(info.pos,function(pos) {
				return stx_fail_LogFailure.E_Log_SourceNotInPackage(stx_pico_Identifier.fromPath(new haxe_io_Path(stx_nano_Position.get_fileName(pos))),pack.join("."));
			});
			var data;
			if(self._hx_index == 0) {
				var v = self.v;
				data = v;
			} else {
				data = stx_fail_LogFailure.E_Log_SourceNotInPackage("<unknown>",pack.join("."));
			}
			var data1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(data));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data1 == null) {
				data1 = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data1,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		});
	});
};
stx_log_Logic.type = function(type) {
	return stx_log_Logic.construct(function(info) {
		var self = stx_pico_OptionLift.map(info.pos,function(pos) {
			return type == stx_pico_Identifier.fromPath(new haxe_io_Path(stx_nano_Position.get_fileName(pos)));
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = false;
		}
		return stx_nano_lift_LiftNano.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 100, className : "stx.log._Logic.Logic_Impl_", methodName : "type"});
			var self = stx_pico_OptionLift.map(info.pos,function(pos) {
				return stx_fail_LogFailure.E_Log_SourceNotInPackage(stx_pico_Identifier.fromPath(new haxe_io_Path(stx_nano_Position.get_fileName(pos))),type);
			});
			var data;
			if(self._hx_index == 0) {
				var v = self.v;
				data = v;
			} else {
				data = stx_fail_LogFailure.E_Log_SourceNotInPackage("<unknown>","<unknown>");
			}
			var data1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(data));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data1 == null) {
				data1 = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data1,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		});
	});
};
stx_log_Logic.line = function(n) {
	return stx_log_Logic.construct(function(info) {
		var self = stx_pico_OptionLift.map(info.pos,function(x) {
			return stx_nano_Position.get_lineNumber(x) == n;
		});
		var result;
		if(self._hx_index == 0) {
			var v = self.v;
			result = v;
		} else {
			result = false;
		}
		return stx_nano_lift_LiftNano.if_else(result,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 115, className : "stx.log._Logic.Logic_Impl_", methodName : "line"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_NotLine(n)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		});
	});
};
stx_log_Logic.lines = function(l,h) {
	return stx_log_Logic.construct(function(info) {
		var self = stx_pico_OptionLift.map(info.pos,function(pos) {
			if(stx_nano_Position.get_lineNumber(pos) >= l) {
				return stx_nano_Position.get_lineNumber(pos) <= h;
			} else {
				return false;
			}
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = false;
		}
		return stx_nano_lift_LiftNano.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 126, className : "stx.log._Logic.Logic_Impl_", methodName : "lines"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_NotOfRange(l,h)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		});
	});
};
stx_log_Logic.tag = function(str) {
	return stx_log_Logic.construct(function(info) {
		return stx_nano_lift_LiftNano.if_else(stx_pico_OptionLift.is_defined(stx_lift_ArrayLift.search(info.stamp.tags,function(tag) {
			return tag == str;
		})),function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 136, className : "stx.log._Logic.Logic_Impl_", methodName : "tag"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_DoesNotContainTag(str)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		});
	});
};
stx_log_Logic.method = function(str) {
	return stx_log_Logic.construct(function(info) {
		var self = stx_pico_OptionLift.map(info.pos,function(pos) {
			return stx_nano_Position.get_methodName(pos) == str;
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = false;
		}
		return stx_nano_lift_LiftNano.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 146, className : "stx.log._Logic.Logic_Impl_", methodName : "method"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_NotInMethod(str)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		});
	});
};
stx_log_Logic.always = function() {
	return stx_log_Logic.construct(function(pos) {
		return stx_nano_Report.unit();
	});
};
stx_log_Logic.never = function() {
	return stx_log_Logic.construct(function(value) {
		return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Zero,{ fileName : "stx/log/Logic.hx", lineNumber : 157, className : "stx.log._Logic.Logic_Impl_", methodName : "never"});
	});
};
var stx_log_LogicSum = $hxEnums["stx.log.LogicSum"] = { __ename__:"stx.log.LogicSum",__constructs__:null
	,LAnd: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LAnd",$_.__params__ = ["l","r"],$_)
	,LOr: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LOr",$_.__params__ = ["l","r"],$_)
	,LNot: ($_=function(l) { return {_hx_index:2,l:l,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LNot",$_.__params__ = ["l"],$_)
	,LV: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LV",$_.__params__ = ["v"],$_)
};
stx_log_LogicSum.__constructs__ = [stx_log_LogicSum.LAnd,stx_log_LogicSum.LOr,stx_log_LogicSum.LNot,stx_log_LogicSum.LV];
var stx_nano_lift_LiftNano = function() { };
$hxClasses["stx.nano.lift.LiftNano"] = stx_nano_lift_LiftNano;
stx_nano_lift_LiftNano.__name__ = "stx.nano.lift.LiftNano";
stx_nano_lift_LiftNano.nano = function(wildcard) {
	return new stx_nano_Module();
};
stx_nano_lift_LiftNano.arrd = function(wildcard,arr) {
	return arr;
};
stx_nano_lift_LiftNano.if_else = function(b,_if,_else) {
	if(b) {
		return _if();
	} else {
		return _else();
	}
};
stx_nano_lift_LiftNano.here = function(wildcard,pos) {
	return pos;
};
stx_nano_lift_LiftNano.test = function(wildcard,arr) {
	var runner = new haxe_unit_TestRunner();
	var t = $getIterator(arr);
	while(t.hasNext()) {
		var t1 = t.next();
		runner.add(t1);
	}
	runner.run();
};
stx_nano_lift_LiftNano.uuid = function(v,value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	var reg = new EReg("[xy]","g");
	return reg.map(value,function(reg) {
		var r = Math.random() * 16 | 0 | 0;
		var v = reg.matched(0) == "x" ? r : r & 3 | 8;
		return StringTools.hex(v);
	}).toLowerCase();
};
stx_nano_lift_LiftNano.sep = function(_) {
	var out = "/";
	return out;
};
stx_nano_lift_LiftNano.option = function(wildcard,v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_nano_lift_LiftNano.accept = function(wildcard,t) {
	return stx_nano_Res.accept(t);
};
stx_nano_lift_LiftNano.reject = function(wildcard,e) {
	return stx_nano_Res.reject(e);
};
stx_nano_lift_LiftNano.decline = function(wildcard,except) {
	return stx_nano_DeclinationSum.REJECT(except);
};
stx_nano_lift_LiftNano.success = function(wildcard,t) {
	return stx_pico_Outcome.success(t);
};
stx_nano_lift_LiftNano.failure = function(wildcard,e) {
	return stx_pico_Outcome.failure(e);
};
stx_nano_lift_LiftNano.fault = function(wildcard,pos) {
	return stx_nano_Fault._new(pos);
};
stx_nano_lift_LiftNano.couple = function(wildcard,tI,tII) {
	return function(fn) {
		fn(tI,tII);
	};
};
stx_nano_lift_LiftNano.pair = function(wildcard,tI,tII) {
	var this1 = new tink_core_MPair(tI,tII);
	return this1;
};
stx_nano_lift_LiftNano.decouple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,fn);
	};
};
stx_nano_lift_LiftNano.triple = function(wildcard,tI,tII,tIII) {
	return function(fn) {
		fn(tI,tII,tIII);
	};
};
stx_nano_lift_LiftNano.detriple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_TripleLift.detriple(tp,fn);
	};
};
stx_nano_lift_LiftNano.toCouple = function(self) {
	return self;
};
stx_nano_lift_LiftNano.lbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		var tmp;
		switch(lhs._hx_index) {
		case 0:
			var t = lhs.v;
			tmp = haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,rhs));
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
		return tmp;
	});
};
stx_nano_lift_LiftNano.rbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		var tmp;
		switch(rhs._hx_index) {
		case 0:
			var t = rhs.v;
			tmp = haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,t));
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
		return tmp;
	});
};
stx_nano_lift_LiftNano.fromPos = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_lift_LiftNano.future = function(wildcard) {
	var trigger = new tink_core_FutureTrigger();
	var future = trigger;
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,trigger,future);
};
stx_nano_lift_LiftNano.tracer = function(v,pos) {
	return function(t) {
		haxe_Log.trace(t,pos);
		return t;
	};
};
stx_nano_lift_LiftNano.trace = function(v,pos) {
	var infos = pos;
	return function(d) {
		haxe_Log.trace(d,infos);
	};
};
stx_nano_lift_LiftNano.through = function(__) {
	return function(v) {
		return v;
	};
};
stx_nano_lift_LiftNano.perform = function(__,fn) {
	return function(v) {
		fn();
		return v;
	};
};
stx_nano_lift_LiftNano.execute = function(__,fn) {
	return function(v) {
		var _g = fn();
		if(_g._hx_index == 0) {
			var e = _g.v;
			return stx_nano_ResSum.Reject(e);
		} else {
			return stx_nano_lift_LiftNano.accept(__,v);
		}
	};
};
stx_nano_lift_LiftNano.left = function(__,tI) {
	return haxe_ds_Either.Left(tI);
};
stx_nano_lift_LiftNano.right = function(__,tII) {
	return haxe_ds_Either.Right(tII);
};
stx_nano_lift_LiftNano.either = function(either) {
	return stx_pico_EitherLift.fold(either,function(l) {
		return l;
	},function(r) {
		return r;
	});
};
stx_nano_lift_LiftNano.value = function(future) {
	var result = haxe_ds_Option.None;
	var cancelled = false;
	future.handle(function(x) {
		cancelled = true;
		result = haxe_ds_Option.Some(x);
	});
	return result;
};
stx_nano_lift_LiftNano.crack = function(wildcard,e) {
	throw haxe_Exception.thrown(e);
};
stx_nano_lift_LiftNano.report = function(wildcard,f,pos) {
	if(f == null) {
		return stx_nano_Report.unit();
	} else {
		return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos)));
	}
};
stx_nano_lift_LiftNano.definition = function(wildcard,t) {
	return js_Boot.getClass(t);
};
stx_nano_lift_LiftNano.identifier = function(self) {
	return stx_pico_Identifier._new(self.__name__);
};
stx_nano_lift_LiftNano.locals = function(self) {
	return Type.getInstanceFields(self);
};
stx_nano_lift_LiftNano.vblock = function(wildcard,t) {
	return function() {
	};
};
stx_nano_lift_LiftNano.noop = function(wildcard) {
	return function(t) {
		return t;
	};
};
stx_nano_lift_LiftNano.nullify = function(wildcard) {
	return function(t) {
	};
};
stx_nano_lift_LiftNano.passthrough = function(wildcard,fn) {
	return function(t) {
		fn(t);
		return t;
	};
};
stx_nano_lift_LiftNano.not = function(bool) {
	return !bool;
};
stx_nano_lift_LiftNano.toPosition = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_lift_LiftNano.chunk = function(_,v) {
	if(v == null) {
		return stx_nano_ChunkSum.Tap;
	} else {
		return stx_nano_ChunkSum.Val(v);
	}
};
stx_nano_lift_LiftNano.way = function(wildcard,str) {
	return stx_nano_Way.fromStringDotted(str);
};
stx_nano_lift_LiftNano.toIdentifier = function(pos) {
	return stx_pico_Identifier.lift(stx_nano_Position.get_className(stx_nano_Position.fromPos(pos)));
};
stx_nano_lift_LiftNano.toAlert = function(ft) {
	return stx_nano_Alert.lift(ft);
};
stx_nano_lift_LiftNano.toString = function(pos) {
	var id = stx_nano_lift_LiftNano.toIdentifier(pos);
	var fn = stx_nano_Position.get_methodName(stx_nano_lift_LiftNano.toPosition(pos));
	return "" + (id == null ? "null" : stx_pico_Identifier.toString(id)) + "." + fn;
};
stx_nano_lift_LiftNano.toIdent = function(self) {
	return stx_nano_Ident.fromIdentifier(self);
};
var stx_nano_Wildcard = $hxEnums["stx.nano.Wildcard"] = { __ename__:"stx.nano.Wildcard",__constructs__:null
	,__: {_hx_name:"__",_hx_index:0,__enum__:"stx.nano.Wildcard",toString:$estr}
};
stx_nano_Wildcard.__constructs__ = [stx_nano_Wildcard.__];
var stx_assert_PredicateApi = function() { };
$hxClasses["stx.assert.PredicateApi"] = stx_assert_PredicateApi;
stx_assert_PredicateApi.__name__ = "stx.assert.PredicateApi";
stx_assert_PredicateApi.__isInterface__ = true;
stx_assert_PredicateApi.prototype = {
	apply: null
	,__class__: stx_assert_PredicateApi
};
var stx_log_Filter = function() {
};
$hxClasses["stx.log.Filter"] = stx_log_Filter;
stx_log_Filter.__name__ = "stx.log.Filter";
stx_log_Filter.__interfaces__ = [stx_assert_PredicateApi];
stx_log_Filter.Unit = function() {
	return new stx_log_filter_term_Unit();
};
stx_log_Filter.Race = function() {
	return new stx_log_filter_term_Race();
};
stx_log_Filter.PosPredicate = function() {
	return stx_log_filter_term_PosPredicate;
};
stx_log_Filter.prototype = {
	apply: function(value) {
		return stx_nano_Report.unit();
	}
	,note: function(str) {
	}
	,__class__: stx_log_Filter
};
var stx_log_filter_term_Unit = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.filter.term.Unit"] = stx_log_filter_term_Unit;
stx_log_filter_term_Unit.__name__ = "stx.log.filter.term.Unit";
stx_log_filter_term_Unit.__super__ = stx_log_Filter;
stx_log_filter_term_Unit.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		return stx_nano_Report.unit();
	}
	,__class__: stx_log_filter_term_Unit
});
var stx_log_core_Format = {};
stx_log_core_Format.__properties__ = {get_self:"get_self",get_DEFAULT:"get_DEFAULT"};
stx_log_core_Format.unit = function() {
	var this1 = stx_log_core_Format.fromArray(stx_log_core_Format.get_DEFAULT());
	return this1;
};
stx_log_core_Format._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_core_Format.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_log_core_Format.DEFAULT = null;
stx_log_core_Format.fromArray = function(self) {
	return new stx_log_core_FormatCls(self);
};
stx_log_core_Format.get_DEFAULT = function() {
	if(stx_log_core_Format.DEFAULT == null) {
		return stx_log_core_Format.DEFAULT = [stx_log_core_FormatSum.INCLUDE_TAGS,stx_log_core_FormatSum.INCLUDE_LEVEL,stx_log_core_FormatSum.INCLUDE_TIMESTAMP,stx_log_core_FormatSum.INCLUDE_LOCATION,stx_log_core_FormatSum.INCLUDE_DETAIL];
	} else {
		return stx_log_core_Format.DEFAULT;
	}
};
stx_log_core_Format.prj = function(this1) {
	return this1;
};
stx_log_core_Format.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
var stx_log_core_FormatCls = function(data) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data);
	var v = stx_log_core_Format.get_DEFAULT();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.data = tmp;
};
$hxClasses["stx.log.core.FormatCls"] = stx_log_core_FormatCls;
stx_log_core_FormatCls.__name__ = "stx.log.core.FormatCls";
stx_log_core_FormatCls.prototype = {
	data: null
	,has: function(v) {
		var index = this.data.indexOf(v);
		return stx_pico_OptionLift.is_defined(index == -1 ? haxe_ds_Option.None : haxe_ds_Option.Some(index));
	}
	,print: function(value) {
		var p = value.source;
		var s = p.stamp;
		var a = [];
		if(this.has(stx_log_core_FormatSum.INCLUDE_LEVEL)) {
			a.push(stx_log_Level.toString(s.level));
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_TIMESTAMP)) {
			a.push(HxOverrides.dateStr(s.timestamp));
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_TAGS)) {
			a.push("[" + s.tags.join(",") + "]");
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_LOCATION)) {
			var self = stx_pico_OptionLift.map(p.pos,stx_nano_PositionLift.to_vscode_clickable_link);
			var b;
			if(self._hx_index == 0) {
				var v = self.v;
				b = v;
			} else {
				b = "";
			}
			a.push(b);
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL)) {
			a.push("\n");
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_DETAIL)) {
			a.push(stx_log_core_Entry.toString(value.detail));
		}
		return a.join(" ");
	}
	,__class__: stx_log_core_FormatCls
};
var stx_log_core_FormatSum = $hxEnums["stx.log.core.FormatSum"] = { __ename__:"stx.log.core.FormatSum",__constructs__:null
	,INCLUDE_LEVEL: {_hx_name:"INCLUDE_LEVEL",_hx_index:0,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_TIMESTAMP: {_hx_name:"INCLUDE_TIMESTAMP",_hx_index:1,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_TAGS: {_hx_name:"INCLUDE_TAGS",_hx_index:2,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_LOCATION: {_hx_name:"INCLUDE_LOCATION",_hx_index:3,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_NEWLINE_FOR_DETAIL: {_hx_name:"INCLUDE_NEWLINE_FOR_DETAIL",_hx_index:4,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_DETAIL: {_hx_name:"INCLUDE_DETAIL",_hx_index:5,__enum__:"stx.log.core.FormatSum",toString:$estr}
};
stx_log_core_FormatSum.__constructs__ = [stx_log_core_FormatSum.INCLUDE_LEVEL,stx_log_core_FormatSum.INCLUDE_TIMESTAMP,stx_log_core_FormatSum.INCLUDE_TAGS,stx_log_core_FormatSum.INCLUDE_LOCATION,stx_log_core_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL,stx_log_core_FormatSum.INCLUDE_DETAIL];
var stx_pico_OptionLift = $hx_exports["stx"]["pico"]["OptionLift"] = function() { };
$hxClasses["stx.pico.OptionLift"] = stx_pico_OptionLift;
stx_pico_OptionLift.__name__ = "stx.pico.OptionLift";
stx_pico_OptionLift.fold = function(self,ok,no) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return ok(t);
	case 1:
		return no();
	}
};
stx_pico_OptionLift.map = function(self,f) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Option.Some(f(t));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return tmp;
};
stx_pico_OptionLift.flat_map = function(self,f) {
	if(self == null) {
		return haxe_ds_Option.None;
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return f(v);
		case 1:
			return haxe_ds_Option.None;
		}
	}
};
stx_pico_OptionLift.or = function(self,thunk) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Option.Some(t);
		break;
	case 1:
		tmp = thunk();
		break;
	}
	return tmp;
};
stx_pico_OptionLift.either = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Either.Left(t);
		break;
	case 1:
		tmp = haxe_ds_Either.Right(fn());
		break;
	}
	return tmp;
};
stx_pico_OptionLift.filter = function(self,fn) {
	return stx_pico_OptionLift.flat_map(self,function(v) {
		if(fn(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_pico_OptionLift.def = function(self,thunk) {
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return thunk();
	}
};
stx_pico_OptionLift.defv = function(self,v) {
	if(self._hx_index == 0) {
		var v1 = self.v;
		return v1;
	} else {
		return v;
	}
};
stx_pico_OptionLift.is_defined = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return true;
	case 1:
		return false;
	}
};
stx_pico_OptionLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_pico_OptionLift.is_defined(self);
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return null;
		}
	}};
};
stx_pico_OptionLift.merge = function(self,that,fn) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var r = that.v;
			var l = _g;
			return haxe_ds_Option.Some(fn(l,r));
		case 1:
			var l = _g;
			return haxe_ds_Option.Some(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return haxe_ds_Option.Some(r);
		} else {
			return haxe_ds_Option.None;
		}
		break;
	}
};
stx_pico_OptionLift.toArray = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return [v];
	case 1:
		return [];
	}
};
stx_pico_OptionLift.fudge = function(self,err) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return t;
	case 1:
		if(err != null) {
			throw haxe_Exception.thrown(err);
		} else {
			throw haxe_Exception.thrown("empty Option");
		}
		break;
	}
};
stx_pico_OptionLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return "" + Std.string(t);
	case 1:
		return "<undefined>";
	}
};
stx_pico_OptionLift.prj = function(self) {
	return self;
};
var stx_log_Level = {};
stx_log_Level._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_Level.asInt = function(this1) {
	return stx_log_LevelSum.prj(this1);
};
stx_log_Level.toString = function(this1) {
	switch(this1) {
	case 0:
		return "BLANK";
	case 1:
		return "TRACE";
	case 2:
		return "DEBUG";
	case 3:
		return "INFO";
	case 4:
		return "WARN";
	case 5:
		return "ERROR";
	case 6:
		return "FATAL";
	}
};
stx_log_Level.fromString = function(self) {
	switch(self) {
	case "BLANK":
		return haxe_ds_Option.Some(0);
	case "DEBUG":
		return haxe_ds_Option.Some(2);
	case "ERROR":
		return haxe_ds_Option.Some(5);
	case "FATAL":
		return haxe_ds_Option.Some(6);
	case "INFO":
		return haxe_ds_Option.Some(3);
	case "TRACE":
		return haxe_ds_Option.Some(1);
	case "WARN":
		return haxe_ds_Option.Some(4);
	default:
		return haxe_ds_Option.None;
	}
};
var stx_log__$Signal_SignalCls = function() {
	this.handlers = [];
};
$hxClasses["stx.log._Signal.SignalCls"] = stx_log__$Signal_SignalCls;
stx_log__$Signal_SignalCls.__name__ = "stx.log._Signal.SignalCls";
stx_log__$Signal_SignalCls.prototype = {
	handlers: null
	,handle: function(fn) {
		this.handlers.push(fn);
	}
	,trigger: function(v) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handle = _g1[_g];
			++_g;
			handle(v);
		}
	}
	,attach: function(logger) {
		stx_log_Signal.has_custom = true;
		this.handle(function(x) {
			var o = (logger.apply(x))(stx_log_Logger.spur);
		});
	}
	,__class__: stx_log__$Signal_SignalCls
};
var stx_log_Signal = {};
stx_log_Signal.__properties__ = {get_instance:"get_instance"};
stx_log_Signal.instance = null;
stx_log_Signal.get_instance = function() {
	return stx_nano_lift_LiftNano.if_else(stx_log_Signal.instance == null,function() {
		return stx_log_Signal.instance = new stx_log__$Signal_SignalCls();
	},function() {
		return stx_log_Signal.instance;
	});
};
stx_log_Signal._new = function() {
	var this1 = stx_log_Signal.get_instance();
	return this1;
};
stx_log_Signal.handle = function(this1,x) {
	stx_log_Signal.has_custom = true;
	this1.handle(x);
};
stx_log_Signal.transmit = function(v) {
	stx_log_Signal.get_instance().trigger(v);
};
var stx_log_Value = function(detail,source) {
	this.detail = detail;
	this.source = source;
};
$hxClasses["stx.log.Value"] = stx_log_Value;
stx_log_Value.__name__ = "stx.log.Value";
stx_log_Value.make = function(detail,source) {
	return new stx_log_Value(detail,stx_log_LogPosition.fromPos(source));
};
stx_log_Value.prototype = {
	detail: null
	,stamp: null
	,get_stamp: function() {
		return this.source.stamp;
	}
	,source: null
	,restamp: function(fn) {
		var next = this.source.with_stamp(fn);
		return new stx_log_Value(this.detail,next);
	}
	,__class__: stx_log_Value
	,__properties__: {get_stamp:"get_stamp"}
};
var stx_LogLift = function() { };
$hxClasses["stx.LogLift"] = stx_LogLift;
stx_LogLift.__name__ = "stx.LogLift";
stx_LogLift.Filter = function() {
	return stx_log_Filter;
};
stx_LogLift.Logic = function() {
	return stx_log_Logic._.make();
};
var stx_Log = {};
stx_Log.__properties__ = {get_global:"get_global"};
stx_Log.lift = function(self) {
	var this1 = self == null ? stx_Log.LOG : self;
	return this1;
};
stx_Log.get_global = function(this1) {
	return stx_log_logger_Global.get_ZERO();
};
stx_Log.pkg = function(pkg) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(pkg),function(scope) {
		var this1 = stx_Log.unit();
		var tag = scope.pack.join("/");
		var this2 = this1;
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		};
		return function(value,pos) {
			this2(value,fn(pos));
		};
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_Log.unit();
	}
};
stx_Log.LOG = function(value,pos) {
	stx_log_Signal.transmit(stx_Log.enlog(value,pos));
};
stx_Log.VOID = function(value,pos) {
};
stx_Log.unit = function() {
	var self = null;
	var this1 = self == null ? stx_Log.LOG : self;
	return this1;
};
stx_Log.void = function() {
	var self = stx_Log.VOID;
	var this1 = self == null ? stx_Log.LOG : self;
	return this1;
};
stx_Log.enlog = function(value,info) {
	var value1 = new stx_log_Value(value,info);
	return value1;
};
stx_Log.make = function(fn) {
	return function(value,pos) {
		fn(stx_Log.enlog(value,pos));
	};
};
stx_Log._new = function(self) {
	var this1 = self == null ? stx_Log.LOG : self;
	return this1;
};
stx_Log.level = function(this1,level) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(level);
		});
	};
	return function(value,pos) {
		this2(value,fn(pos));
	};
};
stx_Log.blank = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(0);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.trace = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(1);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.debug = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.info = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(3);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.warn = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(4);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.error = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(5);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.fatal = function(this1,v,pos) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(6);
		});
	};
	(function(value,pos) {
		this2(value,fn(pos));
	})(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_Log.mod = function(this1,fn) {
	return function(value,pos) {
		this1(value,fn(pos));
	};
};
stx_Log.tag = function(this1,tag) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.tag(tag);
		});
	};
	return function(value,pos) {
		this2(value,fn(pos));
	};
};
stx_Log.close = function(this1) {
	var this2 = this1;
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.hide();
		});
	};
	return function(value,pos) {
		this2(value,fn(pos));
	};
};
stx_Log.through = function(this1,ctr,pos) {
	var log_pos = stx_log_LogPosition.pure(pos);
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	if(self._hx_index == 0) {
		var v = self.v;
		ctr = v;
	} else {
		ctr = stx_log_StringCtr.unit();
	}
	return function(v) {
		this1(stx_log_StringCtr.capture(ctr,v),stx_log_LogPosition.fromPos(pos));
		return v;
	};
};
stx_Log.printer = function(this1,ctr,pos) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	if(self._hx_index == 0) {
		var v = self.v;
		ctr = v;
	} else {
		ctr = stx_log_StringCtr.unit();
	}
	return function(v) {
		this1(stx_log_StringCtr.capture(ctr,v),pos);
	};
};
stx_Log.attach = function(logger) {
	var this1 = stx_log_Signal.get_instance();
	this1.attach(logger);
};
stx_Log.prj = function(this1) {
	return this1;
};
var stx_Nano = function() { };
$hxClasses["stx.Nano"] = stx_Nano;
stx_Nano.__name__ = "stx.Nano";
stx_Nano.digests = function(wildcard) {
	return wildcard;
};
var stx_LiftArrayToCluster = function() { };
$hxClasses["stx.LiftArrayToCluster"] = stx_LiftArrayToCluster;
stx_LiftArrayToCluster.__name__ = "stx.LiftArrayToCluster";
stx_LiftArrayToCluster.toCluster = function(self) {
	return stx_nano_Cluster.lift(self);
};
stx_LiftArrayToCluster.imm = function(self) {
	return stx_nano_Cluster.lift(self);
};
var stx_Tup2 = $hxEnums["stx.Tup2"] = { __ename__:"stx.Tup2",__constructs__:null
	,tuple2: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.Tup2",toString:$estr}; },$_._hx_name="tuple2",$_.__params__ = ["l","r"],$_)
};
stx_Tup2.__constructs__ = [stx_Tup2.tuple2];
var stx_Tup2Lift = function() { };
$hxClasses["stx.Tup2Lift"] = stx_Tup2Lift;
stx_Tup2Lift.__name__ = "stx.Tup2Lift";
stx_Tup2Lift.cat = function(self,fn) {
	var l = self.l;
	var r = self.r;
	return fn(l,r);
};
stx_Tup2Lift.fst = function(self) {
	var l = self.l;
	var r = self.r;
	return l;
};
stx_Tup2Lift.snd = function(self) {
	var l = self.l;
	var r = self.r;
	return r;
};
var stx_Tup3 = $hxEnums["stx.Tup3"] = { __ename__:"stx.Tup3",__constructs__:null
	,tuple3: ($_=function(tI,tII,tIII) { return {_hx_index:0,tI:tI,tII:tII,tIII:tIII,__enum__:"stx.Tup3",toString:$estr}; },$_._hx_name="tuple3",$_.__params__ = ["tI","tII","tIII"],$_)
};
stx_Tup3.__constructs__ = [stx_Tup3.tuple3];
var stx_LiftPos = function() { };
$hxClasses["stx.LiftPos"] = stx_LiftPos;
stx_LiftPos.__name__ = "stx.LiftPos";
stx_LiftPos.lift = function(pos) {
	return stx_nano_Position._new(pos);
};
var stx_LiftArrayClassWithUnderscore = function() { };
$hxClasses["stx.LiftArrayClassWithUnderscore"] = stx_LiftArrayClassWithUnderscore;
stx_LiftArrayClassWithUnderscore.__name__ = "stx.LiftArrayClassWithUnderscore";
stx_LiftArrayClassWithUnderscore.graft = function(clazz) {
	return stx_lift_ArrayLift;
};
var stx_LiftFutureToSlot = function() { };
$hxClasses["stx.LiftFutureToSlot"] = stx_LiftFutureToSlot;
stx_LiftFutureToSlot.__name__ = "stx.LiftFutureToSlot";
stx_LiftFutureToSlot.toSlot = function(ft,pos) {
	return stx_nano_Slot.Guard(ft,pos);
};
var stx_LiftLazyFutureToSlot = function() { };
$hxClasses["stx.LiftLazyFutureToSlot"] = stx_LiftLazyFutureToSlot;
stx_LiftLazyFutureToSlot.__name__ = "stx.LiftLazyFutureToSlot";
stx_LiftLazyFutureToSlot.toSlot = function(fn) {
	return stx_nano_Slot.Guard(fn(),{ fileName : "stx/Nano.hx", lineNumber : 223, className : "stx.LiftLazyFutureToSlot", methodName : "toSlot"});
};
var stx_Pico = function() { };
$hxClasses["stx.Pico"] = stx_Pico;
stx_Pico.__name__ = "stx.Pico";
var stx_ExceptionApi = function() { };
$hxClasses["stx.ExceptionApi"] = stx_ExceptionApi;
stx_ExceptionApi.__name__ = "stx.ExceptionApi";
stx_ExceptionApi.__isInterface__ = true;
stx_ExceptionApi.prototype = {
	get_message: null
	,get_stack: null
	,get_native: null
	,details: null
	,__class__: stx_ExceptionApi
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
};
var stx_PkgLift = function() { };
$hxClasses["stx.PkgLift"] = stx_PkgLift;
stx_PkgLift.__name__ = "stx.PkgLift";
stx_PkgLift.pkg = function(_,pos) {
	var p = stx_pkg_Scope.fromPosInfos(pos);
	return stx_pkg_Pkg.fromScope(p);
};
var stx_SchemaModuleCtr = function() { };
$hxClasses["stx.SchemaModuleCtr"] = stx_SchemaModuleCtr;
stx_SchemaModuleCtr.__name__ = "stx.SchemaModuleCtr";
stx_SchemaModuleCtr.schema = function(wildcard) {
	return new stx_schema_Module();
};
var stx_Show = function() { };
$hxClasses["stx.Show"] = stx_Show;
stx_Show.__name__ = "stx.Show";
stx_Show.show = function(wildcard,v) {
	return (stx_Show.make(v))(v);
};
stx_Show.__show__ = function(impl) {
	return function(v) {
		if(null == v) {
			return "null";
		} else {
			return impl(v);
		}
	};
};
stx_Show.make = function(t) {
	return stx_Show.make0(Type.typeof(t));
};
stx_Show.make0 = function(v) {
	switch(v._hx_index) {
	case 0:
		return stx__$Show_NullShow.toString;
	case 1:
		return stx_Show.__show__(stx__$Show_IntShow.toString);
	case 2:
		return stx_Show.__show__(stx__$Show_FloatShow.toString);
	case 3:
		return stx_Show.__show__(stx__$Show_BoolShow.toString);
	case 4:
		return stx_Show.__show__(stx__$Show_ObjectShow.toString);
	case 5:
		return stx_Show.__show__(function(v) {
			return "<function>";
		});
	case 6:
		var _g = v.c;
		var c = _g;
		if(c == String) {
			return stx_Show.__show__(Std.string);
		} else {
			var c = _g;
			if(c == Array) {
				return stx_Show.__show__(stx__$Show_ArrayShow.toString);
			} else {
				var c = _g;
				if(c == haxe_ds_List) {
					return stx_Show.__show__(stx__$Show_ListShow.toString);
				} else {
					var c = _g;
					if(HxOverrides.remove(Type.getInstanceFields(c),"toString")) {
						return stx_Show.__show__(function(v) {
							return Reflect.field(v,"toString").apply(v,[]);
						});
					} else {
						return stx_Show.__show__(function(v) {
							var c = js_Boot.getClass(v);
							return c.__name__;
						});
					}
				}
			}
		}
		break;
	case 7:
		var _g = v.e;
		return stx_Show.__show__(stx__$Show_EnumShow.toString);
	case 8:
		return stx_Show.__show__(function(v) {
			return "<unknown>";
		});
	}
};
var stx__$Show_ListShow = function() { };
$hxClasses["stx._Show.ListShow"] = stx__$Show_ListShow;
stx__$Show_ListShow.__name__ = "stx._Show.ListShow";
stx__$Show_ListShow.toString = function(lst) {
	return stx__$Show_IterableShow.toString(lst);
};
var stx__$Show_NullShow = function() { };
$hxClasses["stx._Show.NullShow"] = stx__$Show_NullShow;
stx__$Show_NullShow.__name__ = "stx._Show.NullShow";
stx__$Show_NullShow.toString = function(v) {
	return "null";
};
var stx__$Show_EnumShow = function() { };
$hxClasses["stx._Show.EnumShow"] = stx__$Show_EnumShow;
stx__$Show_EnumShow.__name__ = "stx._Show.EnumShow";
stx__$Show_EnumShow.toString = function(v) {
	var e = v;
	var buf = $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
	var params = Type.enumParameters(v);
	if(params.length == 0) {
		return buf;
	} else {
		buf += "(";
		var _g = 0;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			var p = params[i];
			buf += (stx_Show.make(p))(p);
			if(i < params.length - 1) {
				buf += ", ";
			}
		}
		buf += ")";
		return buf;
	}
};
var stx__$Show_ObjectShow = function() { };
$hxClasses["stx._Show.ObjectShow"] = stx__$Show_ObjectShow;
stx__$Show_ObjectShow.__name__ = "stx._Show.ObjectShow";
stx__$Show_ObjectShow.toString = function(v) {
	if(Reflect.fields(v).length == 0) {
		return Std.string(v);
	}
	var buf = [];
	var _g = 0;
	var _g1 = Reflect.fields(v);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var i = Reflect.field(v,k);
		buf.push(k + ":" + (stx_Show.make(i))(i));
	}
	return "{" + buf.join(",") + "}";
};
var stx__$Show_ArrayShow = function() { };
$hxClasses["stx._Show.ArrayShow"] = stx__$Show_ArrayShow;
stx__$Show_ArrayShow.__name__ = "stx._Show.ArrayShow";
stx__$Show_ArrayShow.toString = function(v) {
	return stx__$Show_ArrayShow.toStringWith(v,stx_Show.make(v[0]));
};
stx__$Show_ArrayShow.toStringWith = function(v,show) {
	var result = new Array(v.length);
	var _g = 0;
	var _g1 = v.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = show(v[i]);
	}
	return "[" + result.join(", ") + "]";
};
stx__$Show_ArrayShow.mkString = function(arr,sep,show) {
	if(sep == null) {
		sep = ", ";
	}
	var isFirst = true;
	return Lambda.fold(arr,function(b,a) {
		var prefix;
		if(isFirst) {
			isFirst = false;
			prefix = "";
		} else {
			prefix = sep;
		}
		if(null == show) {
			show = stx_Show.make(b);
		}
		return a + prefix + show(b);
	},"");
};
var stx__$Show_IterableShow = function() { };
$hxClasses["stx._Show.IterableShow"] = stx__$Show_IterableShow;
stx__$Show_IterableShow.__name__ = "stx._Show.IterableShow";
stx__$Show_IterableShow.toString = function(i,show,prefix,suffix,sep) {
	if(sep == null) {
		sep = ", ";
	}
	if(suffix == null) {
		suffix = ")";
	}
	if(prefix == null) {
		prefix = "(";
	}
	return stx__$Show_IterableShow.mkString(i,show,prefix,suffix,sep);
};
stx__$Show_IterableShow.mkString = function(i,show,prefix,suffix,sep) {
	if(sep == null) {
		sep = ", ";
	}
	if(suffix == null) {
		suffix = ")";
	}
	if(prefix == null) {
		prefix = "(";
	}
	if(show == null) {
		show = Std.string;
	}
	var s = prefix;
	var isFirst = true;
	var t = $getIterator(i);
	while(t.hasNext()) {
		var t1 = t.next();
		if(isFirst) {
			isFirst = false;
		} else {
			s += sep;
		}
		s += show(t1);
	}
	return s + suffix;
};
var stx__$Show_IntShow = function() { };
$hxClasses["stx._Show.IntShow"] = stx__$Show_IntShow;
stx__$Show_IntShow.__name__ = "stx._Show.IntShow";
stx__$Show_IntShow.toString = function(v) {
	return "" + v;
};
var stx__$Show_FloatShow = function() { };
$hxClasses["stx._Show.FloatShow"] = stx__$Show_FloatShow;
stx__$Show_FloatShow.__name__ = "stx._Show.FloatShow";
stx__$Show_FloatShow.toString = function(v) {
	return "" + v;
};
var stx__$Show_StackItemShow = function() { };
$hxClasses["stx._Show.StackItemShow"] = stx__$Show_StackItemShow;
stx__$Show_StackItemShow.__name__ = "stx._Show.StackItemShow";
stx__$Show_StackItemShow.toString = function(s) {
	switch(s._hx_index) {
	case 0:
		return "function";
	case 1:
		var m = s.m;
		return m;
	case 2:
		var _g = s.file;
		var _g = s.column;
		var si = s.s;
		var line = s.line;
		return stx__$Show_StackItemShow.toString(si) + (":" + line);
	case 3:
		var classname = s.classname;
		var method = s.method;
		return "" + classname + "." + method;
	case 4:
		var v = s.v;
		return "@" + v;
	}
};
var stx__$Show_BoolShow = function() { };
$hxClasses["stx._Show.BoolShow"] = stx__$Show_BoolShow;
stx__$Show_BoolShow.__name__ = "stx._Show.BoolShow";
stx__$Show_BoolShow.toString = function(v) {
	if(v) {
		return "true";
	} else {
		return "false";
	}
};
var stx_Stream = {};
stx_Stream.__properties__ = {get_self:"get_self"};
stx_Stream._new = function(self) {
	var this1 = self;
	return this1;
};
stx_Stream.lift = function(self) {
	return stx_Stream._new(self);
};
stx_Stream.fromArray = function(self) {
	var f = stx_nano_ChunkSum.Val;
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(self[i]);
	}
	return stx_Stream.lift(stx_nano_Signal.fromArray(stx_lift_ArrayLift.snoc(result,stx_nano_ChunkSum.End())));
};
stx_Stream.fromFuture = function(self) {
	var self1 = function() {
		return self;
	};
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self1().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	}));
};
stx_Stream.window = function(this1,buffer) {
	return stx_Stream.lift(stx_stream_Window.toSignal(stx_stream_Window.make(this1,buffer)));
};
stx_Stream.fromThunkFuture = function(self) {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	}));
};
stx_Stream.pure = function(self) {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		cb(stx_nano_ChunkSum.Val(self));
		cb(stx_nano_ChunkSum.End());
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	}));
};
stx_Stream.effect = function(self) {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		self();
		cb(stx_nano_ChunkSum.End());
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	}));
};
stx_Stream.unit = function() {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		cb(stx_nano_ChunkSum.End());
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	}));
};
stx_Stream.make = function(f,init) {
	var this1 = new tink_core__$Signal_Suspendable(f,init);
	return stx_Stream.lift(this1);
};
stx_Stream.map = function(this1,fn) {
	return stx_nano_Signal.map(this1,function(chunk) {
		return stx_nano_ChunkLift.map(chunk,fn);
	});
};
stx_Stream.prj = function(this1) {
	return this1;
};
stx_Stream.get_self = function(this1) {
	return stx_Stream.lift(this1);
};
var stx_StreamLift = function() { };
$hxClasses["stx.StreamLift"] = stx_StreamLift;
stx_StreamLift.__name__ = "stx.StreamLift";
stx_StreamLift.lift = function(self) {
	return stx_Stream.lift(self);
};
stx_StreamLift.seq = function(self,that) {
	var id = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxx");
	var ended = false;
	return stx_StreamLift.lift(stx_nano_Signal.make(function(cb) {
		var cbII = null;
		var cbI = self.listen(function(chunk) {
			switch(chunk._hx_index) {
			case 0:
				var v = chunk.v;
				cb(stx_nano_ChunkSum.Val(v));
				break;
			case 1:
				break;
			case 2:
				var e = chunk.err;
				var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
				switch(self._hx_index) {
				case 0:
					var t = self.v;
					cb(stx_nano_ChunkSum.End(t));
					break;
				case 1:
					cbII = that.listen(function(chunk) {
						switch(chunk._hx_index) {
						case 0:
							var v = chunk.v;
							if(!ended) {
								cb(stx_nano_ChunkSum.Val(v));
							} else {
								var cb1 = cb;
								var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/Stream.hx", lineNumber : 124, className : "stx.StreamLift", methodName : "seq"});
								var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_stream_core_Errors.e_end_called_twice(stx_Nano.digests(stx_nano_Wildcard.__))));
								var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
									return stx_nano_Rejection.prj(x);
								});
								if(data == null) {
									data = haxe_ds_Option.None;
								}
								if(lst == null) {
									lst = haxe_ds_Option.None;
								}
								var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
								cb1(stx_nano_ChunkSum.End(this2));
							}
							break;
						case 1:
							break;
						case 2:
							var e = chunk.err;
							ended = true;
							cb(stx_nano_ChunkSum.End(e));
							break;
						}
					});
					break;
				}
				break;
			}
		});
		var this1 = new tink_core_SimpleLink(function() {
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cbI));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cbII));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
		});
		return this1;
	}));
};
stx_StreamLift.flat_map = function(self,fn) {
	var cancelled = false;
	var streams = [];
	var id = Math.random();
	var this1 = new tink_core__$Signal_Suspendable(function(cb) {
		var callbackI = null;
		var callback = self.listen(function(chunk) {
			switch(chunk._hx_index) {
			case 0:
				var v = chunk.v;
				var val = v;
				if(!cancelled) {
					var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var fn1 = function(pos) {
						return pos.with_stamp(function(stamp) {
							return stamp.relevel(1);
						});
					};
					(function(value,pos) {
						this1(value,fn1(pos));
					})(new stx_log_EntryCtr().thunk(function() {
						return "" + Std.string(val);
					}),stx_log_LogPosition.fromPos({ fileName : "stx/Stream.hx", lineNumber : 169, className : "stx.StreamLift", methodName : "flat_map"}));
					streams.push(fn(val));
				}
				break;
			case 1:
				break;
			case 2:
				var e = chunk.err;
				var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
				switch(self._hx_index) {
				case 0:
					var t = self.v;
					cancelled = true;
					streams = [];
					cb(stx_nano_ChunkSum.End(t));
					break;
				case 1:
					var self = stx_lift_ArrayLift.lfold1(streams,stx_StreamLift.seq);
					var v = stx_Stream.unit();
					var this2;
					if(self._hx_index == 0) {
						var v1 = self.v;
						this2 = v1;
					} else {
						this2 = v;
					}
					callbackI = this2.listen(function(chunk) {
						cb(chunk);
					});
					break;
				}
				break;
			}
		});
		var this1 = new tink_core_SimpleLink(function() {
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,callback));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,callbackI));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
		});
		return this1;
	},null);
	return stx_StreamLift.lift(this1);
};
stx_StreamLift.next = function(self) {
	return tink_core_Signal.nextTime(stx_Stream.prj(self));
};
stx_StreamLift.errata = function(self,fn) {
	return stx_StreamLift.lift(stx_nano_Signal.map(stx_Stream.prj(self),function(chk) {
		return stx_nano_ChunkLift.errata(chk,fn);
	}));
};
stx_StreamLift.errate = function(self,fn) {
	return stx_StreamLift.lift(stx_nano_Signal.map(stx_Stream.prj(self),function(chk) {
		return stx_nano_ChunkLift.errate(chk,fn);
	}));
};
var stx_Sys = function() { };
$hxClasses["stx.Sys"] = stx_Sys;
stx_Sys.__name__ = "stx.Sys";
stx_Sys.sys = function(wildcard) {
	return new stx_Module();
};
var stx_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.Module"] = stx_Module;
stx_Module.__name__ = "stx.Module";
stx_Module.__super__ = stx_pico_Clazz;
stx_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	fs: function() {
		return new stx__$Sys_Fs();
	}
	,dir: function() {
		return new stx__$Sys_Dir();
	}
	,env: function(key) {
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,process.env[key]);
	}
	,args: function() {
		return process.argv.slice(2);
	}
	,cwd: function() {
		return { get : function() {
			return process.cwd();
		}, put : function(str) {
			process.chdir(str);
		}};
	}
	,println: function(str) {
		process.stdout.write(Std.string(str));
		process.stdout.write("\n");
	}
	,print: function(str) {
		process.stdout.write(Std.string(str));
	}
	,exit: function(code) {
		process.exit(code);
	}
	,__class__: stx_Module
});
var stx__$Sys_Fs = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx._Sys.Fs"] = stx__$Sys_Fs;
stx__$Sys_Fs.__name__ = "stx._Sys.Fs";
stx__$Sys_Fs.__super__ = stx_pico_Clazz;
stx__$Sys_Fs.prototype = $extend(stx_pico_Clazz.prototype,{
	exists: function(str) {
		return sys_FileSystem.exists(str);
	}
	,get: function(str) {
		return js_node_Fs.readFileSync(str,{ encoding : "utf8"});
	}
	,set: function(key,val) {
		js_node_Fs.writeFileSync(key,val);
	}
	,__class__: stx__$Sys_Fs
});
var stx__$Sys_Dir = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx._Sys.Dir"] = stx__$Sys_Dir;
stx__$Sys_Dir.__name__ = "stx._Sys.Dir";
stx__$Sys_Dir.__super__ = stx_pico_Clazz;
stx__$Sys_Dir.prototype = $extend(stx_pico_Clazz.prototype,{
	put: function(path) {
		sys_FileSystem.createDirectory(path);
	}
	,__class__: stx__$Sys_Dir
});
var stx_Test = function() { };
$hxClasses["stx.Test"] = stx_Test;
stx_Test.__name__ = "stx.Test";
stx_Test.poke = function(wildcard,arr) {
	var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	var _g = $bind(arr,arr.map);
	var f = function(t) {
		return stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,t);
	};
	var tmp = function() {
		return _g(f);
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(new stx_log_EntryCtr().thunk(tmp),stx_log_LogPosition.fromPos({ fileName : "stx/Test.hx", lineNumber : 9, className : "stx.Test", methodName : "poke"}));
	var f1 = ($_=new stx_assert_Module({ fileName : "stx/Test.hx", lineNumber : 10, className : "stx.Test", methodName : "poke"}),$bind($_,$_.iz));
	var result = new Array(arr.length);
	var _g1 = 0;
	var _g2 = arr.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = f1(arr[i]);
	}
	var self = stx_lift_ArrayLift.lfold1(result,($_=new stx_assert_Module({ fileName : "stx/Test.hx", lineNumber : 11, className : "stx.Test", methodName : "poke"}),$bind($_,$_.or)));
	var v = new stx_assert_Module({ fileName : "stx/Test.hx", lineNumber : 12, className : "stx.Test", methodName : "poke"}).never();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	return stx_assert_Predicate.check(tmp);
};
stx_Test.test = function(wildcard,tests,poke) {
	var tests1 = tests;
	new stx_test_Reporter(new stx_test_Runner().apply(tests1)).enact();
};
stx_Test.explain = function(wildcard,val,ctr) {
	return new stx_Explain(val,ctr);
};
var stx_Explain = function(val,ctr) {
	this.val = val;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = Std.string;
	}
	this.ctr = tmp;
};
$hxClasses["stx.Explain"] = stx_Explain;
stx_Explain.__name__ = "stx.Explain";
stx_Explain.prototype = {
	val: null
	,ctr: null
	,should: function() {
		return new stx_Explainers(this);
	}
	,match: function(sentence,args) {
		var arr = [this.ctr(this.val)];
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,args);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = [];
		}
		return new stx_Explained(sentence,arr.concat(tmp));
	}
	,__class__: stx_Explain
};
var stx_Explainers = function(explain) {
	this.explain = explain;
};
$hxClasses["stx.Explainers"] = stx_Explainers;
stx_Explainers.__name__ = "stx.Explainers";
stx_Explainers.prototype = {
	explain: null
	,go: function(rest,args) {
		return this.explain.match("%s should " + rest,args);
	}
	,be_like: function(v) {
		return this.go("be like %s.",[v]);
	}
	,be: function(v,words) {
		if(words == null) {
			words = "";
		}
		var s = words == "" ? "be %s" : "be " + words + " %s";
		return this.go("" + s,[v]);
	}
	,be_equal_to: function(v) {
		return this.go("be equal to %s",[v]);
	}
	,contain: function(v) {
		return this.go("contain %s",[v]);
	}
	,exist: function() {
		return this.go("should exist.");
	}
	,raises: function(e) {
		return this.go("raise error: %s",[e]);
	}
	,__class__: stx_Explainers
};
var stx_Explained = function(sentence,values) {
	this.sentence = sentence;
	this.values = values;
};
$hxClasses["stx.Explained"] = stx_Explained;
stx_Explained.__name__ = "stx.Explained";
stx_Explained.prototype = {
	sentence: null
	,values: null
	,toString: function() {
		var tmp = this.sentence;
		var _this = this.values;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "" + _this[i];
		}
		return Printf.format(tmp,result);
	}
	,__class__: stx_Explained
};
var stx_assert_AssertionApi = function() { };
$hxClasses["stx.assert.AssertionApi"] = stx_assert_AssertionApi;
stx_assert_AssertionApi.__name__ = "stx.assert.AssertionApi";
stx_assert_AssertionApi.__isInterface__ = true;
stx_assert_AssertionApi.prototype = {
	comply: null
	,asAssertionApi: null
	,__class__: stx_assert_AssertionApi
};
var stx_assert_Assertion = {};
stx_assert_Assertion.bindI = function(this1,l) {
	return new stx_assert_predicate_term_AssertionPredicate(this1,l);
};
stx_assert_Assertion.equals = function(pos) {
	return new stx_assert_assertion_term_Equals(pos);
};
stx_assert_Assertion.alike = function(pos) {
	return new stx_assert_assertion_term_Alike(pos);
};
stx_assert_Assertion.gt = function(pos) {
	return new stx_assert_assertion_term_GreaterThan(pos);
};
stx_assert_Assertion.gt_eq = function(pos) {
	return new stx_assert_assertion_term_GreaterThanOrEquals(pos);
};
stx_assert_Assertion.lt = function(pos) {
	return new stx_assert_assertion_term_LessThan(pos);
};
stx_assert_Assertion.lt_eq = function(pos) {
	return new stx_assert_assertion_term_LessThanOrEquals(pos);
};
stx_assert_Assertion.Anon = function(fn) {
	return new stx_assert_assertion_term_Anon(fn,{ fileName : "stx/assert/Assertion.hx", lineNumber : 38, className : "stx.assert._Assertion.Assertion_Impl_", methodName : "Anon"});
};
stx_assert_Assertion.Errata = function(self,fn) {
	return new stx_assert_assertion_term_Errata(self.asAssertionApi(),fn,{ fileName : "stx/assert/Assertion.hx", lineNumber : 41, className : "stx.assert._Assertion.Assertion_Impl_", methodName : "Errata"});
};
var stx_assert_OrderableApi = function() { };
$hxClasses["stx.assert.OrderableApi"] = stx_assert_OrderableApi;
stx_assert_OrderableApi.__name__ = "stx.assert.OrderableApi";
stx_assert_OrderableApi.__isInterface__ = true;
stx_assert_OrderableApi.prototype = {
	lt: null
	,__class__: stx_assert_OrderableApi
};
var stx_assert_EqualableApi = function() { };
$hxClasses["stx.assert.EqualableApi"] = stx_assert_EqualableApi;
stx_assert_EqualableApi.__name__ = "stx.assert.EqualableApi";
stx_assert_EqualableApi.__isInterface__ = true;
stx_assert_EqualableApi.prototype = {
	eq: null
	,__class__: stx_assert_EqualableApi
};
var stx_assert_ComparableApi = function() { };
$hxClasses["stx.assert.ComparableApi"] = stx_assert_ComparableApi;
stx_assert_ComparableApi.__name__ = "stx.assert.ComparableApi";
stx_assert_ComparableApi.__isInterface__ = true;
stx_assert_ComparableApi.__interfaces__ = [stx_assert_OrderableApi,stx_assert_EqualableApi];
var stx_assert_Comparable = {};
stx_assert_Comparable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Comparable.Int = function() {
	return new stx_assert_comparable_term_Int();
};
stx_assert_Comparable.String = function() {
	return new stx_assert_comparable_term_String();
};
stx_assert_Comparable.Couple = function(l,r) {
	return new stx_assert_comparable_term_Couple(l,r);
};
stx_assert_Comparable.Primitive = function() {
	return new stx_assert_comparable_term_Primitive();
};
stx_assert_Comparable.Anon = function(eq,lt) {
	return new stx_assert_comparable_term_Anon(eq,lt);
};
stx_assert_Comparable.Cluster = function(inner) {
	return new stx_assert_comparable_term_Cluster(inner);
};
var stx_assert_ComparativeSum = $hxEnums["stx.assert.ComparativeSum"] = { __ename__:"stx.assert.ComparativeSum",__constructs__:null
	,GT: {_hx_name:"GT",_hx_index:0,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,GTEQ: {_hx_name:"GTEQ",_hx_index:1,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,LT: {_hx_name:"LT",_hx_index:2,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,LTEQ: {_hx_name:"LTEQ",_hx_index:3,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,EQ: {_hx_name:"EQ",_hx_index:4,__enum__:"stx.assert.ComparativeSum",toString:$estr}
};
stx_assert_ComparativeSum.__constructs__ = [stx_assert_ComparativeSum.GT,stx_assert_ComparativeSum.GTEQ,stx_assert_ComparativeSum.LT,stx_assert_ComparativeSum.LTEQ,stx_assert_ComparativeSum.EQ];
var stx_assert_Comparative = {};
stx_assert_Comparative._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Comparative.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return ">";
	case 1:
		return ">=";
	case 2:
		return "<";
	case 3:
		return "<=";
	case 4:
		return "==";
	}
};
var stx_assert_Compare = {};
stx_assert_Compare.__properties__ = {get_self:"get_self"};
stx_assert_Compare._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Compare.pure = function(v) {
	return stx_assert__$Compare_CompareSum.Value(v);
};
stx_assert_Compare.and = function(this1,that) {
	return stx_assert__$Compare_CompareSum.And(this1,that);
};
stx_assert_Compare.or = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Or(this1,that);
};
stx_assert_Compare.not = function(this1) {
	return stx_assert__$Compare_CompareSum.Not(this1);
};
stx_assert_Compare.gt = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GT,that);
};
stx_assert_Compare.gtEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GTEQ,that);
};
stx_assert_Compare.lt = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.LT,that);
};
stx_assert_Compare.ltEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.LTEQ,that);
};
stx_assert_Compare.eq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.EQ,that);
};
stx_assert_Compare.nEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Not(stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GTEQ,that));
};
stx_assert_Compare.get_self = function(this1) {
	return this1;
};
var stx_assert__$Compare_CompareSum = $hxEnums["stx.assert._Compare.CompareSum"] = { __ename__:"stx.assert._Compare.CompareSum",__constructs__:null
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v"],$_)
	,And: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="And",$_.__params__ = ["l","r"],$_)
	,Or: ($_=function(l,r) { return {_hx_index:2,l:l,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Or",$_.__params__ = ["l","r"],$_)
	,Not: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Not",$_.__params__ = ["e"],$_)
	,Binop: ($_=function(l,op,r) { return {_hx_index:4,l:l,op:op,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Binop",$_.__params__ = ["l","op","r"],$_)
};
stx_assert__$Compare_CompareSum.__constructs__ = [stx_assert__$Compare_CompareSum.Value,stx_assert__$Compare_CompareSum.And,stx_assert__$Compare_CompareSum.Or,stx_assert__$Compare_CompareSum.Not,stx_assert__$Compare_CompareSum.Binop];
var stx_assert_EqApi = function() { };
$hxClasses["stx.assert.EqApi"] = stx_assert_EqApi;
stx_assert_EqApi.__name__ = "stx.assert.EqApi";
stx_assert_EqApi.__isInterface__ = true;
stx_assert_EqApi.prototype = {
	comply: null
	,__class__: stx_assert_EqApi
};
var stx_assert_Eq = {};
stx_assert_Eq._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Eq.toAssertion = function(this1,pos) {
	return new stx_assert_eq_term_EqAssertion(this1,pos);
};
stx_assert_Eq.Int = function() {
	return new stx_assert_eq_term_Int();
};
stx_assert_Eq.Int64 = function() {
	return new stx_assert_eq_term_Int64();
};
stx_assert_Eq.String = function() {
	return new stx_assert_eq_term_String();
};
stx_assert_Eq.Couple = function(l,r) {
	return new stx_assert_eq_term_Couple(l,r);
};
stx_assert_Eq.Anon = function(fn) {
	return new stx_assert_eq_term_Anon(fn);
};
stx_assert_Eq.Noise = function() {
	return stx_assert_Eq._new(new stx_assert_eq_term_Noise());
};
stx_assert_Eq.Bool = function() {
	return stx_assert_Eq.Anon(function(l,r) {
		if(l == r) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Eq.Float = function() {
	return stx_assert_Eq.Anon(function(l,r) {
		if(l == r) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Eq.Array = function(inner) {
	return new stx_assert_eq_term_Array(inner);
};
stx_assert_Eq.Cluster = function(inner) {
	return new stx_assert_eq_term_Cluster(inner);
};
stx_assert_Eq.Primitive = function() {
	return new stx_assert_eq_term_Primitive();
};
stx_assert_Eq.Option = function(inner) {
	return new stx_assert_eq_term_Option(inner);
};
var stx_assert_Equal = function() { };
$hxClasses["stx.assert.Equal"] = stx_assert_Equal;
stx_assert_Equal.__name__ = "stx.assert.Equal";
stx_assert_Equal.getEqualFor = function(v) {
	return stx_assert_Equal.getEqualForType(Type.typeof(v));
};
stx_assert_Equal.getEqualForType = function(v) {
	var tmp;
	switch(v._hx_index) {
	case 0:
		tmp = new stx_assert_eq_term_Null();
		break;
	case 1:
		tmp = new stx_assert_eq_term_Int();
		break;
	case 2:
		tmp = new stx_assert_eq_term_Float();
		break;
	case 3:
		tmp = new stx_assert_eq_term_Bool();
		break;
	case 4:
		tmp = new stx_assert_eq_term_Object();
		break;
	case 5:
		tmp = new stx_assert_eq_term_Function();
		break;
	case 6:
		var _g = v.c;
		var c = _g;
		if(c == haxe_ds_StringMap) {
			tmp = new stx_assert_eq_term_Map(new stx_assert_eq_term_Deferred());
		} else {
			var c = _g;
			if(c == stx_assert_eq_term_Array) {
				tmp = new stx_assert_eq_term_Array(new stx_assert_eq_term_Deferred());
			} else {
				var c = _g;
				if(c == stx_assert_eq_term_Date) {
					tmp = new stx_assert_eq_term_Date();
				} else {
					var c = _g;
					if(c == stx_assert_eq_term_String) {
						tmp = new stx_assert_eq_term_String();
					} else {
						var c = _g;
						tmp = HxOverrides.remove(Type.getInstanceFields(c),"equals") ? new stx_assert_eq_term_HasFunction().elide() : new stx_assert_eq_term_UnsupportedClass();
					}
				}
			}
		}
		break;
	case 7:
		var _g = v.e;
		tmp = new stx_assert_eq_term_Enum();
		break;
	case 8:
		tmp = new stx_assert_eq_term_Unknown();
		break;
	}
	return new stx_assert_eq_term_NotNull(tmp);
};
var stx_assert_Equalable = {};
stx_assert_Equalable._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_assert_EqualedSum = {};
stx_assert_EqualedSum.is_ok = function(this1) {
	return this1;
};
stx_assert_EqualedSum.and = function(this1,that) {
	return stx_assert_Equaled.fromBool(this1 && stx_assert_EqualedSum.is_ok(that));
};
var stx_assert_Equaled = {};
stx_assert_Equaled.fromBool = function(b) {
	if(b) {
		return stx_assert_Equaled.AreEqual;
	} else {
		return stx_assert_Equaled.NotEqual;
	}
};
stx_assert_Equaled.and = function(this1,that) {
	return stx_assert_Equaled.fromBool(stx_assert_Equaled.toBool(this1) && stx_assert_Equaled.toBool(that));
};
stx_assert_Equaled.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Equaled.or = function(this1,that) {
	return stx_assert_Equaled.fromBool(stx_assert_Equaled.toBool(this1) || stx_assert_Equaled.toBool(that));
};
stx_assert_Equaled.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
var stx_assert_Module = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
$hxClasses["stx.assert.Module"] = stx_assert_Module;
stx_assert_Module.__name__ = "stx.assert.Module";
stx_assert_Module.__super__ = stx_pico_Clazz;
stx_assert_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,equals: function() {
		return stx_assert_Assertion.equals(this.pos);
	}
	,alike: function() {
		return new stx_assert_assertion_term_Alike(this.pos);
	}
	,gt: function() {
		return stx_assert_Assertion.gt(this.pos);
	}
	,gt_eq: function() {
		return new stx_assert_assertion_term_GreaterThanOrEquals(this.pos);
	}
	,lt: function() {
		return new stx_assert_assertion_term_LessThan(this.pos);
	}
	,lt_eq: function() {
		return new stx_assert_assertion_term_LessThanOrEquals(this.pos);
	}
	,always: function() {
		return stx_assert_Predicate.always(this.pos);
	}
	,never: function() {
		return stx_assert_Predicate.never(this.pos);
	}
	,iz: function(clazz) {
		return new stx_assert_predicate_term_Is(clazz,this.pos);
	}
	,throws: function() {
		return new stx_assert_predicate_term_Throws(this.pos);
	}
	,'void': function() {
		return new stx_assert_predicate_term_Void(this.pos);
	}
	,exists: function() {
		return new stx_assert_predicate_term_Exists(this.pos);
	}
	,matches: function(reg,opt) {
		return new stx_assert_predicate_term_Matches(this.pos,reg,opt,{ fileName : "stx/assert/Predicate.hx", lineNumber : 47, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "matches"});
	}
	,ands: function(self,rest) {
		return stx_assert_Predicate._.ands(self,rest);
	}
	,ors: function(self,rest) {
		return stx_assert_Predicate._.ors(self,rest);
	}
	,and: function(self,that) {
		return stx_assert_Predicate._.and(self,that);
	}
	,or: function(self,that) {
		return stx_assert_Predicate._.or(self,that);
	}
	,xor: function(self,that) {
		return stx_assert_Predicate._.xor(self,that);
	}
	,not: function(self) {
		return stx_assert_Predicate._.not(self);
	}
	,__class__: stx_assert_Module
});
var stx_assert_OrdApi = function() { };
$hxClasses["stx.assert.OrdApi"] = stx_assert_OrdApi;
stx_assert_OrdApi.__name__ = "stx.assert.OrdApi";
stx_assert_OrdApi.__isInterface__ = true;
stx_assert_OrdApi.prototype = {
	comply: null
	,__class__: stx_assert_OrdApi
};
var stx_assert_Ord = {};
stx_assert_Ord._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Ord.toAssertion = function(this1) {
	return new stx_assert_ord_term_OrdAssertion(this1,{ fileName : "stx/assert/Ord.hx", lineNumber : 24, className : "stx.assert._Ord.Ord_Impl_", methodName : "toAssertion"}).asAssertionApi();
};
stx_assert_Ord.Int = function() {
	return new stx_assert_ord_term_Int();
};
stx_assert_Ord.Int64 = function() {
	return new stx_assert_ord_term_Int64();
};
stx_assert_Ord.Float = function() {
	return new stx_assert_ord_term_Float();
};
stx_assert_Ord.String = function() {
	return new stx_assert_ord_term_String();
};
stx_assert_Ord.Couple = function(l,r) {
	return new stx_assert_ord_term_Couple(l,r);
};
stx_assert_Ord.Anon = function(fn) {
	return new stx_assert_ord_term_Anon(fn);
};
stx_assert_Ord.Bool = function() {
	return stx_assert_Ord.Anon(function(lhs,rhs) {
		if(lhs == rhs) {
			return false;
		} else if(lhs == false) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Ord.Primitive = function() {
	return new stx_assert_ord_term_Primitive();
};
stx_assert_Ord.Array = function(inner) {
	return new stx_assert_ord_term_Array(inner);
};
stx_assert_Ord.Cluster = function(inner) {
	return new stx_assert_ord_term_Cluster(inner);
};
stx_assert_Ord.Option = function(inner) {
	return new stx_assert_ord_term_Option(inner);
};
var stx_assert_Orderable = {};
stx_assert_Orderable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Orderable.Anon = function(self) {
	return new stx_assert_orderable_term_Anon(stx_assert_Ord.Anon(self));
};
var stx_assert_OrderedSum = {};
stx_assert_OrderedSum.is_ok = function(this1) {
	return this1;
};
var stx_assert_Ordered = {};
stx_assert_Ordered._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_Ordered.fromBool = function(b) {
	if(b) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Ordered.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Ordered.or = function(this1,that) {
	return stx_assert_Ordered.fromBool(stx_assert_Ordered.toBool(this1) || stx_assert_Ordered.toBool(that));
};
stx_assert_Ordered.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
stx_assert_Ordered.and = function(this1,that) {
	return stx_assert_Ordered.fromBool(stx_assert_Ordered.toBool(this1) && stx_assert_Ordered.toBool(that));
};
var stx_assert_PartialOrdered = {};
stx_assert_PartialOrdered.__properties__ = {get_self:"get_self"};
stx_assert_PartialOrdered._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_PartialOrdered.lift = function(self) {
	return stx_assert_PartialOrdered._new(self);
};
stx_assert_PartialOrdered.unorderable = function() {
	return stx_assert_PartialOrdered.lift(null);
};
stx_assert_PartialOrdered.prj = function(this1) {
	return this1;
};
stx_assert_PartialOrdered.get_self = function(this1) {
	return stx_assert_PartialOrdered.lift(this1);
};
var stx_assert_PartialOrdApi = function() { };
$hxClasses["stx.assert.PartialOrdApi"] = stx_assert_PartialOrdApi;
stx_assert_PartialOrdApi.__name__ = "stx.assert.PartialOrdApi";
stx_assert_PartialOrdApi.__isInterface__ = true;
stx_assert_PartialOrdApi.prototype = {
	comply: null
	,__class__: stx_assert_PartialOrdApi
};
var stx_assert_PartialOrderableApi = function() { };
$hxClasses["stx.assert.PartialOrderableApi"] = stx_assert_PartialOrderableApi;
stx_assert_PartialOrderableApi.__name__ = "stx.assert.PartialOrderableApi";
stx_assert_PartialOrderableApi.__isInterface__ = true;
stx_assert_PartialOrderableApi.prototype = {
	lt: null
	,__class__: stx_assert_PartialOrderableApi
};
var stx_assert_PartialComparableApi = function() { };
$hxClasses["stx.assert.PartialComparableApi"] = stx_assert_PartialComparableApi;
stx_assert_PartialComparableApi.__name__ = "stx.assert.PartialComparableApi";
stx_assert_PartialComparableApi.__isInterface__ = true;
stx_assert_PartialComparableApi.__interfaces__ = [stx_assert_PartialOrderableApi,stx_assert_EqualableApi];
var stx_assert_PredicateLift = function() { };
$hxClasses["stx.assert.PredicateLift"] = stx_assert_PredicateLift;
stx_assert_PredicateLift.__name__ = "stx.assert.PredicateLift";
stx_assert_PredicateLift.ands = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_predicate_term_And(memo,next,{ fileName : "stx/assert/Predicate.hx", lineNumber : 78, className : "stx.assert.PredicateLift", methodName : "ands"});
	},self);
};
stx_assert_PredicateLift.ors = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_predicate_term_Or(memo,next,{ fileName : "stx/assert/Predicate.hx", lineNumber : 87, className : "stx.assert.PredicateLift", methodName : "ors"});
	},self);
};
stx_assert_PredicateLift.and = function(self,that) {
	return new stx_assert_predicate_term_And(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 95, className : "stx.assert.PredicateLift", methodName : "and"});
};
stx_assert_PredicateLift.or = function(self,that) {
	return new stx_assert_predicate_term_Or(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 102, className : "stx.assert.PredicateLift", methodName : "or"});
};
stx_assert_PredicateLift.xor = function(self,that) {
	return new stx_assert_predicate_term_XOr(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 108, className : "stx.assert.PredicateLift", methodName : "xor"});
};
stx_assert_PredicateLift.not = function(self) {
	return new stx_assert_predicate_term_Not(self,{ fileName : "stx/assert/Predicate.hx", lineNumber : 114, className : "stx.assert.PredicateLift", methodName : "not"});
};
stx_assert_PredicateLift.errata = function(self,fn) {
	return new stx_assert_predicate_term_Transform(self,fn,{ fileName : "stx/assert/Predicate.hx", lineNumber : 118, className : "stx.assert.PredicateLift", methodName : "errata"});
};
stx_assert_PredicateLift.errate = function(self,fn) {
	return stx_assert_PredicateLift.errata(self,function(err) {
		return stx_nano_Rejection.errate(err,fn);
	});
};
stx_assert_PredicateLift.map_i = function(self,fn) {
	return stx_assert_Predicate.Anon(function(v) {
		return self.apply(fn(v));
	});
};
var stx_assert_Predicate = {};
stx_assert_Predicate._new = function(v) {
	var this1 = v;
	return this1;
};
stx_assert_Predicate.Natural = function(method,pos) {
	return new stx_assert_predicate_term_Natural(method,pos);
};
stx_assert_Predicate.NaturalReport = function(method,e,pos) {
	return new stx_assert_predicate_term_NaturalReport(method,e,pos);
};
stx_assert_Predicate.Anon = function(method) {
	return new stx_assert_predicate_term_Anon(method);
};
stx_assert_Predicate.unit = function() {
	return new stx_assert_predicate_term_Always({ fileName : "stx/assert/Predicate.hx", lineNumber : 25, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "unit"});
};
stx_assert_Predicate.always = function(pos) {
	return new stx_assert_predicate_term_Always({ fileName : "stx/assert/Predicate.hx", lineNumber : 29, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "always"});
};
stx_assert_Predicate.never = function(pos) {
	return new stx_assert_predicate_term_Never(pos);
};
stx_assert_Predicate.iz = function(pos,clazz) {
	return new stx_assert_predicate_term_Is(clazz,pos);
};
stx_assert_Predicate.throws = function(pos) {
	return new stx_assert_predicate_term_Throws(pos);
};
stx_assert_Predicate.void = function(pos) {
	return new stx_assert_predicate_term_Void(pos);
};
stx_assert_Predicate.exists = function(pos) {
	return new stx_assert_predicate_term_Exists(pos);
};
stx_assert_Predicate.matches = function(pos,reg,opt) {
	return new stx_assert_predicate_term_Matches(pos,reg,opt,{ fileName : "stx/assert/Predicate.hx", lineNumber : 47, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "matches"});
};
stx_assert_Predicate.ordef = function(this1,l,r) {
	if(stx_nano_ReportLift.is_defined(this1.apply(l))) {
		return r;
	} else {
		return l;
	}
};
stx_assert_Predicate.fudge = function(this1,v) {
	var self = this1.apply(v);
	if(self == null) {
		return v;
	} else {
		switch(self._hx_index) {
		case 0:
			var v1 = self.v;
			throw haxe_Exception.thrown(v1);
		case 1:
			return v;
		}
	}
};
stx_assert_Predicate.bindI = function(this1,v) {
	var _g = $bind(this1,this1.apply);
	var p = v;
	return function() {
		return _g(p);
	};
};
stx_assert_Predicate.check = function(this1) {
	return function(x) {
		return this1.apply(x) == stx_nano_Report.fromStdOption(haxe_ds_Option.None);
	};
};
stx_assert_Predicate.crunch = function(this1,v) {
	var self = this1.apply(v);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
};
var stx_assert_assertion_term_Base = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
$hxClasses["stx.assert.assertion.term.Base"] = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Base.__name__ = "stx.assert.assertion.term.Base";
stx_assert_assertion_term_Base.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Base.__super__ = stx_pico_Clazz;
stx_assert_assertion_term_Base.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,comply: function(a,b) {
		return stx_nano_Report.unit();
	}
	,error: function(l,r,pos) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),l,r)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return this2;
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Base
});
var stx_assert_assertion_term_Alike = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.Alike"] = stx_assert_assertion_term_Alike;
stx_assert_assertion_term_Alike.__name__ = "stx.assert.assertion.term.Alike";
stx_assert_assertion_term_Alike.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Alike.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		return stx_LiftAssert.expect(a._hx_index == b._hx_index,this.error(null,null,{ fileName : "stx/assert/assertion/term/Alike.hx", lineNumber : 8, className : "stx.assert.assertion.term.Alike", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_Alike
});
var stx_assert_assertion_term_Anon = function(delegate,pos) {
	this.delegate = delegate;
	this.pos = pos;
};
$hxClasses["stx.assert.assertion.term.Anon"] = stx_assert_assertion_term_Anon;
stx_assert_assertion_term_Anon.__name__ = "stx.assert.assertion.term.Anon";
stx_assert_assertion_term_Anon.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Anon.prototype = {
	pos: null
	,delegate: function(a,b) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/assert/assertion/term/Anon.hx", lineNumber : 10, className : "stx.assert.assertion.term.Anon", methodName : "delegate"});
		var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_unimplemented(stx_Nano.digests(stx_nano_Wildcard.__))));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return stx_nano_Report.pure(this2);
	}
	,comply: function(a,b) {
		return this.delegate(a,b);
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Anon
};
var stx_assert_assertion_term_Equals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.Equals"] = stx_assert_assertion_term_Equals;
stx_assert_assertion_term_Equals.__name__ = "stx.assert.assertion.term.Equals";
stx_assert_assertion_term_Equals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Equals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		return stx_LiftAssert.expect(a == b,this.error(null,null,{ fileName : "stx/assert/assertion/term/Equals.hx", lineNumber : 9, className : "stx.assert.assertion.term.Equals", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_Equals
});
var stx_assert_assertion_term_Errata = function(delegate,errata,pos) {
	this.delegate = delegate;
	this.errata = errata;
	this.pos = pos;
};
$hxClasses["stx.assert.assertion.term.Errata"] = stx_assert_assertion_term_Errata;
stx_assert_assertion_term_Errata.__name__ = "stx.assert.assertion.term.Errata";
stx_assert_assertion_term_Errata.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Errata.prototype = {
	delegate: null
	,errata: null
	,pos: null
	,comply: function(lhs,rhs) {
		return stx_nano_Report.errata(this.delegate.comply(lhs,rhs),this.errata);
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Errata
};
var stx_assert_assertion_term_GreaterThan = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.GreaterThan"] = stx_assert_assertion_term_GreaterThan;
stx_assert_assertion_term_GreaterThan.__name__ = "stx.assert.assertion.term.GreaterThan";
stx_assert_assertion_term_GreaterThan.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_GreaterThan.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l > r,this.error(null,null,{ fileName : "stx/assert/assertion/term/GreaterThan.hx", lineNumber : 11, className : "stx.assert.assertion.term.GreaterThan", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_GreaterThan
});
var stx_assert_assertion_term_GreaterThanOrEquals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.GreaterThanOrEquals"] = stx_assert_assertion_term_GreaterThanOrEquals;
stx_assert_assertion_term_GreaterThanOrEquals.__name__ = "stx.assert.assertion.term.GreaterThanOrEquals";
stx_assert_assertion_term_GreaterThanOrEquals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_GreaterThanOrEquals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l >= r,this.error(null,null,{ fileName : "stx/assert/assertion/term/GreaterThanOrEquals.hx", lineNumber : 11, className : "stx.assert.assertion.term.GreaterThanOrEquals", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_GreaterThanOrEquals
});
var stx_assert_assertion_term_LessThan = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.LessThan"] = stx_assert_assertion_term_LessThan;
stx_assert_assertion_term_LessThan.__name__ = "stx.assert.assertion.term.LessThan";
stx_assert_assertion_term_LessThan.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_LessThan.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l < r,this.error(null,null,{ fileName : "stx/assert/assertion/term/LessThan.hx", lineNumber : 10, className : "stx.assert.assertion.term.LessThan", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_LessThan
});
var stx_assert_assertion_term_LessThanOrEquals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.LessThanOrEquals"] = stx_assert_assertion_term_LessThanOrEquals;
stx_assert_assertion_term_LessThanOrEquals.__name__ = "stx.assert.assertion.term.LessThanOrEquals";
stx_assert_assertion_term_LessThanOrEquals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_LessThanOrEquals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l <= r,this.error(null,null,{ fileName : "stx/assert/assertion/term/LessThanOrEquals.hx", lineNumber : 10, className : "stx.assert.assertion.term.LessThanOrEquals", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_LessThanOrEquals
});
var stx_assert_comparable_term_Anon = function(_eq,_lt) {
	this._eq = _eq;
	this._lt = _lt;
};
$hxClasses["stx.assert.comparable.term.Anon"] = stx_assert_comparable_term_Anon;
stx_assert_comparable_term_Anon.__name__ = "stx.assert.comparable.term.Anon";
stx_assert_comparable_term_Anon.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Anon.prototype = {
	_eq: null
	,_lt: null
	,eq: function() {
		return this._eq;
	}
	,lt: function() {
		return this._lt;
	}
	,__class__: stx_assert_comparable_term_Anon
};
var stx_assert_comparable_term_Cluster = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.comparable.term.Cluster"] = stx_assert_comparable_term_Cluster;
stx_assert_comparable_term_Cluster.__name__ = "stx.assert.comparable.term.Cluster";
stx_assert_comparable_term_Cluster.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Cluster.prototype = {
	delegate: null
	,eq: function() {
		return stx_assert_Eq.Cluster(this.delegate.eq());
	}
	,lt: function() {
		return stx_assert_Ord.Cluster(this.delegate.lt());
	}
	,__class__: stx_assert_comparable_term_Cluster
};
var stx_assert_comparable_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.comparable.term.Couple"] = stx_assert_comparable_term_Couple;
stx_assert_comparable_term_Couple.__name__ = "stx.assert.comparable.term.Couple";
stx_assert_comparable_term_Couple.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Couple.prototype = {
	l: null
	,r: null
	,eq: function() {
		return stx_assert_Eq.Couple(this.l.eq(),this.r.eq());
	}
	,lt: function() {
		return stx_assert_Ord.Couple(this.l.lt(),this.r.lt());
	}
	,__class__: stx_assert_comparable_term_Couple
};
var stx_assert_comparable_term_Int = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.comparable.term.Int"] = stx_assert_comparable_term_Int;
stx_assert_comparable_term_Int.__name__ = "stx.assert.comparable.term.Int";
stx_assert_comparable_term_Int.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Int.__super__ = stx_pico_Clazz;
stx_assert_comparable_term_Int.prototype = $extend(stx_pico_Clazz.prototype,{
	eq: function() {
		return stx_assert_Eq.Int();
	}
	,lt: function() {
		return stx_assert_Ord.Int();
	}
	,__class__: stx_assert_comparable_term_Int
});
var stx_assert_comparable_term_Primitive = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.comparable.term.Primitive"] = stx_assert_comparable_term_Primitive;
stx_assert_comparable_term_Primitive.__name__ = "stx.assert.comparable.term.Primitive";
stx_assert_comparable_term_Primitive.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_Primitive.__super__ = stx_pico_Clazz;
stx_assert_comparable_term_Primitive.prototype = $extend(stx_pico_Clazz.prototype,{
	eq: function() {
		return stx_assert_Eq.Primitive();
	}
	,lt: function() {
		return stx_assert_Ord.Primitive();
	}
	,__class__: stx_assert_comparable_term_Primitive
});
var stx_assert_comparable_term_String = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.comparable.term.String"] = stx_assert_comparable_term_String;
stx_assert_comparable_term_String.__name__ = "stx.assert.comparable.term.String";
stx_assert_comparable_term_String.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_comparable_term_String.__super__ = stx_pico_Clazz;
stx_assert_comparable_term_String.prototype = $extend(stx_pico_Clazz.prototype,{
	eq: function() {
		return stx_assert_Eq.String();
	}
	,lt: function() {
		return stx_assert_Ord.String();
	}
	,__class__: stx_assert_comparable_term_String
});
var stx_assert_eq_term_Anon = function(self) {
	this.delegate = self;
};
$hxClasses["stx.assert.eq.term.Anon"] = stx_assert_eq_term_Anon;
stx_assert_eq_term_Anon.__name__ = "stx.assert.eq.term.Anon";
stx_assert_eq_term_Anon.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Anon.prototype = {
	delegate: null
	,comply: function(lhs,rhs) {
		return this.delegate(lhs,rhs);
	}
	,__class__: stx_assert_eq_term_Anon
};
var stx_assert_eq_term_Array = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.Array"] = stx_assert_eq_term_Array;
stx_assert_eq_term_Array.__name__ = "stx.assert.eq.term.Array";
stx_assert_eq_term_Array.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Array.prototype = {
	inner: null
	,comply: function(a,b) {
		var ok = true;
		if(a.length != b.length) {
			return false;
		}
		var _g = 0;
		var _g1 = a.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var lhs = a[i];
			var rhs = b[i];
			ok = this.inner.comply(lhs,rhs);
			if(!stx_assert_EqualedSum.is_ok(ok)) {
				break;
			}
		}
		return ok;
	}
	,__class__: stx_assert_eq_term_Array
};
var stx_assert_eq_term_Bool = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Bool"] = stx_assert_eq_term_Bool;
stx_assert_eq_term_Bool.__name__ = "stx.assert.eq.term.Bool";
stx_assert_eq_term_Bool.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Bool.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Bool.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Bool
});
var stx_assert_eq_term_Cluster = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.Cluster"] = stx_assert_eq_term_Cluster;
stx_assert_eq_term_Cluster.__name__ = "stx.assert.eq.term.Cluster";
stx_assert_eq_term_Cluster.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Cluster.prototype = {
	inner: null
	,comply: function(lhs,rhs) {
		if(stx_nano_Cluster.get_length(lhs) != stx_nano_Cluster.get_length(rhs)) {
			return false;
		} else {
			var same = true;
			var _g = 0;
			var _g1 = stx_nano_Cluster.get_length(lhs);
			while(_g < _g1) {
				var i = _g++;
				same = this.inner.comply(lhs[i],rhs[i]);
				if(!stx_assert_EqualedSum.is_ok(same)) {
					break;
				}
			}
			return same;
		}
	}
	,__class__: stx_assert_eq_term_Cluster
};
var stx_assert_eq_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.eq.term.Couple"] = stx_assert_eq_term_Couple;
stx_assert_eq_term_Couple.__name__ = "stx.assert.eq.term.Couple";
stx_assert_eq_term_Couple.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Couple.prototype = {
	l: null
	,r: null
	,comply: function(a,b) {
		var _gthis = this;
		return stx_nano_CoupleLift.decouple(a,function(l0,r0) {
			return stx_nano_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_Equaled.and(_gthis.l.comply(l0,l1),_gthis.r.comply(r0,r1));
			});
		});
	}
	,__class__: stx_assert_eq_term_Couple
};
var stx_assert_eq_term_Date = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Date"] = stx_assert_eq_term_Date;
stx_assert_eq_term_Date.__name__ = "stx.assert.eq.term.Date";
stx_assert_eq_term_Date.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Date.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Date.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a.getTime() == b.getTime()) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Date
});
var stx_assert_eq_term_Deferred = function() {
};
$hxClasses["stx.assert.eq.term.Deferred"] = stx_assert_eq_term_Deferred;
stx_assert_eq_term_Deferred.__name__ = "stx.assert.eq.term.Deferred";
stx_assert_eq_term_Deferred.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Deferred.prototype = {
	eq: null
	,comply: function(a,b) {
		if(this.eq == null) {
			if(a == null) {
				this.eq = stx_assert_Equal.getEqualFor(a);
			} else {
				this.eq = stx_assert_Equal.getEqualFor(b);
			}
		}
		return this.eq.comply(a,b);
	}
	,__class__: stx_assert_eq_term_Deferred
};
var stx_assert_eq_term_Enum = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Enum"] = stx_assert_eq_term_Enum;
stx_assert_eq_term_Enum.__name__ = "stx.assert.eq.term.Enum";
stx_assert_eq_term_Enum.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Enum.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Enum.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(0 != a._hx_index - b._hx_index) {
			return false;
		} else {
			var pa = Type.enumParameters(a);
			var pb = Type.enumParameters(b);
			var b = true;
			var _g = 0;
			var _g1 = pa.length;
			while(_g < _g1) {
				var i = _g++;
				if(!stx_assert_EqualedSum.is_ok(stx_assert_Equal.getEqualFor(pa[i]).comply(a[i],pb[i]))) {
					b = false;
					break;
				}
			}
			return b;
		}
	}
	,__class__: stx_assert_eq_term_Enum
});
var stx_assert_eq_term_EqAssertion = function(eq,pos) {
	stx_assert_assertion_term_Base.call(this,pos);
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.EqAssertion"] = stx_assert_eq_term_EqAssertion;
stx_assert_eq_term_EqAssertion.__name__ = "stx.assert.eq.term.EqAssertion";
stx_assert_eq_term_EqAssertion.__super__ = stx_assert_assertion_term_Base;
stx_assert_eq_term_EqAssertion.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	eq: null
	,comply: function(a,b) {
		var tmp = stx_assert_Equaled.toBool(this.eq.comply(a,b));
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos);
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),a,b)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return stx_LiftAssert.expect(tmp,this2);
	}
	,__class__: stx_assert_eq_term_EqAssertion
});
var stx_assert_eq_term_Float = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Float"] = stx_assert_eq_term_Float;
stx_assert_eq_term_Float.__name__ = "stx.assert.eq.term.Float";
stx_assert_eq_term_Float.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Float.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Float.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Float
});
var stx_assert_eq_term_Function = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Function"] = stx_assert_eq_term_Function;
stx_assert_eq_term_Function.__name__ = "stx.assert.eq.term.Function";
stx_assert_eq_term_Function.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Function.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Function.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Function
});
var stx_assert_eq_term_HasFunction = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.HasFunction"] = stx_assert_eq_term_HasFunction;
stx_assert_eq_term_HasFunction.__name__ = "stx.assert.eq.term.HasFunction";
stx_assert_eq_term_HasFunction.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_HasFunction.__super__ = stx_pico_Clazz;
stx_assert_eq_term_HasFunction.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a.equals(b)) {
			return true;
		} else {
			return false;
		}
	}
	,elide: function() {
		return this;
	}
	,__class__: stx_assert_eq_term_HasFunction
});
var stx_assert_eq_term_Int = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Int"] = stx_assert_eq_term_Int;
stx_assert_eq_term_Int.__name__ = "stx.assert.eq.term.Int";
stx_assert_eq_term_Int.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Int.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Int.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Int
});
var stx_assert_eq_term_Int64 = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Int64"] = stx_assert_eq_term_Int64;
stx_assert_eq_term_Int64.__name__ = "stx.assert.eq.term.Int64";
stx_assert_eq_term_Int64.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Int64.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Int64.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a.high == b.high && a.low == b.low) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Int64
});
var stx_assert_eq_term_Map = function(eq) {
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.Map"] = stx_assert_eq_term_Map;
stx_assert_eq_term_Map.__name__ = "stx.assert.eq.term.Map";
stx_assert_eq_term_Map.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Map.prototype = {
	eq: null
	,comply: function(a,b) {
		var ok = true;
		var _g = a.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!b.exists(key)) {
				break;
			}
			ok = stx_assert_Equaled.toBool(this.eq.comply(val,b.get(key)));
			if(!ok) {
				break;
			}
		}
		var _g = b.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!a.exists(key)) {
				break;
			}
		}
		if(ok) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Map
};
var stx_assert_eq_term_Noise = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Noise"] = stx_assert_eq_term_Noise;
stx_assert_eq_term_Noise.__name__ = "stx.assert.eq.term.Noise";
stx_assert_eq_term_Noise.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Noise.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Noise.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		return stx_assert_Equaled.AreEqual;
	}
	,__class__: stx_assert_eq_term_Noise
});
var stx_assert_eq_term_NotNull = function(eq) {
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.NotNull"] = stx_assert_eq_term_NotNull;
stx_assert_eq_term_NotNull.__name__ = "stx.assert.eq.term.NotNull";
stx_assert_eq_term_NotNull.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_NotNull.prototype = {
	eq: null
	,comply: function(a,b) {
		if(a == null) {
			if(b == null) {
				return true;
			} else {
				return false;
			}
		} else if(b == null) {
			return false;
		} else {
			return this.eq.comply(a,b);
		}
	}
	,__class__: stx_assert_eq_term_NotNull
};
var stx_assert_eq_term_Null = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Null"] = stx_assert_eq_term_Null;
stx_assert_eq_term_Null.__name__ = "stx.assert.eq.term.Null";
stx_assert_eq_term_Null.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Null.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Null.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a == null && b == null) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Null
});
var stx_assert_eq_term_Object = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Object"] = stx_assert_eq_term_Object;
stx_assert_eq_term_Object.__name__ = "stx.assert.eq.term.Object";
stx_assert_eq_term_Object.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Object.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Object.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		var o = true;
		var _g = 0;
		var _g1 = Reflect.fields(a);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var va = Reflect.field(a,key);
			if(!stx_assert_EqualedSum.is_ok(stx_assert_Equal.getEqualFor(va).comply(va,Reflect.field(b,key)))) {
				o = false;
				break;
			}
		}
		return o;
	}
	,__class__: stx_assert_eq_term_Object
});
var stx_assert_eq_term_Option = function(eq) {
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.Option"] = stx_assert_eq_term_Option;
stx_assert_eq_term_Option.__name__ = "stx.assert.eq.term.Option";
stx_assert_eq_term_Option.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Option.prototype = {
	eq: null
	,comply: function(a,b) {
		if(a._hx_index == 0) {
			if(b._hx_index == 0) {
				var r = b.v;
				var l = a.v;
				return this.eq.comply(l,r);
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
		} else {
			return stx_assert_Equaled.fromBool(false);
		}
	}
	,__class__: stx_assert_eq_term_Option
};
var stx_assert_eq_term_Primitive = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Primitive"] = stx_assert_eq_term_Primitive;
stx_assert_eq_term_Primitive.__name__ = "stx.assert.eq.term.Primitive";
stx_assert_eq_term_Primitive.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Primitive.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Primitive.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			if(rhs._hx_index == 0) {
				return true;
			} else if(lhs._hx_index == rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(rhs._hx_index == 1) {
				var rhs1 = rhs.b;
				var lhs1 = lhs.b;
				return stx_assert_Eq.Bool().comply(lhs1,rhs1);
			} else if(lhs._hx_index == rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			var _g = lhs.sprig;
			switch(_g._hx_index) {
			case 0:
				if(rhs._hx_index == 2) {
					var _g1 = rhs.sprig;
					if(_g1._hx_index == 0) {
						var rhs1 = _g1.str;
						var lhs1 = _g.str;
						return stx_assert_Eq.String().comply(lhs1,rhs1);
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
				} else if(lhs._hx_index == rhs._hx_index) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				var _g1 = _g.byte;
				switch(_g1._hx_index) {
				case 0:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 0) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Eq.Int().comply(lhs1,rhs1);
							} else if(lhs._hx_index == rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index == rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 1:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 1) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Eq.Int64().comply(lhs1,rhs1);
							} else if(lhs._hx_index == rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index == rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 2:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 2) {
								var rhs1 = _g2.f;
								var lhs1 = _g1.f;
								return stx_assert_Eq.Float().comply(lhs1,rhs1);
							} else if(lhs._hx_index == rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index == rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				}
				break;
			}
			break;
		}
	}
	,__class__: stx_assert_eq_term_Primitive
});
var stx_assert_eq_term_String = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.String"] = stx_assert_eq_term_String;
stx_assert_eq_term_String.__name__ = "stx.assert.eq.term.String";
stx_assert_eq_term_String.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_String.__super__ = stx_pico_Clazz;
stx_assert_eq_term_String.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_String
});
var stx_assert_eq_term_Unknown = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.Unknown"] = stx_assert_eq_term_Unknown;
stx_assert_eq_term_Unknown.__name__ = "stx.assert.eq.term.Unknown";
stx_assert_eq_term_Unknown.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_Unknown.__super__ = stx_pico_Clazz;
stx_assert_eq_term_Unknown.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(Object.prototype.hasOwnProperty.call(a,"equals")) {
			return new stx_assert_eq_term_HasFunction().comply(a,b);
		} else {
			return new stx_assert_eq_term_Object().comply(a,b);
		}
	}
	,__class__: stx_assert_eq_term_Unknown
});
var stx_assert_eq_term_UnsupportedClass = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.eq.term.UnsupportedClass"] = stx_assert_eq_term_UnsupportedClass;
stx_assert_eq_term_UnsupportedClass.__name__ = "stx.assert.eq.term.UnsupportedClass";
stx_assert_eq_term_UnsupportedClass.__interfaces__ = [stx_assert_EqApi];
stx_assert_eq_term_UnsupportedClass.__super__ = stx_pico_Clazz;
stx_assert_eq_term_UnsupportedClass.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		return stx_assert_Equaled.and(new stx_assert_eq_term_Object().comply(a,b),js_Boot.getClass(a) == js_Boot.getClass(b) && true);
	}
	,__class__: stx_assert_eq_term_UnsupportedClass
});
var stx_assert_module_Crunch = function(pos) {
	stx_pico_Clazz.call(this);
	this.module = new stx_assert_Module(pos);
};
$hxClasses["stx.assert.module.Crunch"] = stx_assert_module_Crunch;
stx_assert_module_Crunch.__name__ = "stx.assert.module.Crunch";
stx_assert_module_Crunch.__super__ = stx_pico_Clazz;
stx_assert_module_Crunch.prototype = $extend(stx_pico_Clazz.prototype,{
	module: null
	,equals: function(lhs,rhs) {
		var this1 = this.module.equals().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,alike: function(lhs,rhs) {
		var this1 = this.module.alike().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,gt: function(lhs,rhs) {
		var this1 = this.module.gt().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,gt_eq: function(lhs,rhs) {
		var this1 = this.module.gt_eq().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,lt: function(lhs,rhs) {
		var this1 = this.module.lt().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,lt_eq: function(lhs,rhs) {
		var this1 = this.module.lt_eq().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,always: function(t) {
		var self = this.module.always().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,never: function(t) {
		var self = this.module.never().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,iz: function(a,clazz) {
		var self = this.module.iz(clazz).apply(a);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,throws: function(fn) {
		var self = this.module.throws().apply(fn);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,'void': function(t) {
		var self = this.module.void().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,exists: function(t) {
		var self = this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,matches: function(string,reg,opt) {
		var self = this.module.matches(reg,opt).apply(string);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,__class__: stx_assert_module_Crunch
});
var stx_assert_ord_term_Anon = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.ord.term.Anon"] = stx_assert_ord_term_Anon;
stx_assert_ord_term_Anon.__name__ = "stx.assert.ord.term.Anon";
stx_assert_ord_term_Anon.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Anon.prototype = {
	delegate: null
	,comply: function(lhs,rhs) {
		return this.delegate(lhs,rhs);
	}
	,__class__: stx_assert_ord_term_Anon
};
var stx_assert_ord_term_Array = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.Array"] = stx_assert_ord_term_Array;
stx_assert_ord_term_Array.__name__ = "stx.assert.ord.term.Array";
stx_assert_ord_term_Array.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Array.prototype = {
	inner: null
	,comply: function(v1,v2) {
		var n = v1.length - v2.length;
		if(n != 0) {
			if(n > 0) {
				return false;
			} else {
				return true;
			}
		} else if(v1.length == 0) {
			return false;
		} else {
			var v = false;
			var _g = 0;
			var _g1 = v1.length;
			while(_g < _g1) {
				var i = _g++;
				v = this.inner.comply(v1[i],v2[i]);
				if(v == true) {
					break;
				}
			}
			return v;
		}
	}
	,__class__: stx_assert_ord_term_Array
};
var stx_assert_ord_term_Cluster = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.Cluster"] = stx_assert_ord_term_Cluster;
stx_assert_ord_term_Cluster.__name__ = "stx.assert.ord.term.Cluster";
stx_assert_ord_term_Cluster.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Cluster.prototype = {
	inner: null
	,comply: function(v1,v2) {
		var n = stx_nano_Cluster.get_length(v1) - stx_nano_Cluster.get_length(v2);
		if(n != 0) {
			if(n > 0) {
				return false;
			} else {
				return true;
			}
		} else if(stx_nano_Cluster.get_length(v1) == 0) {
			return false;
		} else {
			var v = false;
			var _g = 0;
			var _g1 = stx_nano_Cluster.get_length(v1);
			while(_g < _g1) {
				var i = _g++;
				v = this.inner.comply(v1[i],v2[i]);
				if(v == true) {
					break;
				}
			}
			return v;
		}
	}
	,__class__: stx_assert_ord_term_Cluster
};
var stx_assert_ord_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.ord.term.Couple"] = stx_assert_ord_term_Couple;
stx_assert_ord_term_Couple.__name__ = "stx.assert.ord.term.Couple";
stx_assert_ord_term_Couple.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Couple.prototype = {
	l: null
	,r: null
	,comply: function(a,b) {
		var _gthis = this;
		return stx_nano_CoupleLift.decouple(a,function(l0,r0) {
			return stx_nano_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_Ordered.or(_gthis.l.comply(l0,l1),_gthis.r.comply(r0,r1));
			});
		});
	}
	,__class__: stx_assert_ord_term_Couple
};
var stx_assert_ord_term_Float = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.ord.term.Float"] = stx_assert_ord_term_Float;
stx_assert_ord_term_Float.__name__ = "stx.assert.ord.term.Float";
stx_assert_ord_term_Float.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Float.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Float.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Float
});
var stx_assert_ord_term_Int = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.ord.term.Int"] = stx_assert_ord_term_Int;
stx_assert_ord_term_Int.__name__ = "stx.assert.ord.term.Int";
stx_assert_ord_term_Int.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Int.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Int.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Int
});
var stx_assert_ord_term_Int64 = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.ord.term.Int64"] = stx_assert_ord_term_Int64;
stx_assert_ord_term_Int64.__name__ = "stx.assert.ord.term.Int64";
stx_assert_ord_term_Int64.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Int64.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Int64.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		var v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		if((a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Int64
});
var stx_assert_ord_term_Option = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.Option"] = stx_assert_ord_term_Option;
stx_assert_ord_term_Option.__name__ = "stx.assert.ord.term.Option";
stx_assert_ord_term_Option.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Option.prototype = {
	inner: null
	,comply: function(lhs,rhs) {
		var _gthis = this;
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftOptionNano.zip(lhs,rhs),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
			return _gthis.inner.comply(l,r);
		}));
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Option
};
var stx_assert_ord_term_OrdAssertion = function(ord,pos) {
	stx_assert_assertion_term_Base.call(this,pos);
	this.ord = ord;
};
$hxClasses["stx.assert.ord.term.OrdAssertion"] = stx_assert_ord_term_OrdAssertion;
stx_assert_ord_term_OrdAssertion.__name__ = "stx.assert.ord.term.OrdAssertion";
stx_assert_ord_term_OrdAssertion.__super__ = stx_assert_assertion_term_Base;
stx_assert_ord_term_OrdAssertion.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	ord: null
	,comply: function(a,b) {
		var tmp = stx_assert_Ordered.toBool(this.ord.comply(a,b));
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos);
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),a,b)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return stx_LiftAssert.expect(tmp,this2);
	}
	,__class__: stx_assert_ord_term_OrdAssertion
});
var stx_assert_ord_term_Primitive = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.ord.term.Primitive"] = stx_assert_ord_term_Primitive;
stx_assert_ord_term_Primitive.__name__ = "stx.assert.ord.term.Primitive";
stx_assert_ord_term_Primitive.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_Primitive.__super__ = stx_pico_Clazz;
stx_assert_ord_term_Primitive.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			if(rhs._hx_index == 0) {
				return false;
			} else if(lhs._hx_index < rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(rhs._hx_index == 1) {
				var rhs1 = rhs.b;
				var lhs1 = lhs.b;
				return stx_assert_Ord.Bool().comply(lhs1,rhs1);
			} else if(lhs._hx_index < rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			var _g = lhs.sprig;
			switch(_g._hx_index) {
			case 0:
				if(rhs._hx_index == 2) {
					var _g1 = rhs.sprig;
					if(_g1._hx_index == 0) {
						var rhs1 = _g1.str;
						var lhs1 = _g.str;
						return stx_assert_Ord.String().comply(lhs1,rhs1);
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
				} else if(lhs._hx_index < rhs._hx_index) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				var _g1 = _g.byte;
				switch(_g1._hx_index) {
				case 0:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 0) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Ord.Int().comply(lhs1,rhs1);
							} else if(lhs._hx_index < rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index < rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 1:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 1) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Ord.Int64().comply(lhs1,rhs1);
							} else if(lhs._hx_index < rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index < rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 2:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 2) {
								var rhs1 = _g2.f;
								var lhs1 = _g1.f;
								return stx_assert_Ord.Float().comply(lhs1,rhs1);
							} else if(lhs._hx_index < rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index < rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				}
				break;
			}
			break;
		}
	}
	,__class__: stx_assert_ord_term_Primitive
});
var stx_assert_ord_term_String = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.ord.term.String"] = stx_assert_ord_term_String;
stx_assert_ord_term_String.__name__ = "stx.assert.ord.term.String";
stx_assert_ord_term_String.__interfaces__ = [stx_assert_OrdApi];
stx_assert_ord_term_String.__super__ = stx_pico_Clazz;
stx_assert_ord_term_String.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_String
});
var stx_assert_orderable_term_Anon = function(delegate) {
};
$hxClasses["stx.assert.orderable.term.Anon"] = stx_assert_orderable_term_Anon;
stx_assert_orderable_term_Anon.__name__ = "stx.assert.orderable.term.Anon";
stx_assert_orderable_term_Anon.__interfaces__ = [stx_assert_OrderableApi];
stx_assert_orderable_term_Anon.prototype = {
	delegate: null
	,lt: function() {
		return this.delegate;
	}
	,__class__: stx_assert_orderable_term_Anon
};
var stx_assert_predicate_term_Open = function(pos) {
	this.pos = pos;
};
$hxClasses["stx.assert.predicate.term.Open"] = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Open.__name__ = "stx.assert.predicate.term.Open";
stx_assert_predicate_term_Open.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Open.prototype = {
	pos: null
	,get_pos: function() {
		return this.pos;
	}
	,apply: function(v) {
		return stx_nano_Report.unit();
	}
	,error: function() {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.get_pos());
		var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return this2;
	}
	,__class__: stx_assert_predicate_term_Open
	,__properties__: {get_pos:"get_pos"}
};
var stx_assert_predicate_term_Always = function(pos) {
	stx_assert_predicate_term_Open.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Always"] = stx_assert_predicate_term_Always;
stx_assert_predicate_term_Always.__name__ = "stx.assert.predicate.term.Always";
stx_assert_predicate_term_Always.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Always.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	apply: function(v) {
		return stx_nano_Report.unit();
	}
	,__class__: stx_assert_predicate_term_Always
});
var stx_assert_predicate_term_And = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.predicate.term.And"] = stx_assert_predicate_term_And;
stx_assert_predicate_term_And.__name__ = "stx.assert.predicate.term.And";
stx_assert_predicate_term_And.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_And.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,apply: function(v) {
		var lr = this.l.apply(v);
		var rr = stx_nano_Report.unit();
		if(!stx_nano_ReportLift.is_defined(lr)) {
			rr = this.r.apply(v);
		}
		return stx_nano_ReportLift.concat(lr,rr);
	}
	,__class__: stx_assert_predicate_term_And
});
var stx_assert_predicate_term_Anon = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.predicate.term.Anon"] = stx_assert_predicate_term_Anon;
stx_assert_predicate_term_Anon.__name__ = "stx.assert.predicate.term.Anon";
stx_assert_predicate_term_Anon.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Anon.prototype = {
	delegate: null
	,apply: function(p) {
		return this.delegate(p);
	}
	,__class__: stx_assert_predicate_term_Anon
};
var stx_assert_predicate_term_AssertionPredicate = function(delegate,data) {
	this.delegate = delegate;
	this.data = data;
};
$hxClasses["stx.assert.predicate.term.AssertionPredicate"] = stx_assert_predicate_term_AssertionPredicate;
stx_assert_predicate_term_AssertionPredicate.__name__ = "stx.assert.predicate.term.AssertionPredicate";
stx_assert_predicate_term_AssertionPredicate.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_AssertionPredicate.prototype = {
	delegate: null
	,data: null
	,apply: function(v) {
		return stx_nano_Report.errata(this.delegate.comply(this.data,v),function(x) {
			return x;
		});
	}
	,__class__: stx_assert_predicate_term_AssertionPredicate
};
var stx_assert_predicate_term_Base = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
$hxClasses["stx.assert.predicate.term.Base"] = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Base.__name__ = "stx.assert.predicate.term.Base";
stx_assert_predicate_term_Base.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Base.__super__ = stx_pico_Clazz;
stx_assert_predicate_term_Base.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,apply: function(v) {
		return stx_nano_Report.fromStdOption(haxe_ds_Option.None);
	}
	,error: function(l,r) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos);
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),l,r)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return this2;
	}
	,__class__: stx_assert_predicate_term_Base
});
var stx_assert_predicate_term_Exists = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Exists"] = stx_assert_predicate_term_Exists;
stx_assert_predicate_term_Exists.__name__ = "stx.assert.predicate.term.Exists";
stx_assert_predicate_term_Exists.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Exists.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	apply: function(v) {
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,v),function(_) {
			return true;
		});
		var bool;
		if(self._hx_index == 0) {
			var v = self.v;
			bool = v;
		} else {
			bool = false;
		}
		return stx_LiftAssert.expect(bool,this.error());
	}
	,__class__: stx_assert_predicate_term_Exists
});
var stx_assert_predicate_term_Is = function(type,pos) {
	stx_assert_predicate_term_Base.call(this,pos);
	this.type = type;
};
$hxClasses["stx.assert.predicate.term.Is"] = stx_assert_predicate_term_Is;
stx_assert_predicate_term_Is.__name__ = "stx.assert.predicate.term.Is";
stx_assert_predicate_term_Is.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Is.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	type: null
	,apply: function(v) {
		var bool = js_Boot.__instanceof(v,this.type);
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/assert/predicate/term/Is.hx", lineNumber : 12, className : "stx.assert.predicate.term.Is", methodName : "apply"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),v)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		var err = this2;
		return stx_LiftAssert.expect(bool,err);
	}
	,__class__: stx_assert_predicate_term_Is
});
var stx_assert_predicate_term_Matches = function(fault,match,opt,pos) {
	if(opt == null) {
		opt = "g";
	}
	stx_assert_predicate_term_Base.call(this,pos);
	this.fault = fault;
	this.match = match;
	this.opt = opt;
};
$hxClasses["stx.assert.predicate.term.Matches"] = stx_assert_predicate_term_Matches;
stx_assert_predicate_term_Matches.__name__ = "stx.assert.predicate.term.Matches";
stx_assert_predicate_term_Matches.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Matches.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	fault: null
	,match: null
	,opt: null
	,apply: function(v) {
		var err = this.error("~/" + this.match + "/" + this.opt,v);
		var ereg = new EReg(this.match,this.opt);
		ereg.match(v);
		var bool = ereg.matched(0) == null;
		return stx_LiftAssert.expect(bool,err);
	}
	,__class__: stx_assert_predicate_term_Matches
});
var stx_assert_predicate_term_Natural = function(method,pos) {
	this.method = method;
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Natural"] = stx_assert_predicate_term_Natural;
stx_assert_predicate_term_Natural.__name__ = "stx.assert.predicate.term.Natural";
stx_assert_predicate_term_Natural.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Natural.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	method: null
	,apply: function(v) {
		if(this.method(v)) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(this.error());
		}
	}
	,__class__: stx_assert_predicate_term_Natural
});
var stx_assert_predicate_term_NaturalReport = function(delegate,report,pos) {
	this.delegate = delegate;
	this.report = report;
	this.pos = pos;
};
$hxClasses["stx.assert.predicate.term.NaturalReport"] = stx_assert_predicate_term_NaturalReport;
stx_assert_predicate_term_NaturalReport.__name__ = "stx.assert.predicate.term.NaturalReport";
stx_assert_predicate_term_NaturalReport.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_NaturalReport.prototype = {
	pos: null
	,report: null
	,delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_LiftIf.if_else(this.delegate(p),stx_nano_Report.unit,function() {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,_gthis.pos);
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(_gthis.report));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			return stx_nano_lift_LiftError.report(this2);
		});
	}
	,__class__: stx_assert_predicate_term_NaturalReport
};
var stx_assert_predicate_term_Never = function(pos) {
	stx_assert_predicate_term_Open.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Never"] = stx_assert_predicate_term_Never;
stx_assert_predicate_term_Never.__name__ = "stx.assert.predicate.term.Never";
stx_assert_predicate_term_Never.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Never.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	apply: function(v) {
		return stx_nano_Report.pure(this.error());
	}
	,__class__: stx_assert_predicate_term_Never
});
var stx_assert_predicate_term_Not = function(predicate,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.predicate = predicate;
};
$hxClasses["stx.assert.predicate.term.Not"] = stx_assert_predicate_term_Not;
stx_assert_predicate_term_Not.__name__ = "stx.assert.predicate.term.Not";
stx_assert_predicate_term_Not.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Not.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	predicate: null
	,apply: function(v) {
		var self = this.predicate.apply(v);
		var bool;
		if(self == null) {
			bool = false;
		} else {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				bool = true;
				break;
			case 1:
				bool = false;
				break;
			}
		}
		return stx_LiftAssert.expect(bool,this.error());
	}
	,__class__: stx_assert_predicate_term_Not
});
var stx_assert_predicate_term_Or = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.predicate.term.Or"] = stx_assert_predicate_term_Or;
stx_assert_predicate_term_Or.__name__ = "stx.assert.predicate.term.Or";
stx_assert_predicate_term_Or.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Or.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,apply: function(v) {
		var resI = this.l.apply(v);
		var resII = this.r.apply(v);
		if(stx_nano_ReportLift.is_defined(resI) && stx_nano_ReportLift.is_defined(resII)) {
			return stx_nano_ReportLift.concat(resI,resII);
		} else {
			return stx_nano_Report.unit();
		}
	}
	,__class__: stx_assert_predicate_term_Or
});
var stx_assert_predicate_term_Throws = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Throws"] = stx_assert_predicate_term_Throws;
stx_assert_predicate_term_Throws.__name__ = "stx.assert.predicate.term.Throws";
stx_assert_predicate_term_Throws.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Throws.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	apply: function(block) {
		try {
			block();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return stx_nano_Report.unit();
		}
		return stx_nano_Report.pure(this.error());
	}
	,__class__: stx_assert_predicate_term_Throws
});
var stx_assert_predicate_term_Transform = function(delegate,transform,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.transform = transform;
	this.delegate = delegate;
};
$hxClasses["stx.assert.predicate.term.Transform"] = stx_assert_predicate_term_Transform;
stx_assert_predicate_term_Transform.__name__ = "stx.assert.predicate.term.Transform";
stx_assert_predicate_term_Transform.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Transform.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	transform: null
	,delegate: null
	,apply: function(v) {
		return stx_nano_Report.errata(this.delegate.apply(v),this.transform);
	}
	,__class__: stx_assert_predicate_term_Transform
});
var stx_assert_predicate_term_Void = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Void"] = stx_assert_predicate_term_Void;
stx_assert_predicate_term_Void.__name__ = "stx.assert.predicate.term.Void";
stx_assert_predicate_term_Void.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Void.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	apply: function(v) {
		return stx_LiftAssert.expect(v == null,this.error());
	}
	,__class__: stx_assert_predicate_term_Void
});
var stx_assert_predicate_term_XOr = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.predicate.term.XOr"] = stx_assert_predicate_term_XOr;
stx_assert_predicate_term_XOr.__name__ = "stx.assert.predicate.term.XOr";
stx_assert_predicate_term_XOr.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_XOr.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,apply: function(v) {
		var lr = this.l.apply(v);
		var rr = this.r.apply(v);
		return stx_LiftAssert.expect(!stx_nano_ReportLift.is_defined(lr) && !stx_nano_ReportLift.is_defined(rr),this.error());
	}
	,__class__: stx_assert_predicate_term_XOr
});
var stx_bake_Baked = {};
stx_bake_Baked._new = function() {
	var this1 = new haxe_io_Path("/mnt/dat/prj/haxe/stx/stx_schema/");
	var this2 = stx_nano_Cluster.lift(["/mnt/dat/prj/haxe/stx/stx_schema//src/gen/haxe/","/mnt/dat/lib/haxe/hxnodejs/git/src/","/mnt/dat/prj/haxe/stx/stx_bake/src/main/haxe/","/mnt/dat/prj/haxe/fletcher/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_coroutine/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_stream/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_show/src/main/haxe/","/mnt/dat/lib/haxe/equals/1,0,2/src/","/mnt/dat/prj/haxe/stx/stx_test/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_ds/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_makro/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_pkg/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_fp/src/main/haxe/","/mnt/dat/lib/haxe/polygonal-printf/git/src/","/mnt/dat/lib/haxe/hre/0,2,1/src/","/mnt/dat/lib/haxe/haxe-strings/6,0,4/src/","/mnt/dat/lib/haxe/haxe-concurrent/git/src/","/mnt/dat/lib/haxe/haxe-files/2,0,0/src/","/mnt/dat/prj/haxe/console.hx/","/mnt/dat/prj/haxe/stx/stx_log/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_fn/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_assert/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_om/src/main/haxe/","/mnt/dat/lib/haxe/hx3compat/git/std/","/mnt/dat/prj/haxe/stx/stx_nano/src/main/haxe/","/mnt/dat/prj/haxe/stx/stx_pico/src/main/haxe/","/mnt/dat/lib/haxe/tink_core/git/src/","/mnt/dat/lib/haxe/tink_macro/git/src/","/mnt/dat/lib/haxe/tink_typecrawler/git/src/","/mnt/dat/lib/haxe/hscript/git/","src/main/haxe/","","/usr/local/lib/haxe/extraLibs/","/usr/local/share/haxe/extraLibs/","/usr/local/bin/extraLibs/","/usr/local/lib/haxe/std/js/_std/","/usr/local/share/haxe/std/js/_std/","/usr/local/bin/std/js/_std/","/usr/local/lib/haxe/std/","/usr/local/share/haxe/std/","/usr/local/bin/std/"]);
	var this3 = stx_nano_Cluster.lift(["-main","stx.schema.Test","-cp","src/main/haxe","-lib","hscript","-lib","tink_typecrawler","-lib","stx_pico","-lib","stx_nano","-lib","stx_om","-lib","stx_bake","-lib","stx_show","-lib","fletcher","-lib","stx_makro","-lib","stx_coroutine","-lib","hxnodejs","-D","no-deprecation-warnings","--macro","allowPackage('sys')","--js",".stx/build/test/js/main.js"]);
	var _this = [{ val : "1", key : "utf16"},{ val : "1", key : "true"},{ val : "0.7.0", key : "tink_typecrawler"},{ val : "1.0.0", key : "tink_macro"},{ val : "2.0.2", key : "tink_core"},{ val : "0.7.0", key : "tink-typecrawler"},{ val : "1.0.0", key : "tink-macro"},{ val : "2.0.2", key : "tink-core"},{ val : "1", key : "target.utf16"},{ val : "1", key : "target.unicode"},{ val : "js", key : "target.name"},{ val : "0.1.0", key : "stx_test"},{ val : "0.1.1", key : "stx_stream"},{ val : "0.1.0", key : "stx_show"},{ val : "0.1.0", key : "stx_pkg"},{ val : "1.0.0", key : "stx_pico"},{ val : "0.1.0", key : "stx_om"},{ val : "0.1.6", key : "stx_nano"},{ val : "0.0.1", key : "stx_makro"},{ val : "0.1.5", key : "stx_log"},{ val : "0.3.0", key : "stx_fp"},{ val : "1.1.0", key : "stx_fn"},{ val : "0.2.1", key : "stx_ds"},{ val : "0.3.0", key : "stx_coroutine"},{ val : "0.1.0", key : "stx_bake"},{ val : "0.2.0", key : "stx_assert"},{ val : "0.1.0", key : "stx-test"},{ val : "0.1.1", key : "stx-stream"},{ val : "0.1.0", key : "stx-show"},{ val : "0.1.0", key : "stx-pkg"},{ val : "1.0.0", key : "stx-pico"},{ val : "0.1.0", key : "stx-om"},{ val : "0.1.6", key : "stx-nano"},{ val : "0.0.1", key : "stx-makro"},{ val : "0.1.5", key : "stx-log"},{ val : "0.3.0", key : "stx-fp"},{ val : "1.1.0", key : "stx-fn"},{ val : "0.2.1", key : "stx-ds"},{ val : "0.3.0", key : "stx-coroutine"},{ val : "0.1.0", key : "stx-bake"},{ val : "0.2.0", key : "stx-assert"},{ val : "Generated by Haxe 4.3.0-rc.1", key : "source_header"},{ val : "Generated by Haxe 4.3.0-rc.1", key : "source-header"},{ val : "1.0.2-beta", key : "polygonal_printf"},{ val : "1.0.2-beta", key : "polygonal-printf"},{ val : "1", key : "no_deprecation_warnings"},{ val : "1", key : "no-deprecation-warnings"},{ val : "1", key : "js_es5"},{ val : "5", key : "js_es"},{ val : "1", key : "js-es5"},{ val : "5", key : "js-es"},{ val : "1", key : "js"},{ val : "12.1.0", key : "hxnodejs"},{ val : "1.0.3", key : "hx3compat"},{ val : "2.4.0", key : "hscript"},{ val : "0.2.1", key : "hre"},{ val : "4.300", key : "haxe_ver"},{ val : "6.0.4", key : "haxe_strings"},{ val : "2.0.0", key : "haxe_files"},{ val : "3.0.0", key : "haxe_concurrent"},{ val : "1", key : "haxe4"},{ val : "1", key : "haxe3"},{ val : "4.300", key : "haxe-ver"},{ val : "6.0.4", key : "haxe-strings"},{ val : "2.0.0", key : "haxe-files"},{ val : "3.0.0", key : "haxe-concurrent"},{ val : "4.3.0-rc.1", key : "haxe"},{ val : "0.2.0", key : "fletcher"},{ val : "1.0.2", key : "equals"},{ val : "std", key : "dce"},{ val : "0.2.15", key : "console.hx"}];
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var kv = _this[i];
		result[i] = stx_nano_Field.lift({ key : kv.key, val : kv.val});
	}
	var this4 = new stx_bake_Baking(this1,this2,this3,stx_nano_Cluster.lift(result),"/mnt/dat/home");
	return this4;
};
var stx_bake_Baking = function(root,classpaths,args,defines,home) {
	this.root = root;
	this.classpaths = classpaths;
	this.args = args;
	var pos = { fileName : "stx/bake/Baking.hx", lineNumber : 41, className : "stx.bake.Baking", methodName : "new"};
	var str = "stx.bake.session.id";
	if(!stx_nano_Resource.exists(str)) {
		if(pos == null) {
			throw haxe_Exception.thrown("E_ResourceNotFound(" + str + ")");
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_resource_not_found(stx_Nano.digests(stx_nano_Wildcard.__),str)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			var error = this2;
			var this1 = stx_Log.ZERO;
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(3);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("resource \"" + str + "\" not found.")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/nano/Resource.hx", lineNumber : 23, className : "stx.nano._Resource.Resource_Impl_", methodName : "_new"}));
			throw haxe_Exception.thrown(error);
		}
	}
	var this2 = str;
	this.id = stx_nano_Resource.string(this2);
	this.defines = defines;
	this.home = home;
};
$hxClasses["stx.bake.Baking"] = stx_bake_Baking;
stx_bake_Baking.__name__ = "stx.bake.Baking";
stx_bake_Baking.instance = null;
stx_bake_Baking.prototype = {
	is_runtime: null
	,get_is_runtime: function() {
		return stx_bake_Baking.instance == null;
	}
	,root: null
	,classpaths: null
	,args: null
	,id: null
	,defines: null
	,home: null
	,publish: function(tdef) {
	}
	,target: null
	,get_target: function() {
		return stx_bake_makro_GetTarget.apply(this);
	}
	,toString: function() {
		var rt = this.get_is_runtime() ? "runtime" : "macrotime";
		var tmp = "Bake(" + this.id + " root:" + Std.string(this.root) + " ";
		var tmp1 = this.get_target();
		return tmp + (tmp1 == null ? "null" : stx_pico_Option.toString(tmp1)) + " [" + rt + "] home:" + this.home + ")";
	}
	,__class__: stx_bake_Baking
	,__properties__: {get_target:"get_target",get_is_runtime:"get_is_runtime"}
};
var stx_bake_BakingLift = function() { };
$hxClasses["stx.bake.BakingLift"] = stx_bake_BakingLift;
stx_bake_BakingLift.__name__ = "stx.bake.BakingLift";
stx_bake_BakingLift.get_build_location = function(self) {
	var this1 = stx_bake_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(new stx_log_EntryCtr().pure(self.get_target()),stx_log_LogPosition.fromPos({ fileName : "stx/bake/Baking.hx", lineNumber : 64, className : "stx.bake.BakingLift", methodName : "get_build_location"}));
	return stx_pico_OptionLift.flat_map(stx_pico_OptionLift.flat_map(self.get_target(),function(target) {
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = target;
		var tmp = function(tII) {
			return _g(tI,tII);
		};
		return stx_pico_OptionLift.map(stx_nano_CompilerTargetLift.toBuildDirective(target),tmp);
	}),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(target,id) {
		var this1 = stx_bake_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(1);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(new stx_log_EntryCtr().pure(id),stx_log_LogPosition.fromPos({ fileName : "stx/bake/Baking.hx", lineNumber : 69, className : "stx.bake.BakingLift", methodName : "get_build_location"}));
		var arr = ["--" + id,"-" + id];
		var idx = stx_lift_ArrayLift.lfold(arr,function(n,m) {
			var idx;
			switch(m._hx_index) {
			case 0:
				var t = m.v;
				idx = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
				break;
			case 1:
				var t = function(x) {
					return n == x;
				};
				var i = function(self) {
					var index = 0;
					var ok = false;
					var _g = 0;
					while(_g < self.length) {
						var e = self[_g];
						++_g;
						if(t(e)) {
							ok = true;
							break;
						}
						++index;
					}
					if(ok) {
						return index;
					} else {
						return -1;
					}
				};
				var value = stx_nano_Cluster.toIterable(self.args);
				var i1 = i(((value) instanceof Array) ? value : null);
				idx = i1 == -1 ? haxe_ds_Option.None : haxe_ds_Option.Some(i1);
				break;
			}
			return idx;
		},haxe_ds_Option.None);
		return stx_pico_OptionLift.map(stx_pico_OptionLift.flat_map(idx,function(i) {
			if(target._hx_index == 11) {
				return haxe_ds_Option.None;
			} else {
				return haxe_ds_Option.Some(self.args[i + 1]);
			}
		}),function(tail) {
			return haxe_io_Path.addTrailingSlash(self.root.toString()) + tail;
		});
	}));
};
stx_bake_BakingLift.get_build_directory = function(self) {
	return stx_pico_OptionLift.flat_map(stx_bake_BakingLift.get_build_location(self),function(string) {
		return stx_pico_OptionLift.map(self.get_target(),function(target) {
			return stx_nano_lift_LiftNano.if_else(stx_nano_CompilerTargetLift.uses_file(target),function() {
				return haxe_io_Path.directory(string);
			},function() {
				return string;
			});
		});
	});
};
stx_bake_BakingLift.get_main = function(baking) {
	var result = stx_nano_ClusterLift.lfold(baking.args,function(n,m) {
		var _g = m.data;
		if(m.done) {
			return m;
		} else {
			return stx_nano_lift_LiftNano.if_else(stx_lift_ArrayLift.any(["-main","--main"],function(str) {
				return str == m.data;
			}),function() {
				return { done : true, data : n};
			},function() {
				return { done : false, data : n};
			});
		}
	},{ done : false, data : null});
	if(result.done == true) {
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,result.data);
	} else {
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,null);
	}
};
var stx_bake_Logging = function() { };
$hxClasses["stx.bake.Logging"] = stx_bake_Logging;
stx_bake_Logging.__name__ = "stx.bake.Logging";
stx_bake_Logging.log = function(wildcard) {
	var pkg = stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/bake/Logging.hx", lineNumber : 9, className : "stx.bake.Logging", methodName : "log"});
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(pkg),function(scope) {
		var this1 = stx_Log.unit();
		var tag = scope.pack.join("/");
		var this2 = this1;
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		};
		return function(value,pos) {
			this2(value,fn(pos));
		};
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_Log.unit();
	}
};
var stx_bake_makro_GetTarget = function() { };
$hxClasses["stx.bake.makro.GetTarget"] = stx_bake_makro_GetTarget;
stx_bake_makro_GetTarget.__name__ = "stx.bake.makro.GetTarget";
stx_bake_makro_GetTarget.apply = function(build) {
	var enm = stx_nano_Enum._new(stx_nano_CompilerTargetSum);
	var _this = stx_nano_Enum.constructs(enm);
	var f = haxe_ds_Either.Right;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	var _this = result;
	var _e = enm;
	var _g = function(cons,args) {
		return stx_nano_Enum.construct(_e,cons,args);
	};
	var args = [];
	var f = function(cons) {
		return _g(cons,args);
	};
	var result = new Array(_this.length);
	var _g1 = 0;
	var _g2 = _this.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = f(_this[i]);
	}
	var types = result;
	var result = new Array(types.length);
	var _g1 = 0;
	var _g2 = types.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = stx_pico_OptionLift.map(types[i],stx_fn_UnaryLift.broach(stx_nano_CompilerTarget._.toBuildDirective));
	}
	var exprs = result;
	var target = haxe_ds_Option.None;
	var _g1 = 0;
	while(_g1 < exprs.length) {
		var expr = exprs[_g1];
		++_g1;
		var opt = $iterator(stx_pico_OptionLift)(expr);
		while(opt.hasNext()) {
			var opt1 = opt.next();
			var str = $iterator(stx_pico_OptionLift)(stx_nano_CoupleLift.snd(opt1));
			while(str.hasNext()) {
				var str1 = [str.next()];
				var self = build.args;
				var idx = (function(t) {
					return function(self) {
						var index = 0;
						var ok = false;
						var _g = 0;
						while(_g < self.length) {
							var e = self[_g];
							++_g;
							if(t[0](e)) {
								ok = true;
								break;
							}
							++index;
						}
						if(ok) {
							return index;
						} else {
							return -1;
						}
					};
				})([(function(str) {
					return function(x) {
						if(x != "-" + str[0]) {
							return x == "--" + str[0];
						} else {
							return true;
						}
					};
				})(str1)]);
				var value = stx_nano_Cluster.toIterable(self);
				var idx1 = idx(((value) instanceof Array) ? value : null);
				if(idx1 != -1) {
					target = haxe_ds_Option.Some(stx_nano_CoupleLift.fst(opt1));
					break;
				}
			}
		}
	}
	return target;
};
var stx_coroutine_Failure = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.coroutine.Failure"] = stx_coroutine_Failure;
stx_coroutine_Failure.__name__ = "stx.coroutine.Failure";
stx_coroutine_Failure.__super__ = stx_pico_Clazz;
stx_coroutine_Failure.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_coroutine_Failure
});
var stx_coroutine_Logging = function() { };
$hxClasses["stx.coroutine.Logging"] = stx_coroutine_Logging;
stx_coroutine_Logging.__name__ = "stx.coroutine.Logging";
stx_coroutine_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/Logging.hx", lineNumber : 5, className : "stx.coroutine.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_Log.unit();
		var tag = scope.pack.join("/");
		var this2 = this1;
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		};
		return function(value,pos) {
			this2(value,fn(pos));
		};
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_Log.unit();
	}
};
var stx_coroutine_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.coroutine.Module"] = stx_coroutine_Module;
stx_coroutine_Module.__name__ = "stx.coroutine.Module";
stx_coroutine_Module.__super__ = stx_pico_Clazz;
stx_coroutine_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	failure: function() {
		return new stx_coroutine_Failure();
	}
	,__class__: stx_coroutine_Module
});
var stx_coroutine_core_CauseSum = $hxEnums["stx.coroutine.core.CauseSum"] = { __ename__:"stx.coroutine.core.CauseSum",__constructs__:null
	,Stop: {_hx_name:"Stop",_hx_index:0,__enum__:"stx.coroutine.core.CauseSum",toString:$estr}
	,Exit: ($_=function(err) { return {_hx_index:1,err:err,__enum__:"stx.coroutine.core.CauseSum",toString:$estr}; },$_._hx_name="Exit",$_.__params__ = ["err"],$_)
};
stx_coroutine_core_CauseSum.__constructs__ = [stx_coroutine_core_CauseSum.Stop,stx_coroutine_core_CauseSum.Exit];
var stx_coroutine_core_Cause = {};
stx_coroutine_core_Cause._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_core_Cause.fromRejection = function(e) {
	return stx_coroutine_core_CauseSum.Exit(e);
};
stx_coroutine_core_Cause.early = function(e) {
	return stx_coroutine_core_CauseSum.Exit(e);
};
var stx_coroutine_core_CauseLift = function() { };
$hxClasses["stx.coroutine.core.CauseLift"] = stx_coroutine_core_CauseLift;
stx_coroutine_core_CauseLift.__name__ = "stx.coroutine.core.CauseLift";
stx_coroutine_core_CauseLift.toOption = function(self) {
	switch(self._hx_index) {
	case 0:
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Cause.hx", lineNumber : 30, className : "stx.coroutine.core.CauseLift", methodName : "toOption"});
		var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_coroutine_core_Errors.e_coroutine_stop(stx_Nano.digests(stx_nano_Wildcard.__))));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		return haxe_ds_Option.Some(this2);
	case 1:
		var err = self.err;
		return haxe_ds_Option.Some(err);
	}
};
stx_coroutine_core_CauseLift.next = function(thiz,that) {
	switch(thiz._hx_index) {
	case 0:
		switch(that._hx_index) {
		case 0:
			return stx_coroutine_core_CauseSum.Stop;
		case 1:
			var err = that.err;
			return stx_coroutine_core_CauseSum.Exit(err);
		}
		break;
	case 1:
		var _g = thiz.err;
		if(that._hx_index == 1) {
			var e1 = that.err;
			var e0 = _g;
			return stx_coroutine_core_CauseSum.Exit(stx_nano_Rejection.concat(e0,e1));
		} else {
			var err = _g;
			return stx_coroutine_core_CauseSum.Exit(err);
		}
		break;
	}
};
var stx_coroutine_core_ControlSum = $hxEnums["stx.coroutine.core.ControlSum"] = { __ename__:"stx.coroutine.core.ControlSum",__constructs__:null
	,Push: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.coroutine.core.ControlSum",toString:$estr}; },$_._hx_name="Push",$_.__params__ = ["v"],$_)
	,Quit: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.coroutine.core.ControlSum",toString:$estr}; },$_._hx_name="Quit",$_.__params__ = ["v"],$_)
};
stx_coroutine_core_ControlSum.__constructs__ = [stx_coroutine_core_ControlSum.Push,stx_coroutine_core_ControlSum.Quit];
var stx_coroutine_core_Control = {};
stx_coroutine_core_Control.lift = function(self) {
	return stx_coroutine_core_Control._new(self);
};
stx_coroutine_core_Control._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_core_Control.unit = function() {
	return stx_coroutine_core_Control.lift(stx_coroutine_core_ControlSum.Quit(haxe_ds_Option.None));
};
stx_coroutine_core_Control.fromError = function(c) {
	return stx_coroutine_core_ControlSum.Quit(haxe_ds_Option.Some(c));
};
stx_coroutine_core_Control.quit = function(c) {
	return stx_coroutine_core_Control.lift(stx_coroutine_core_ControlSum.Quit(c));
};
stx_coroutine_core_Control.push = function(v) {
	return stx_coroutine_core_Control.lift(stx_coroutine_core_ControlSum.Push(v));
};
var stx_coroutine_core_ControlLift = function() { };
$hxClasses["stx.coroutine.core.ControlLift"] = stx_coroutine_core_ControlLift;
stx_coroutine_core_ControlLift.__name__ = "stx.coroutine.core.ControlLift";
stx_coroutine_core_ControlLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return stx_coroutine_core_ControlSum.Push(fn(v));
	case 1:
		var v = self.v;
		return stx_coroutine_core_ControlSum.Quit(v);
	}
};
stx_coroutine_core_ControlLift.fold = function(self,push,quit,none) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return push(v);
	case 1:
		var _g = self.v;
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			return quit(v);
		case 1:
			return none();
		}
		break;
	}
};
var stx_coroutine_core_CoroutineSum = $hxEnums["stx.coroutine.core.CoroutineSum"] = { __ename__:"stx.coroutine.core.CoroutineSum",__constructs__:null
	,Emit: ($_=function(o,next) { return {_hx_index:0,o:o,next:next,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Emit",$_.__params__ = ["o","next"],$_)
	,Wait: ($_=function(tran) { return {_hx_index:1,tran:tran,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Wait",$_.__params__ = ["tran"],$_)
	,Hold: ($_=function(held) { return {_hx_index:2,held:held,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Hold",$_.__params__ = ["held"],$_)
	,Halt: ($_=function(r) { return {_hx_index:3,r:r,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Halt",$_.__params__ = ["r"],$_)
};
stx_coroutine_core_CoroutineSum.__constructs__ = [stx_coroutine_core_CoroutineSum.Emit,stx_coroutine_core_CoroutineSum.Wait,stx_coroutine_core_CoroutineSum.Hold,stx_coroutine_core_CoroutineSum.Halt];
var stx_coroutine_core_ReturnSum = $hxEnums["stx.coroutine.core.ReturnSum"] = { __ename__:"stx.coroutine.core.ReturnSum",__constructs__:null
	,Terminated: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"stx.coroutine.core.ReturnSum",toString:$estr}; },$_._hx_name="Terminated",$_.__params__ = ["c"],$_)
	,Production: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.coroutine.core.ReturnSum",toString:$estr}; },$_._hx_name="Production",$_.__params__ = ["v"],$_)
};
stx_coroutine_core_ReturnSum.__constructs__ = [stx_coroutine_core_ReturnSum.Terminated,stx_coroutine_core_ReturnSum.Production];
var stx_coroutine_core_CoroutineLift = function() { };
$hxClasses["stx.coroutine.core.CoroutineLift"] = stx_coroutine_core_CoroutineLift;
stx_coroutine_core_CoroutineLift.__name__ = "stx.coroutine.core.CoroutineLift";
stx_coroutine_core_CoroutineLift.cons = function(spx,o) {
	return stx_coroutine_core_CoroutineSum.Emit(o,spx);
};
stx_coroutine_core_CoroutineLift.provide = function(self,i) {
	var i1 = i;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.provide(self,i1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,f(rest));
	case 1:
		var arw = self.tran;
		return arw(stx_coroutine_core_ControlSum.Push(i));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 48, className : "stx.coroutine.core.CoroutineLift", methodName : "provide"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine(stx_Nano.digests(stx_nano_Wildcard.__))));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(this2)));
			case 1:
				var e = _g1.err;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 49, className : "stx.coroutine.core.CoroutineLift", methodName : "provide"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine(stx_Nano.digests(stx_nano_Wildcard.__))));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_Rejection.concat(e,this2))));
			}
			break;
		case 1:
			var v = _g.v;
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 47, className : "stx.coroutine.core.CoroutineLift", methodName : "provide"});
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine(stx_Nano.digests(stx_nano_Wildcard.__))));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(this2)));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.map = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.map(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(fn(head),f(rest));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var r = self.r;
		return stx_coroutine_core_CoroutineSum.Halt(r);
	}
};
stx_coroutine_core_CoroutineLift.map_i = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineLift.map_i(next,fn));
	case 1:
		var tran = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(function(i) {
			return stx_coroutine_core_CoroutineLift.map_i(tran(stx_coroutine_core_ControlLift.map(i,fn)),fn);
		});
	case 2:
		var held = self.held;
		var fn1 = fn;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(function(self) {
			return stx_coroutine_core_CoroutineLift.map_i(self,fn1);
		}))));
	case 3:
		var r = self.r;
		return stx_coroutine_core_CoroutineSum.Halt(r);
	}
};
stx_coroutine_core_CoroutineLift.errata = function(prc,fn) {
	var fn1 = fn;
	var f = function(prc) {
		return stx_coroutine_core_CoroutineLift.errata(prc,fn1);
	};
	switch(prc._hx_index) {
	case 0:
		var o = prc.o;
		var next = prc.next;
		return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
	case 1:
		var fn2 = prc.tran;
		return stx_coroutine_core_CoroutineSum.Wait(function(ctl) {
			return stx_coroutine_core_ControlLift.fold(ctl,function(v) {
				return f(fn2(stx_coroutine_core_ControlSum.Push(v)));
			},function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		});
	case 2:
		var ft = prc.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(ft,function(v) {
			return f(v);
		})));
	case 3:
		var _g = prc.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			case 1:
				var e = _g1.err;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(fn(e))));
			}
			break;
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.map_r = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.map_r(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,f(rest));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var e = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(fn(r)));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.map_or_halt = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.map_or_halt(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_pico_EitherLift.fold(fn(head),function(l) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(l));
		},function(r) {
			return stx_coroutine_core_CoroutineSum.Emit(r,f(rest));
		});
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var e = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.relate = function(self,fn) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var self1 = fn(o);
			if(self1 == null) {
				return rec(next);
			} else {
				switch(self1._hx_index) {
				case 0:
					var v = self1.v;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(v)));
				case 1:
					return rec(next);
				}
			}
			break;
		case 1:
			var fn1 = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn1,rec));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var e = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
	};
	return stx_coroutine_pack_Relate.lift(rec(self));
};
stx_coroutine_core_CoroutineLift.filter = function(self,fn) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_LiftIf.if_else(fn(o),function() {
				return stx_coroutine_core_CoroutineSum.Emit(o,rec(next));
			},function() {
				return rec(next);
			});
		case 1:
			var fn1 = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn1,rec));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var e = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
	};
	return rec(self);
};
stx_coroutine_core_CoroutineLift.map_filter = function(self,fn) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var self1 = fn(o);
			switch(self1._hx_index) {
			case 0:
				var t = self1.v;
				return stx_coroutine_core_CoroutineSum.Emit(t,rec(next));
			case 1:
				return rec(next);
			}
			break;
		case 1:
			var fn1 = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn1,rec));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var e = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
	};
	return rec(self);
};
stx_coroutine_core_CoroutineLift.partial = function(self,capture) {
	return stx_coroutine_core_CoroutineLift.map_filter(self,function(o) {
		var self = capture(o);
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			t(o);
			return stx_pico_Option.unit();
		case 1:
			return stx_pico_Option.pure(o);
		}
	});
};
stx_coroutine_core_CoroutineLift.window = function(self,capture) {
	var stage = 0;
	return stx_coroutine_core_CoroutineLift.map_filter(self,function(o) {
		switch(stage) {
		case 0:
			var self = capture(o);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				stage = 1;
				t(o);
				return haxe_ds_Option.None;
			case 1:
				return haxe_ds_Option.Some(o);
			}
			break;
		case 1:
			var self = capture(o);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				t(o);
				return haxe_ds_Option.None;
			case 1:
				stage = 2;
				return haxe_ds_Option.Some(o);
			}
			break;
		default:
			return haxe_ds_Option.Some(o);
		}
	});
};
stx_coroutine_core_CoroutineLift.immediate = function(self,effect) {
	var fn = function() {
		return self;
	};
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return eu_ohmrun_fletcher_Receiver.reply(this1);
	});
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_fletcher_FiberLift.then(effect,this1)));
};
stx_coroutine_core_CoroutineLift.flat_map_r = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.flat_map_r(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,f(rest));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var e = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
		case 1:
			var r = _g.v;
			return fn(r);
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.one = function(v) {
	return stx_coroutine_core_CoroutineSum.Emit(v,stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)));
};
stx_coroutine_core_CoroutineLift.mod = function(self,fn) {
	switch(self._hx_index) {
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,fn));
	case 2:
		var slot = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(stx_coroutine_core_Held.convert(slot,eu_ohmrun_fletcher_Convert.Fun(fn))));
	default:
		return fn(self);
	}
};
stx_coroutine_core_CoroutineLift.toString = function(self) {
	var recurse = null;
	recurse = function(self) {
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return "!<" + Std.string(head) + ">" + recurse(rest);
		case 1:
			var arw = self.tran;
			return "->";
		case 2:
			var h = self.held;
			return "[?]";
		case 3:
			var _g = self.r;
			if(_g._hx_index == 0) {
				if(_g.c._hx_index == 0) {
					return "#.";
				} else {
					var e = _g;
					return "#" + Std.string(e);
				}
			} else {
				var e = _g;
				return "#" + Std.string(e);
			}
			break;
		}
	};
	return recurse(self);
};
stx_coroutine_core_CoroutineLift.escape = function(self) {
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineLift.mod(rest,stx_coroutine_core_CoroutineLift.escape);
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineLift.mod(arw(stx_coroutine_core_ControlSum.Quit(haxe_ds_Option.None)),stx_coroutine_core_CoroutineLift.escape);
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(stx_coroutine_core_CoroutineLift.escape))));
	case 3:
		var e = self.r;
		return stx_coroutine_core_CoroutineSum.Halt(e);
	}
};
stx_coroutine_core_CoroutineLift.touch = function(self,before,after) {
	switch(self._hx_index) {
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.touch(arw,before,after));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.touch(h,before,after));
	default:
		return self;
	}
};
stx_coroutine_core_CoroutineLift.on_return = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.on_return(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(tail,f));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var ft = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var ret = self.r;
		fn(ret);
		return stx_coroutine_core_CoroutineSum.Halt(ret);
	}
};
stx_coroutine_core_CoroutineLift.tap = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.tap(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		fn(stx_coroutine_core_Phase.Opt(o));
		return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
	case 1:
		var tran = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(function(ctrl) {
			fn(stx_coroutine_core_Phase.Ipt(ctrl));
			return f(tran(ctrl));
		});
	case 2:
		var held = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var r = self.r;
		fn(stx_coroutine_core_Phase.Rtn(r));
		return stx_coroutine_core_CoroutineSum.Halt(r);
	}
};
stx_coroutine_core_CoroutineLift.hook = function(self,fn) {
	return stx_coroutine_core_CoroutineLift.map(self,stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,fn));
};
stx_coroutine_core_CoroutineLift.once = function(self,fn) {
	var done = false;
	return stx_coroutine_core_CoroutineLift.hook(self,function(o) {
		stx_LiftIf.if_else(done,function() {
			return;
		},function() {
			done = true;
			fn(o);
		});
	});
};
stx_coroutine_core_CoroutineLift.until = function(self,fn) {
	var cont = true;
	return stx_coroutine_core_CoroutineLift.hook(self,function(o) {
		if(cont) {
			cont = fn(o);
		}
	});
};
stx_coroutine_core_CoroutineLift.pause = function(self,ft) {
	var future = tink_core_Future.map(ft,function(_) {
		return self;
	});
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = tink_core_Future.map(future,function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(this1));
};
stx_coroutine_core_CoroutineLift.source = function(self,sig) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		tmp = stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineLift.source(next,sig));
		break;
	case 1:
		var arw = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(tink_core_Future.map(sig(),function(either) {
			return stx_pico_EitherLift.fold(either,function(l) {
				return stx_coroutine_core_CoroutineLift.source(arw(stx_coroutine_core_Control.push(l)),sig);
			},function(r) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(r));
			});
		}),{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 323, className : "stx.coroutine.core.CoroutineLift", methodName : "source"}));
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(x) {
			return stx_coroutine_core_CoroutineLift.source(x,sig);
		}))));
		break;
	case 3:
		var done = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(done);
		break;
	}
	return stx_coroutine_pack_Source.lift(tmp);
};
stx_coroutine_core_CoroutineLift.errate = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.errate(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
	case 1:
		var tran = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(ctrl) {
			return stx_coroutine_core_ControlLift.fold(ctrl,function(ok) {
				return f(tran(stx_coroutine_core_ControlSum.Push(ok)));
			},function(no) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_lift_LiftErrorDigestToRejection.toRejection(no))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		}));
	case 2:
		var held = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			case 1:
				var r = _g1.err;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_Rejection.errate(r,fn))));
			}
			break;
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.mod_r = function(self,fn) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var e = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
			case 1:
				var r = _g.v;
				var this1 = eu_ohmrun_FletcherLift.map(eu_ohmrun_fletcher_Produce.prj(eu_ohmrun_fletcher_ModulateLift.produce(fn,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,r))),function(res) {
					var self;
					switch(res._hx_index) {
					case 0:
						var t = res.t;
						self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(t));
						break;
					case 1:
						var e = res.e;
						var _g = e.get_val();
						switch(_g._hx_index) {
						case 0:
							var _g1 = _g.v;
							switch(_g1._hx_index) {
							case 0:
								var _g = _g1.v;
								switch(_g._hx_index) {
								case 0:
									self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
									break;
								case 1:
									var rejection = _g.err;
									self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(rejection)));
									break;
								}
								break;
							case 1:
								var code = _g1.digest;
								var self1 = e.get_pos();
								var this1;
								if(self1._hx_index == 0) {
									var v = self1.v;
									this1 = v;
								} else {
									this1 = null;
								}
								var this2 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this1);
								var _ = stx_Nano.digests(stx_nano_Wildcard.__);
								var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(code));
								var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
									return stx_nano_Rejection.prj(x);
								});
								if(data == null) {
									data = haxe_ds_Option.None;
								}
								if(lst == null) {
									lst = haxe_ds_Option.None;
								}
								var this1 = new stx_pico_ErrorBase(data,lst,this2 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this2)).toError();
								self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(this1)));
								break;
							}
							break;
						case 1:
							self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
							break;
						}
						break;
					}
					return self;
				});
				var result = this1;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(result));
			}
			break;
		}
	};
	return stx_coroutine_core_Coroutine.lift(f(self));
};
var stx_coroutine_core_Coroutine = {};
stx_coroutine_core_Coroutine.lift = function(self) {
	return stx_coroutine_core_Coroutine._new(self);
};
stx_coroutine_core_Coroutine._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_core_Coroutine.held = function(this1) {
	if(this1._hx_index == 2) {
		var _g = this1.held;
		return true;
	} else {
		return false;
	}
};
stx_coroutine_core_Coroutine.prj = function(this1) {
	return this1;
};
stx_coroutine_core_Coroutine.provide = function(this1,v) {
	return stx_coroutine_core_Coroutine.lift(stx_coroutine_core_Coroutine._.provide(this1,v));
};
var stx_nano_Digest = function(uuid,detail,code) {
	if(code == null) {
		code = -1;
	}
	stx_pico_Clazz.call(this);
	this.uuid = uuid;
	this.detail = detail;
	this.code = code;
	var _this = stx_nano_Digest.get_register();
	if(Object.prototype.hasOwnProperty.call(_this.h,uuid)) {
		var val = stx_nano_Digest.get_register().h[uuid];
		if(js_Boot.getClass(val) != js_Boot.getClass(this)) {
			var c = js_Boot.getClass(this);
			var tmp = stx_pico_Identifier._new(c.__name__);
			throw haxe_Exception.thrown("Digest identifier " + uuid + " on " + (tmp == null ? "null" : stx_pico_Identifier.toString(tmp)) + " already registered for " + Std.string(val));
		}
	} else {
		stx_nano_Digest.get_register().h[uuid] = this;
	}
};
$hxClasses["stx.nano.Digest"] = stx_nano_Digest;
stx_nano_Digest.__name__ = "stx.nano.Digest";
stx_nano_Digest.__properties__ = {get_register:"get_register"};
stx_nano_Digest.register = null;
stx_nano_Digest.get_register = function() {
	if(stx_nano_Digest.register == null) {
		return stx_nano_Digest.register = new haxe_ds_StringMap();
	} else {
		return stx_nano_Digest.register;
	}
};
stx_nano_Digest.e_digest_uuid_reserved = function(self,uuid) {
	return new stx_nano_digest_term_EDigestUUIDReserved(uuid);
};
stx_nano_Digest.e_resource_not_found = function(self,name) {
	return new stx_nano_digest_term_EResourceNotFound(name);
};
stx_nano_Digest.e_no_field = function(self,name) {
	return new stx_nano_digest_term_ENoField(name);
};
stx_nano_Digest.e_undefined = function(self) {
	return new stx_nano_digest_term_EUndefined();
};
stx_nano_Digest.e_tink_error = function(self,msg,code) {
	return new stx_nano_digest_term_ETinkError(msg,code);
};
stx_nano_Digest.e_unimplemented = function(self) {
	return new stx_nano_digest_term_EUnimplemented();
};
stx_nano_Digest.e_js_error = function(self,error) {
	return new stx_nano_digest_term_EJsError(error);
};
stx_nano_Digest.__super__ = stx_pico_Clazz;
stx_nano_Digest.prototype = $extend(stx_pico_Clazz.prototype,{
	uuid: null
	,detail: null
	,code: null
	,toString: function() {
		return "(" + this.code + ",\"" + this.uuid + "\",\"" + this.detail + "\")";
	}
	,asDigest: function() {
		return this;
	}
	,__class__: stx_nano_Digest
});
var stx_coroutine_core_ECoroutineStop = function() {
	stx_nano_Digest.call(this,"01FRQ77KZBWH5B94085CX40Y02","Coroutine stopped.");
};
$hxClasses["stx.coroutine.core.ECoroutineStop"] = stx_coroutine_core_ECoroutineStop;
stx_coroutine_core_ECoroutineStop.__name__ = "stx.coroutine.core.ECoroutineStop";
stx_coroutine_core_ECoroutineStop.__super__ = stx_nano_Digest;
stx_coroutine_core_ECoroutineStop.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_coroutine_core_ECoroutineStop
});
var stx_coroutine_core_ECoroutineInputHung = function() {
	stx_nano_Digest.call(this,"01FRSGYFNGNMAKJT12C1GSM2Y4","Input hung");
};
$hxClasses["stx.coroutine.core.ECoroutineInputHung"] = stx_coroutine_core_ECoroutineInputHung;
stx_coroutine_core_ECoroutineInputHung.__name__ = "stx.coroutine.core.ECoroutineInputHung";
stx_coroutine_core_ECoroutineInputHung.__super__ = stx_nano_Digest;
stx_coroutine_core_ECoroutineInputHung.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_coroutine_core_ECoroutineInputHung
});
var stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine = function() {
	stx_nano_Digest.call(this,"01FRSHA2FF3J3MEE5AF9RJ5YE7","Provided value to stopped coroutine");
};
$hxClasses["stx.coroutine.core.ECoroutineProvidedValueToStoppedCoroutine"] = stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine;
stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine.__name__ = "stx.coroutine.core.ECoroutineProvidedValueToStoppedCoroutine";
stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine.__super__ = stx_nano_Digest;
stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine
});
var stx_coroutine_core_Errors = function() { };
$hxClasses["stx.coroutine.core.Errors"] = stx_coroutine_core_Errors;
stx_coroutine_core_Errors.__name__ = "stx.coroutine.core.Errors";
stx_coroutine_core_Errors.e_coroutine_stop = function(digests) {
	return new stx_coroutine_core_ECoroutineStop();
};
stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine = function(digests) {
	return new stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine();
};
var stx_coroutine_core_Held = {};
stx_coroutine_core_Held._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_core_Held.fromProvide = function(self) {
	return stx_coroutine_core_Held.lift(self);
};
stx_coroutine_core_Held.fromProduce = function(self) {
	var fn = function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return t;
		case 1:
			var e = res.e;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
		}
	};
	return stx_coroutine_core_Held.lift(eu_ohmrun_Fletcher._.then(self,eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var res = fn(p);
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var resI = this1;
		var self = cont;
		return resI.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	})));
};
stx_coroutine_core_Held.fromProduceI = function(self) {
	var this1 = eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,null),function(ok) {
			var result;
			switch(ok._hx_index) {
			case 0:
				var t = ok.t;
				var f = null;
				f = function(self) {
					switch(self._hx_index) {
					case 0:
						var o = self.o;
						var next = self.next;
						var self1 = next;
						return stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
							return f(self1);
						})));
					case 1:
						var tran = self.tran;
						return stx_coroutine_core_CoroutineSum.Wait(function(ctrl) {
							switch(ctrl._hx_index) {
							case 0:
								var i = ctrl.v;
								return f(tran(stx_coroutine_core_Control.push(i)));
							case 1:
								var _g = ctrl.v;
								switch(_g._hx_index) {
								case 0:
									var e = _g.v;
									return f(tran(stx_coroutine_core_Control.quit(stx_pico_Option.fromNullT(e))));
								case 1:
									return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
								}
								break;
							}
						});
					case 2:
						var held = self.held;
						var result = stx_coroutine_core_Held.convert(held,eu_ohmrun_fletcher_Convert.Fun(f));
						return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(result));
					case 3:
						var _g = self.r;
						switch(_g._hx_index) {
						case 0:
							var _g1 = _g.c;
							switch(_g1._hx_index) {
							case 0:
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
							case 1:
								var rejection = _g1.err;
								var result = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(rejection)));
								return result;
							}
							break;
						case 1:
							var r = _g.v;
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
						}
						break;
					}
				};
				var result1 = f(t);
				result = result1;
				break;
			case 1:
				var e = ok.e;
				var this1 = stx_nano_lift_LiftError.fault(e);
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				var result1 = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(this2)));
				result = result1;
				break;
			}
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,result);
		},function(no) {
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
		}).apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self1;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return stx_coroutine_core_Held._new(this1);
};
stx_coroutine_core_Held.Ready = function(data,pos) {
	var v = data;
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,v);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return this1;
};
stx_coroutine_core_Held.Guard = function(guard,pos) {
	var future = guard;
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = tink_core_Future.map(future,function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				var this1 = null;
				return this1;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return stx_coroutine_core_Held.lift(this1);
};
stx_coroutine_core_Held.Pause = function(self) {
	var fn = self;
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return eu_ohmrun_fletcher_Receiver.reply(this1);
	});
	return stx_coroutine_core_Held.lift(this1);
};
stx_coroutine_core_Held.lift = function(fn) {
	return stx_coroutine_core_Held._new(fn);
};
stx_coroutine_core_Held.toCoroutine = function(this1) {
	return stx_coroutine_core_CoroutineSum.Hold(this1);
};
stx_coroutine_core_Held.pure = function(spx) {
	var v = spx;
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,v);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = self;
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				oc.handle(function(out) {
					ip.trigger(out);
				});
				var this1 = null;
				return this1;
			})));
		})));
	});
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(this1));
};
stx_coroutine_core_Held.lazy = function(spx) {
	var fn = stx_fn_Thunk.prj(spx);
	var this1 = eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		return eu_ohmrun_fletcher_Receiver.reply(this1);
	});
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(this1));
};
stx_coroutine_core_Held.mod = function(this1,fn) {
	return stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(this1,eu_ohmrun_fletcher_Convert.Fun(fn)));
};
stx_coroutine_core_Held.touch = function(this1,before,after) {
	return stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.mapi(this1,stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,function(_) {
		before();
	})),stx_nano_lift_LiftNano.passthrough(stx_nano_Wildcard.__,function(_) {
		after();
	})));
};
stx_coroutine_core_Held.environment = function(this1,handler) {
	var handler1 = handler;
	return eu_ohmrun_Fletcher._.environment(this1,null,function(o) {
		handler1(o);
	},function(e) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(6);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 75, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "environment"}));
		throw haxe_Exception.thrown(e);
	});
};
stx_coroutine_core_Held.convert = function(this1,that) {
	return eu_ohmrun_fletcher_Provide._.convert(this1,that);
};
stx_coroutine_core_Held.toString = function(this1) {
	return "HELD";
};
var stx_coroutine_core_HeldLift = function() { };
$hxClasses["stx.coroutine.core.HeldLift"] = stx_coroutine_core_HeldLift;
stx_coroutine_core_HeldLift.__name__ = "stx.coroutine.core.HeldLift";
var stx_coroutine_core_Phase = $hxEnums["stx.coroutine.core.Phase"] = { __ename__:"stx.coroutine.core.Phase",__constructs__:null
	,Ipt: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"stx.coroutine.core.Phase",toString:$estr}; },$_._hx_name="Ipt",$_.__params__ = ["i"],$_)
	,Opt: ($_=function(o) { return {_hx_index:1,o:o,__enum__:"stx.coroutine.core.Phase",toString:$estr}; },$_._hx_name="Opt",$_.__params__ = ["o"],$_)
	,Rtn: ($_=function(o) { return {_hx_index:2,o:o,__enum__:"stx.coroutine.core.Phase",toString:$estr}; },$_._hx_name="Rtn",$_.__params__ = ["o"],$_)
};
stx_coroutine_core_Phase.__constructs__ = [stx_coroutine_core_Phase.Ipt,stx_coroutine_core_Phase.Opt,stx_coroutine_core_Phase.Rtn];
var stx_coroutine_core_Return = {};
stx_coroutine_core_Return.lift = function(self) {
	return stx_coroutine_core_Return._new(self);
};
stx_coroutine_core_Return._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_core_Return.fromRejection = function(e) {
	return stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e));
};
stx_coroutine_core_Return.fromCause = function(c) {
	return stx_coroutine_core_ReturnSum.Terminated(c);
};
stx_coroutine_core_Return.fromT = function(v) {
	return stx_coroutine_core_ReturnSum.Production(v);
};
stx_coroutine_core_Return.toCoroutine = function(this1) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_Return.lift(this1));
};
stx_coroutine_core_Return.toOptionUpshot = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var _g = this1.c;
		switch(_g._hx_index) {
		case 0:
			return haxe_ds_Option.None;
		case 1:
			var err = _g.err;
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err));
		}
		break;
	case 1:
		var v = this1.v;
		return haxe_ds_Option.Some(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
	}
};
stx_coroutine_core_Return.prj = function(this1) {
	return this1;
};
var stx_coroutine_core_ReturnLift = function() { };
$hxClasses["stx.coroutine.core.ReturnLift"] = stx_coroutine_core_ReturnLift;
stx_coroutine_core_ReturnLift.__name__ = "stx.coroutine.core.ReturnLift";
stx_coroutine_core_ReturnLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var c = self.c;
		return stx_coroutine_core_ReturnSum.Terminated(c);
	case 1:
		var v = self.v;
		return stx_coroutine_core_ReturnSum.Production(fn(v));
	}
};
var stx_coroutine_core_Status = $hxEnums["stx.coroutine.core.Status"] = { __ename__:"stx.coroutine.core.Status",__constructs__:null
	,Emitting: {_hx_name:"Emitting",_hx_index:0,__enum__:"stx.coroutine.core.Status",toString:$estr}
	,Holding: {_hx_name:"Holding",_hx_index:1,__enum__:"stx.coroutine.core.Status",toString:$estr}
	,Awaiting: {_hx_name:"Awaiting",_hx_index:2,__enum__:"stx.coroutine.core.Status",toString:$estr}
	,Halted: {_hx_name:"Halted",_hx_index:3,__enum__:"stx.coroutine.core.Status",toString:$estr}
};
stx_coroutine_core_Status.__constructs__ = [stx_coroutine_core_Status.Emitting,stx_coroutine_core_Status.Holding,stx_coroutine_core_Status.Awaiting,stx_coroutine_core_Status.Halted];
var stx_coroutine_core_Transmission = {};
stx_coroutine_core_Transmission.__properties__ = {get_self:"get_self"};
stx_coroutine_core_Transmission._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_core_Transmission.lift = function(self) {
	return stx_coroutine_core_Transmission._new(self);
};
stx_coroutine_core_Transmission.fromFun1R = function(fn) {
	return stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	});
};
stx_coroutine_core_Transmission.touch = function(this1,before,after) {
	return stx_coroutine_core_Transmission.lift(function(control) {
		before();
		var value = this1(control);
		after();
		return value;
	});
};
stx_coroutine_core_Transmission.into = function(fn) {
	return fn;
};
stx_coroutine_core_Transmission.prj = function(this1) {
	return this1;
};
stx_coroutine_core_Transmission.get_self = function(this1) {
	return stx_coroutine_core_Transmission.lift(this1);
};
var stx_coroutine_core_TransmissionLift = function() { };
$hxClasses["stx.coroutine.core.TransmissionLift"] = stx_coroutine_core_TransmissionLift;
stx_coroutine_core_TransmissionLift.__name__ = "stx.coroutine.core.TransmissionLift";
stx_coroutine_core_TransmissionLift.mod = function(self,fn) {
	return stx_coroutine_core_Transmission.lift(stx_fn_UnaryLift.then(self,fn));
};
stx_coroutine_core_TransmissionLift.imply = function(self,input) {
	return self(stx_coroutine_core_ControlSum.Push(input));
};
var stx_coroutine_lift_LiftArrowlet = function() { };
$hxClasses["stx.coroutine.lift.LiftArrowlet"] = stx_coroutine_lift_LiftArrowlet;
stx_coroutine_lift_LiftArrowlet.__name__ = "stx.coroutine.lift.LiftArrowlet";
var stx_coroutine_lift_LiftFun = function() { };
$hxClasses["stx.coroutine.lift.LiftFun"] = stx_coroutine_lift_LiftFun;
stx_coroutine_lift_LiftFun.__name__ = "stx.coroutine.lift.LiftFun";
stx_coroutine_lift_LiftFun.asTunnel = function(fn) {
	return stx_coroutine_pack_Tunnel.fromFunction(fn);
};
stx_coroutine_lift_LiftFun.asRelate = function(fn) {
	return stx_coroutine_pack_Relate.fromFun1R(fn);
};
var stx_coroutine_lift_LiftIterable = function() { };
$hxClasses["stx.coroutine.lift.LiftIterable"] = stx_coroutine_lift_LiftIterable;
stx_coroutine_lift_LiftIterable.__name__ = "stx.coroutine.lift.LiftIterable";
stx_coroutine_lift_LiftIterable.asEmiter = function(itr) {
	return stx_coroutine_pack_Emiter.fromIterator(itr);
};
var stx_coroutine_lift_LiftOption = function() { };
$hxClasses["stx.coroutine.lift.LiftOption"] = stx_coroutine_lift_LiftOption;
stx_coroutine_lift_LiftOption.__name__ = "stx.coroutine.lift.LiftOption";
stx_coroutine_lift_LiftOption.asEmiter = function(opt) {
	return stx_coroutine_pack_Emiter.fromOption(opt);
};
var stx_coroutine_pack_DeriveLift = function() { };
$hxClasses["stx.coroutine.pack.DeriveLift"] = stx_coroutine_pack_DeriveLift;
stx_coroutine_pack_DeriveLift.__name__ = "stx.coroutine.pack.DeriveLift";
stx_coroutine_pack_DeriveLift.toSource = function(self) {
	var recurse = null;
	recurse = function(self) {
		switch(self._hx_index) {
		case 0:
			if(self.o == null) {
				var next = self.next;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			} else {
				throw haxe_Exception.thrown("This is a regression");
			}
			break;
		case 1:
			var arw = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,recurse));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(recurse))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var ret = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(ret));
			}
			break;
		}
	};
	return stx_coroutine_pack_Source.fromCoroutine(recurse(self));
};
stx_coroutine_pack_DeriveLift.complete = function(self,cb) {
	var recurse = null;
	recurse = function(self) {
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_pack_DeriveLift.complete(rest,cb));
		case 1:
			var arw = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,recurse));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(recurse))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var ret = _g.v;
				cb(ret);
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			}
			break;
		}
	};
	return stx_coroutine_pack_Effect.lift(recurse(self));
};
stx_coroutine_pack_DeriveLift.zip = function(self,that) {
	var f = null;
	f = function(self,that) {
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var _g = self.next;
			switch(that._hx_index) {
			case 0:
				var _g1 = that.o;
				var nII = that.next;
				var nI = _g;
				var self1 = nI;
				var that1 = nII;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self1,that1);
				}));
			case 1:
				var fn = that.tran;
				var nI = _g;
				var self2 = nI;
				var that2 = fn(stx_coroutine_core_ControlSum.Push(null));
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self2,that2);
				}));
			case 2:
				var ft = that.held;
				var nI = _g;
				var self3 = nI;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(that) {
					return f(self3,that);
				}))));
			case 3:
				var _g1 = that.r;
				switch(_g1._hx_index) {
				case 0:
					var _g2 = _g1.c;
					switch(_g2._hx_index) {
					case 0:
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					case 1:
						var e = _g2.err;
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
					}
					break;
				case 1:
					var r = _g1.v;
					var nI = _g;
					var self4 = nI;
					var that3 = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
					return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
						return f(self4,that3);
					}));
				}
				break;
			}
			break;
		case 1:
			var _g = self.tran;
			switch(that._hx_index) {
			case 0:
				var _g1 = that.o;
				var nII = that.next;
				var fn = _g;
				var self5 = fn(stx_coroutine_core_ControlSum.Push(null));
				var that4 = nII;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self5,that4);
				}));
			case 1:
				var r = that.tran;
				var l = _g;
				var self6 = l(stx_coroutine_core_ControlSum.Push(null));
				var that5 = r(stx_coroutine_core_ControlSum.Push(null));
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self6,that5);
				}));
			case 2:
				var ft = that.held;
				var fn = _g;
				var self7 = fn(stx_coroutine_core_ControlSum.Push(null));
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(that) {
					return f(self7,that);
				}))));
			case 3:
				var _g1 = that.r;
				switch(_g1._hx_index) {
				case 0:
					var _g2 = _g1.c;
					switch(_g2._hx_index) {
					case 0:
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					case 1:
						var e = _g2.err;
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
					}
					break;
				case 1:
					var r = _g1.v;
					var fn = _g;
					var self8 = fn(stx_coroutine_core_ControlSum.Push(null));
					var that6 = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
					return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
						return f(self8,that6);
					}));
				}
				break;
			}
			break;
		case 2:
			var l = self.held;
			var r = that;
			var that7 = r;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(l,eu_ohmrun_fletcher_Convert.Fun(function(self) {
				return f(self,that7);
			}))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.c;
				switch(_g1._hx_index) {
				case 0:
					if(that._hx_index == 3) {
						var _g2 = that.r;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
							case 1:
								var e1 = _g3.err;
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e1)));
							}
						} else {
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
						}
					} else {
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					}
					break;
				case 1:
					var _g2 = _g1.err;
					if(that._hx_index == 3) {
						var _g1 = that.r;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								var e = _g2;
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
							case 1:
								var e1 = _g3.err;
								var e0 = _g2;
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_Rejection.concat(e0,e1))));
							}
						} else {
							var l = _g;
							var r = that;
							var self = stx_coroutine_core_CoroutineSum.Halt(l);
							var that8 = r;
							return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
								return f(self,that8);
							}));
						}
					} else {
						var l = _g;
						var r = that;
						var self9 = stx_coroutine_core_CoroutineSum.Halt(l);
						var that9 = r;
						return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
							return f(self9,that9);
						}));
					}
					break;
				}
				break;
			case 1:
				var _g1 = _g.v;
				if(that._hx_index == 3) {
					var _g2 = that.r;
					switch(_g2._hx_index) {
					case 0:
						var _g3 = _g2.c;
						switch(_g3._hx_index) {
						case 0:
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
						case 1:
							var e = _g3.err;
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
						}
						break;
					case 1:
						var r = _g2.v;
						var l = _g1;
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r)));
					}
				} else {
					var l = _g;
					var r = that;
					var self10 = stx_coroutine_core_CoroutineSum.Halt(l);
					var that = r;
					return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
						return f(self10,that);
					}));
				}
				break;
			}
			break;
		}
	};
	return stx_coroutine_pack_Derive.lift(f(self,that));
};
stx_coroutine_pack_DeriveLift.secure = function(self,that) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var e = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
			case 1:
				var r = _g.v;
				return stx_coroutine_pack_SecureLift.close(stx_coroutine_pack_Secure.provide(that,r));
			}
			break;
		}
	};
	return stx_coroutine_pack_Effect.lift(f(self));
};
stx_coroutine_pack_DeriveLift.map = function(self,fn) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var e = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
			case 1:
				var r = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(fn(r)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Derive.lift(f(self));
};
stx_coroutine_pack_DeriveLift.produce = function(self) {
	return eu_ohmrun_fletcher_Produce.fromPledge(stx_nano_Pledge.lift(tink_core_Future.map(stx_coroutine_pack_DeriveLift.run(self),function(outcome) {
		var tmp;
		switch(outcome._hx_index) {
		case 0:
			var t = outcome.t;
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			break;
		case 1:
			var e = outcome.e;
			switch(e._hx_index) {
			case 0:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 158, className : "stx.coroutine.pack.DeriveLift", methodName : "produce"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_coroutine_core_Errors.e_coroutine_stop(stx_Nano.digests(stx_nano_Wildcard.__))));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
				break;
			case 1:
				var e1 = e.err;
				tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e1);
				break;
			}
			break;
		}
		return tmp;
	})));
};
stx_coroutine_pack_DeriveLift.run = function(eff) {
	var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(3);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("run " + Std.string(eff))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 170, className : "stx.coroutine.pack.DeriveLift", methodName : "run"}));
	var t = new tink_core_FutureTrigger();
	stx_coroutine_pack_DeriveLift.loop(eff,t);
	return t;
};
stx_coroutine_pack_DeriveLift.loop = function(eff,f) {
	var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("loop " + Std.string(eff))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 176, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"}));
	var now = eff;
	_hx_loop1: while(true) switch(now._hx_index) {
	case 0:
		var _g = now.o;
		var nxt = now.next;
		now = nxt;
		break;
	case 1:
		var fn1 = now.tran;
		now = fn1(stx_coroutine_core_ControlSum.Push(null));
		break;
	case 2:
		var ft = now.held;
		var this2 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("hold");
		(function(fn,this1) {
			return function(value,pos) {
				this1[0](value,fn[0](pos));
			};
		})([(function() {
			return function(pos) {
				return pos.with_stamp((function() {
					return function(stamp) {
						return stamp.relevel(2);
					};
				})());
			};
		})()],[this2])(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 187, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"}));
		var this3 = stx_coroutine_core_Held.environment(ft,(function() {
			return function(x) {
				var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("hold:release");
				var this2 = this1;
				var fn = (function() {
					return function(pos) {
						return pos.with_stamp((function() {
							return function(stamp) {
								return stamp.relevel(2);
							};
						})());
					};
				})();
				(function() {
					return function(value,pos) {
						this2(value,fn(pos));
					};
				})()(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 190, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"}));
				stx_coroutine_pack_DeriveLift.loop(x,f);
			};
		})());
		var this4 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon((function() {
			return function(fn) {
				return fn(new tink_core_FutureTrigger());
			};
		})()));
		stx_stream_CycleLift.submit(stx_stream_Work.toCycle(this3.defer(null,this4)),{ fileName : "eu/ohmrun/fletcher/Fiber.hx", lineNumber : 21, className : "eu.ohmrun.fletcher._Fiber.Fiber_Impl_", methodName : "submit"});
		break _hx_loop1;
	case 3:
		var h = now.r;
		switch(h._hx_index) {
		case 0:
			var cause = h.c;
			f.trigger(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,cause));
			break;
		case 1:
			var value = h.v;
			f.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,value));
			break;
		}
		break _hx_loop1;
	}
};
var stx_coroutine_pack_Derive = {};
stx_coroutine_pack_Derive._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Derive.lift = function(self) {
	return stx_coroutine_pack_Derive._new(self);
};
stx_coroutine_pack_Derive.fromCoroutine = function(spx) {
	return stx_coroutine_pack_Derive._new(spx);
};
stx_coroutine_pack_Derive.fromThunk = function(thk) {
	return stx_coroutine_pack_Derive.lift(stx_coroutine_core_Held.lazy(function() {
		return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(thk()));
	}));
};
stx_coroutine_pack_Derive.toCoroutine = function(this1) {
	return this1;
};
var stx_coroutine_pack_EffectLift = function() { };
$hxClasses["stx.coroutine.pack.EffectLift"] = stx_coroutine_pack_EffectLift;
stx_coroutine_pack_EffectLift.__name__ = "stx.coroutine.pack.EffectLift";
stx_coroutine_pack_EffectLift.run = function(self) {
	return tink_core_Future.map(stx_coroutine_pack_Derive._.run(stx_coroutine_pack_Effect.prj(self)),function(outcome) {
		var tmp;
		switch(outcome._hx_index) {
		case 0:
			var t = outcome.t;
			tmp = haxe_ds_Option.None;
			break;
		case 1:
			var e = outcome.e;
			tmp = haxe_ds_Option.Some(e);
			break;
		}
		return tmp;
	});
};
stx_coroutine_pack_EffectLift.submit = function(eff) {
	stx_coroutine_pack_Derive._.run(stx_coroutine_pack_Effect.prj(eff)).handle(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			break;
		case 1:
			var e = res.e;
			if(e._hx_index == 1) {
				var e1 = e.err;
				var this1 = stx_Log.ZERO;
				var fn = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(6);
					});
				};
				(function(value,pos) {
					this1(value,fn(pos));
				})(new stx_log_EntryCtr().pure(e1),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 36, className : "stx.coroutine.pack.EffectLift", methodName : "submit"}));
				throw haxe_Exception.thrown(e1);
			}
			break;
		}
	});
};
stx_coroutine_pack_EffectLift.cause_later = function(e,c) {
	var f = function(e) {
		return stx_coroutine_pack_EffectLift.cause_later(e,c);
	};
	var tmp;
	switch(e._hx_index) {
	case 0:
		var head = e.o;
		var rest = e.next;
		tmp = f(rest);
		break;
	case 1:
		var fn = e.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
		break;
	case 2:
		var pull = e.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(pull,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var _g = e.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseLift.next(cause,c)));
			break;
		case 1:
			if(_g.v == null) {
				tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(c));
			} else {
				var e = _g;
				tmp = stx_coroutine_core_CoroutineSum.Halt(e);
			}
			break;
		}
		break;
	}
	return stx_coroutine_pack_Effect.lift(tmp);
};
stx_coroutine_pack_EffectLift.toExecute = function(self) {
	var this1 = eu_ohmrun_Fletcher.fromApi(new stx_coroutine_pack_EffectExecute(self));
	return this1;
};
stx_coroutine_pack_EffectLift.next = function(self,that) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var self1 = stx_coroutine_pack_Effect.fromCoroutine(next);
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
				return f(self1);
			}));
		case 1:
			var tran = self.tran;
			var fn = function(i) {
				var self = stx_coroutine_pack_Effect.fromCoroutine(tran(stx_coroutine_core_ControlSum.Push(null)));
				return stx_coroutine_core_Coroutine.provide(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self);
				})),i);
			};
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
				return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
				},function() {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
				});
			}));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(stx_coroutine_core_Held.convert(held,eu_ohmrun_fletcher_Convert.Fun(function(self) {
				return f(self);
			}))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var c = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(c));
			case 1:
				var _g1 = _g.v;
				return that;
			}
			break;
		}
	};
	return f(self);
};
var stx_coroutine_pack_Effect = {};
stx_coroutine_pack_Effect.lift = function(self) {
	return stx_coroutine_pack_Effect._new(self);
};
stx_coroutine_pack_Effect._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Effect.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Effect.fromCoroutine = function(self) {
	return stx_coroutine_pack_Effect.lift(self);
};
stx_coroutine_pack_Effect.prj = function(this1) {
	return this1;
};
var stx_coroutine_pack_EffectExecute = function(effect) {
	eu_ohmrun_FletcherCls.call(this);
	this.effect = effect;
};
$hxClasses["stx.coroutine.pack.EffectExecute"] = stx_coroutine_pack_EffectExecute;
stx_coroutine_pack_EffectExecute.__name__ = "stx.coroutine.pack.EffectExecute";
stx_coroutine_pack_EffectExecute.crunch1 = function(eff) {
	stx_coroutine_pack_Derive._.run(stx_coroutine_pack_Effect.prj(eff)).handle(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			break;
		case 1:
			var e = res.e;
			throw haxe_Exception.thrown(e);
		}
	});
};
stx_coroutine_pack_EffectExecute.crunch = function(eff) {
	var cursor = eff;
	var suspended = false;
	var done = false;
	var handler = function() {
		switch(cursor._hx_index) {
		case 0:
			var _g = cursor.o;
			var tail = cursor.next;
			cursor = stx_coroutine_pack_Effect.fromCoroutine(tail);
			break;
		case 1:
			var fn = cursor.tran;
			cursor = stx_coroutine_pack_Effect.fromCoroutine(fn(stx_coroutine_core_Control.push(null)));
			break;
		case 2:
			var held = cursor.held;
			suspended = true;
			var this1 = stx_coroutine_core_Held.environment(held,function(eff) {
				cursor = stx_coroutine_pack_Effect.fromCoroutine(eff);
				suspended = false;
			});
			var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
				return fn(new tink_core_FutureTrigger());
			}));
			stx_stream_CycleLift.submit(stx_stream_Work.toCycle(this1.defer(null,this2)),{ fileName : "eu/ohmrun/fletcher/Fiber.hx", lineNumber : 21, className : "eu.ohmrun.fletcher._Fiber.Fiber_Impl_", methodName : "submit"});
			break;
		case 3:
			var h = cursor.r;
			if(h._hx_index == 0) {
				var _g = h.c;
				if(_g._hx_index == 1) {
					var error = _g.err;
					throw haxe_Exception.thrown(error);
				}
			}
			done = true;
			break;
		}
	};
	while(!done) if(!suspended) {
		handler();
	}
};
stx_coroutine_pack_EffectExecute.__super__ = eu_ohmrun_FletcherCls;
stx_coroutine_pack_EffectExecute.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	effect: null
	,defer: function(_,cont) {
		var _gthis = this;
		var this1 = stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.irreversible(function(cb) {
			cb(_gthis.handler(_gthis.effect,function(report) {
				var self = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,report);
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				})));
			}));
		}))));
		return this1;
	}
	,handler: function(self,cont) {
		var _g = $bind(this,this.handler);
		var cont1 = cont;
		var f = function(self) {
			return _g(self,cont1);
		};
		switch(self._hx_index) {
		case 0:
			var _g1 = self.o;
			var next = self.next;
			return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.irreversible(function(cb) {
				cb(f(next));
			}))));
		case 1:
			var tran = self.tran;
			return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.irreversible(function(cb) {
				cb(f(tran(stx_coroutine_core_ControlSum.Push(null))));
			}))));
		case 2:
			var held = self.held;
			var this1 = eu_ohmrun_FletcherLift.map(held,f);
			var provide = this1;
			var this1 = eu_ohmrun_Fletcher._.environment(eu_ohmrun_fletcher_ProvideLift.then(provide,eu_ohmrun_Fletcher.Anon(function(inpt,cont) {
				var this1 = inpt;
				var self = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,null);
				var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_Settle._.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				return stx_stream_WorkLift.seq(this1,this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = self;
					return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						oc.handle(function(out) {
							ip.trigger(out);
						});
						var this1 = null;
						return this1;
					})));
				}))));
			})),null,function(o) {
			},function(e) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var fn = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(6);
					});
				};
				(function(value,pos) {
					this1(value,fn(pos));
				})(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 75, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "environment"}));
				throw haxe_Exception.thrown(e);
			});
			var this2 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
				return fn(new tink_core_FutureTrigger());
			}));
			return stx_stream_Work.toCycle(this1.defer(null,this2));
		case 3:
			var _g1 = self.r;
			switch(_g1._hx_index) {
			case 0:
				var _g2 = _g1.c;
				switch(_g2._hx_index) {
				case 0:
					var f1 = null;
					cont(f1 == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f1(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 114, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"}))));
					return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
				case 1:
					var rejection = _g2.err;
					var _ = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 117, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"});
					cont(stx_nano_Report.pure(rejection));
					return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
				}
				break;
			case 1:
				var _g2 = _g1.v;
				var f1 = null;
				cont(f1 == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f1(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 111, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"}))));
				return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
			}
			break;
		}
	}
	,__class__: stx_coroutine_pack_EffectExecute
});
var stx_coroutine_pack_EmiterLift = function() { };
$hxClasses["stx.coroutine.pack.EmiterLift"] = stx_coroutine_pack_EmiterLift;
stx_coroutine_pack_EmiterLift.__name__ = "stx.coroutine.pack.EmiterLift";
stx_coroutine_pack_EmiterLift.lift = function(self) {
	return stx_coroutine_pack_Emiter.lift(self);
};
stx_coroutine_pack_EmiterLift.reduce = function(source,fn,memo) {
	var f = function(source,memo) {
		return stx_coroutine_pack_EmiterLift.reduce(source,fn,memo);
	};
	var c = function(memo) {
		var memo1 = memo;
		return function(source) {
			return f(source,memo1);
		};
	};
	var tmp;
	switch(source._hx_index) {
	case 0:
		var head = source.o;
		var rest = source.next;
		tmp = stx_coroutine_core_CoroutineLift.mod(rest,function(spx) {
			return stx_coroutine_pack_Derive.toCoroutine(f(stx_coroutine_pack_Emiter.fromCoroutine(spx),fn(head,memo)));
		});
		break;
	case 1:
		var arw = source.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,c(memo)));
		break;
	case 2:
		var ft = source.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(c(memo)))));
		break;
	case 3:
		var _g = source.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			break;
		case 1:
			if(_g.v == null) {
				tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(memo));
			} else {
				throw haxe_Exception.thrown("Pattern match regression 062020");
			}
			break;
		}
		break;
	}
	return stx_coroutine_pack_Derive.lift(tmp);
};
stx_coroutine_pack_EmiterLift.toArray = function(emt) {
	return stx_coroutine_pack_EmiterLift.reduce(emt,function(next,memo) {
		return memo.concat([next]);
	},[]);
};
stx_coroutine_pack_EmiterLift.append = function(prc0,prc1) {
	var prc11 = prc1;
	var f = function(prc0) {
		return stx_coroutine_pack_EmiterLift.append(prc0,prc11);
	};
	switch(prc0._hx_index) {
	case 0:
		var head = prc0.o;
		var rest = prc0.next;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
	case 1:
		var arw = prc0.tran;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
	case 2:
		var ft = prc0.held;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var _g = prc0.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
		case 1:
			if(_g.v == null) {
				return prc1();
			} else {
				throw haxe_Exception.thrown("Pattern match regression 30/06/2020");
			}
			break;
		}
		break;
	}
};
stx_coroutine_pack_EmiterLift.flat_map = function(prc,fn) {
	var fn1 = fn;
	var f = function(prc) {
		return stx_coroutine_pack_EmiterLift.flat_map(prc,fn1);
	};
	switch(prc._hx_index) {
	case 0:
		var head = prc.o;
		var rest = prc.next;
		var tmp = fn(head);
		var _g = f;
		var prc1 = stx_coroutine_pack_Emiter.fromCoroutine(rest);
		return stx_coroutine_pack_EmiterLift.append(tmp,function() {
			return _g(prc1);
		});
	case 1:
		var arw = prc.tran;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
	case 2:
		var ft = prc.held;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var e = prc.r;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(e));
	}
};
stx_coroutine_pack_EmiterLift.search = function(self,prd) {
	var f = function(self) {
		return stx_coroutine_pack_EmiterLift.search(self,prd);
	};
	switch(self._hx_index) {
	case 0:
		var _g = self.o;
		var _g1 = self.next;
		var head = _g;
		var rest = _g1;
		if(prd(head)) {
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.Some(head))));
		} else {
			var head = _g;
			var rest = _g1;
			var prd1 = prd;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineLift.mod(rest,function(self) {
				return stx_coroutine_pack_EmiterLift.search(self,prd1);
			}));
		}
		break;
	case 1:
		var fn = self.tran;
		return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f)));
	case 2:
		var ft = self.held;
		return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
		case 1:
			var v = _g.v;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.None)));
		}
		break;
	}
};
stx_coroutine_pack_EmiterLift.first = function(self) {
	return stx_coroutine_pack_EmiterLift.search(self,function(v) {
		return true;
	});
};
stx_coroutine_pack_EmiterLift.last = function(self) {
	var recurse = null;
	recurse = function(self,lst) {
		var lst1 = lst;
		var f = function(self) {
			return recurse(self,lst1);
		};
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			var lst2 = haxe_ds_Option.Some(head);
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineLift.mod(rest,function(self) {
				return recurse(self,lst2);
			}));
		case 1:
			var fn = self.tran;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f)));
		case 2:
			var ft = self.held;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
			case 1:
				if(_g.v == null) {
					var v = lst;
					return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(v)));
				} else {
					var v = lst;
					return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(v)));
				}
				break;
			}
			break;
		}
	};
	return recurse(self,haxe_ds_Option.None);
};
stx_coroutine_pack_EmiterLift.at = function(self,index) {
	var recurse = null;
	recurse = function(self,count) {
		if(count == null) {
			count = 0;
		}
		var f = function(int) {
			var count = int;
			return function(self) {
				return recurse(self,count);
			};
		};
		var c = f(count);
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var _g1 = self.next;
			var head = _g;
			var tail = _g1;
			if(index == count) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.Some(head)));
			} else {
				var head = _g;
				var tail = _g1;
				return stx_coroutine_core_CoroutineLift.mod(tail,f(count + 1));
			}
			break;
		case 1:
			var fn = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,c));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(c))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var _g1 = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.None));
			}
			break;
		}
	};
	return recurse(self);
};
stx_coroutine_pack_EmiterLift.count = function(self) {
	return stx_coroutine_pack_EmiterLift.reduce(self,function(next,memo) {
		return memo++;
	},0);
};
stx_coroutine_pack_EmiterLift.until = function(self,prd) {
	var recurse = null;
	recurse = function(self,cont) {
		var cont1 = cont;
		var f = function(self) {
			return recurse(self,cont1);
		};
		if(cont) {
			switch(self._hx_index) {
			case 0:
				var head = self.o;
				var tail = self.next;
				return stx_coroutine_core_CoroutineLift.mod(tail,function(self) {
					return recurse(self,!prd(head));
				});
			case 1:
				var fn = self.tran;
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
			case 2:
				var ft = self.held;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
			case 3:
				var v = self.r;
				return stx_coroutine_core_CoroutineSum.Halt(v);
			}
		} else {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(null));
		}
	};
	return recurse(self,true);
};
stx_coroutine_pack_EmiterLift.take = function(self,max) {
	var recurse = null;
	recurse = function(self,n) {
		var f = function(n) {
			var n1 = n;
			return function(self) {
				return recurse(self,n1);
			};
		};
		if(n >= max) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(null));
		} else {
			switch(self._hx_index) {
			case 0:
				var head = self.o;
				var tail = self.next;
				return stx_coroutine_core_CoroutineSum.Emit(head,(f(n++))(tail));
			case 1:
				var fn = self.tran;
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f(n)));
			case 2:
				var ft = self.held;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f(n)))));
			case 3:
				var out = self.r;
				return stx_coroutine_core_CoroutineSum.Halt(out);
			}
		}
	};
	return recurse(self,1);
};
stx_coroutine_pack_EmiterLift.cons = function(self,v) {
	return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(v,self));
};
stx_coroutine_pack_EmiterLift.snoc = function(self,o) {
	var o1 = o;
	var f = function(self) {
		return stx_coroutine_pack_EmiterLift.snoc(self,o1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
	case 1:
		var fn = self.tran;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f)));
	case 2:
		var ft = self.held;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return self;
		case 1:
			if(_g.v == null) {
				return stx_coroutine_pack_EmiterLift.cons(self,o);
			} else {
				return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)));
			}
			break;
		}
		break;
	}
};
stx_coroutine_pack_EmiterLift.span = function(last,start) {
	if(start == null) {
		start = 0;
	}
	var val = start;
	var recurse = null;
	recurse = function(_) {
		if(val == last) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(null));
		} else {
			val += 1;
			return stx_coroutine_core_CoroutineSum.Emit(val - 1,stx_coroutine_core_CoroutineSum.Wait(recurse));
		}
	};
	return stx_coroutine_core_CoroutineSum.Wait(recurse);
};
stx_coroutine_pack_EmiterLift.filter = function(self,prd) {
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_pack_Source._.filter(stx_coroutine_pack_Source.lift(self),prd));
};
stx_coroutine_pack_EmiterLift.secure = function(self,next) {
	var recurse = null;
	recurse = function(self,next) {
		var next1 = next;
		var fl = function(self) {
			return recurse(self,next1);
		};
		var recurse1;
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var _g1 = self.next;
			switch(next._hx_index) {
			case 0:
				var head = next.o;
				var tail = next.next;
				recurse1 = recurse(self,tail);
				break;
			case 1:
				var fn = next.tran;
				var tail = _g1;
				var head = _g;
				recurse1 = recurse(tail,fn(stx_coroutine_core_ControlSum.Push(head)));
				break;
			case 2:
				var ft = next.held;
				var self1 = self;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(next) {
					return recurse(self1,next);
				}))));
				break;
			case 3:
				var out = next.r;
				recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
				break;
			}
			break;
		case 1:
			var _g = self.tran;
			switch(next._hx_index) {
			case 0:
				var _g1 = next.o;
				var _g1 = next.next;
				var fn = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,fl));
				break;
			case 2:
				var _g1 = next.held;
				var fn = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,fl));
				break;
			case 3:
				var out = next.r;
				recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
				break;
			default:
				var fn = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,fl));
			}
			break;
		case 2:
			var _g = self.held;
			switch(next._hx_index) {
			case 0:
				var _g1 = next.o;
				var _g1 = next.next;
				var ft = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(fl))));
				break;
			case 2:
				var _g1 = next.held;
				var ft = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(fl))));
				break;
			case 3:
				var out = next.r;
				recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
				break;
			default:
				var ft = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(fl))));
			}
			break;
		case 3:
			var out = self.r;
			recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
			break;
		}
		return stx_coroutine_pack_Effect.toCoroutine(stx_coroutine_pack_Effect.lift(recurse1));
	};
	return stx_coroutine_pack_Effect.fromCoroutine(recurse(stx_coroutine_pack_Emiter.toCoroutine(self),stx_coroutine_pack_Secure.toCoroutine(next)));
};
stx_coroutine_pack_EmiterLift.sample = function(self,fn,init) {
	var data = init;
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var step = fn(o,data);
			switch(step._hx_index) {
			case 0:
				var v = step.v;
				data = v;
				return rec(next);
			case 1:
				return rec(next);
			case 2:
				var _g = step.err;
				if(_g == null) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(data));
				} else {
					var err = _g;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(err)));
				}
				break;
			}
			break;
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,rec));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.c;
				if(_g1._hx_index == 0) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(data));
				} else {
					var r = _g1;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(r));
				}
				break;
			case 1:
				var r = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(data));
			}
			break;
		}
	};
	return stx_coroutine_pack_Source.fromCoroutine(rec(self));
};
stx_coroutine_pack_EmiterLift.derive = function(self,pure,plus,zero) {
	var value = zero;
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			value = plus(pure(o),zero);
			var self1 = next;
			return stx_coroutine_core_CoroutineSum.Emit(null,stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
				return f(self1);
			})));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var _g1 = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(value));
			}
			break;
		}
	};
	return stx_coroutine_pack_Derive.fromCoroutine(f(self));
};
var stx_coroutine_pack_Emiter = {};
stx_coroutine_pack_Emiter._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Emiter.lift = function(self) {
	return stx_coroutine_pack_Emiter._new(self);
};
stx_coroutine_pack_Emiter.pure = function(self) {
	return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(self,stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(null))));
};
stx_coroutine_pack_Emiter.unit = function() {
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,function(_) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		},function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Emiter.fromOption = function(opt) {
	var tmp;
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		tmp = stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)),v);
		break;
	case 1:
		tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		break;
	}
	return stx_coroutine_pack_Emiter.lift(tmp);
};
stx_coroutine_pack_Emiter.fromThunk = function(thk) {
	var recurse = null;
	recurse = function() {
		return stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_Held.lazy(recurse),thk());
	};
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_core_Held.lazy(recurse));
};
stx_coroutine_pack_Emiter.fromIterator = function(iter) {
	var recurse = null;
	recurse = function() {
		if(iter.hasNext()) {
			return stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_Held.lazy(recurse),iter.next());
		} else {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		}
	};
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_core_Held.lazy(recurse));
};
stx_coroutine_pack_Emiter.fromSignal = function(self) {
	return stx_coroutine_pack_Emiter.fromTinkSignal(stx_nano_Signal.prj(self));
};
stx_coroutine_pack_Emiter.fromTinkSignal = function(self) {
	var buffer = [];
	var wake = function() {
		return;
	};
	self.listen(function(x) {
		buffer.push(x);
		wake();
	});
	var rec = null;
	rec = function(cb) {
		var head = buffer.shift();
		var this1 = new tink_core__$Future_SuspendableFuture(rec);
		var f = stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(this1,{ fileName : "stx/coroutine/pack/Emiter.hx", lineNumber : 66, className : "stx.coroutine.pack._Emiter.Emiter_Impl_", methodName : "fromTinkSignal"})));
		if(buffer.length == 0) {
			wake = function() {
				wake = function() {
				};
				cb(f);
			};
		} else {
			cb(f);
		}
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	};
	var this1 = new tink_core__$Future_SuspendableFuture(rec);
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(this1,{ fileName : "stx/coroutine/pack/Emiter.hx", lineNumber : 63, className : "stx.coroutine.pack._Emiter.Emiter_Impl_", methodName : "fromTinkSignal"}));
};
stx_coroutine_pack_Emiter.fromCoroutine = function(self) {
	return stx_coroutine_pack_Emiter.lift(self);
};
stx_coroutine_pack_Emiter.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Emiter.ints = function() {
	var val = 0;
	var go = function() {
		var o = val;
		val += 1;
		return o;
	};
	return stx_coroutine_pack_Emiter.fromThunk(go);
};
stx_coroutine_pack_Emiter.timestamp = function() {
	return stx_coroutine_pack_Emiter.fromThunk(haxe_Timer.stamp);
};
stx_coroutine_pack_Emiter.one = function() {
	return stx_coroutine_pack_Emiter.fromThunk(function() {
		return 1;
	});
};
var stx_coroutine_pack_RelateLift = function() { };
$hxClasses["stx.coroutine.pack.RelateLift"] = stx_coroutine_pack_RelateLift;
stx_coroutine_pack_RelateLift.__name__ = "stx.coroutine.pack.RelateLift";
stx_coroutine_pack_RelateLift.toTunnel = function(self) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var next = self.next;
			return rec(next);
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,rec));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var out = _g.v;
				return stx_coroutine_core_CoroutineSum.Emit(out,stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Tunnel.fromCoroutine(rec(self));
};
stx_coroutine_pack_RelateLift.derive = function(self) {
	var rec = null;
	rec = function(self) {
		var f = rec;
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var r = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(r);
		}
	};
	return stx_coroutine_pack_Derive.lift(rec(self));
};
var stx_coroutine_pack_Relate = {};
stx_coroutine_pack_Relate.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Relate._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Relate.unit = function() {
	var recurse = null;
	recurse = function(v) {
		var fn = recurse;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		}));
	};
	var fn = recurse;
	return stx_coroutine_pack_Relate.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Relate.pure = function(r) {
	return stx_coroutine_pack_Relate.lift(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r)));
};
stx_coroutine_pack_Relate.fromFun1R = function(fn) {
	var fn1 = function(x) {
		return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(fn(x)));
	};
	return stx_coroutine_pack_Relate.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
var stx_coroutine_pack_SecureLift = function() { };
$hxClasses["stx.coroutine.pack.SecureLift"] = stx_coroutine_pack_SecureLift;
stx_coroutine_pack_SecureLift.__name__ = "stx.coroutine.pack.SecureLift";
stx_coroutine_pack_SecureLift.close = function(self) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var r = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(r);
		}
	};
	return stx_coroutine_pack_Effect.lift(f(self));
};
var stx_coroutine_pack_Secure = {};
stx_coroutine_pack_Secure.lift = function(self) {
	return stx_coroutine_pack_Secure._new(self);
};
stx_coroutine_pack_Secure._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Secure.handler = function(fn) {
	var rec = null;
	rec = function(o) {
		fn(o);
		var fn1 = rec;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		}));
	};
	var fn1 = rec;
	return stx_coroutine_pack_Secure.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Secure.nowhere = function() {
	return stx_coroutine_pack_Secure.handler(function(x) {
	});
};
stx_coroutine_pack_Secure.provide = function(this1,v) {
	return stx_coroutine_pack_Secure.lift(stx_coroutine_core_Coroutine._.provide(this1,v));
};
stx_coroutine_pack_Secure.fromHandler = function(fn) {
	return stx_coroutine_pack_Secure.handler(fn);
};
stx_coroutine_pack_Secure.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Secure.fromCoroutine = function(self) {
	return stx_coroutine_pack_Secure.lift(self);
};
var stx_coroutine_pack_SourceLift = function() { };
$hxClasses["stx.coroutine.pack.SourceLift"] = stx_coroutine_pack_SourceLift;
stx_coroutine_pack_SourceLift.__name__ = "stx.coroutine.pack.SourceLift";
stx_coroutine_pack_SourceLift.lift = function(self) {
	return stx_coroutine_pack_Source.lift(self);
};
stx_coroutine_pack_SourceLift.toEmiter = function(self,cb) {
	var recurse = null;
	recurse = function(self) {
		var f = recurse;
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
		case 1:
			var arw = self.tran;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
		case 2:
			var ft = self.held;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
			case 1:
				var ret = _g.v;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)),cb(ret)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Emiter.lift(recurse(self));
};
stx_coroutine_pack_SourceLift.emiter = function(self,cb) {
	var recurse = null;
	recurse = function(self) {
		var f = recurse;
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
		case 1:
			var arw = self.tran;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
		case 2:
			var ft = self.held;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
			case 1:
				var ret = _g.v;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)),cb(ret)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Emiter.lift(recurse(self));
};
stx_coroutine_pack_SourceLift.filter = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_pack_SourceLift.filter(self,fn1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		tmp = fn(head) ? stx_coroutine_core_CoroutineSum.Emit(head,f(tail)) : stx_coroutine_core_CoroutineLift.mod(tail,f);
		break;
	case 1:
		var fn = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var t = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(t);
		break;
	}
	return stx_coroutine_pack_SourceLift.lift(tmp);
};
stx_coroutine_pack_SourceLift.map_filter = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_pack_SourceLift.map_filter(self,fn1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		var _g = fn(head);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			tmp = stx_coroutine_core_CoroutineSum.Emit(v,f(tail));
			break;
		case 1:
			tmp = f(tail);
			break;
		}
		break;
	case 1:
		var arw = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var t = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(t);
		break;
	}
	return stx_coroutine_pack_SourceLift.lift(tmp);
};
stx_coroutine_pack_SourceLift.derive = function(self) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var _m = self.o;
			var tail = self.next;
			return f(tail);
		case 1:
			var arw = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var h = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(h);
		}
	};
	return stx_coroutine_pack_Derive.lift(f(self));
};
var stx_coroutine_pack_Source = {};
stx_coroutine_pack_Source.lift = function(self) {
	return stx_coroutine_pack_Source._new(self);
};
stx_coroutine_pack_Source._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Source.fromCoroutine = function(self) {
	return stx_coroutine_pack_Source.lift(self);
};
stx_coroutine_pack_Source.toCoroutine = function(this1) {
	return this1;
};
var stx_coroutine_pack_TunnelLift = function() { };
$hxClasses["stx.coroutine.pack.TunnelLift"] = stx_coroutine_pack_TunnelLift;
stx_coroutine_pack_TunnelLift.__name__ = "stx.coroutine.pack.TunnelLift";
stx_coroutine_pack_TunnelLift.lift = function(self) {
	return stx_coroutine_pack_Tunnel.lift(self);
};
stx_coroutine_pack_TunnelLift.append = function(prc0,prc1) {
	switch(prc0._hx_index) {
	case 0:
		var head = prc0.o;
		var tail = prc0.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_pack_Tunnel.toCoroutine(stx_coroutine_pack_TunnelLift.append(stx_coroutine_pack_Tunnel.fromCoroutine(tail),prc1)));
	case 1:
		var arw = prc0.tran;
		var prc11 = prc1;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,function(prc0) {
			return stx_coroutine_pack_TunnelLift.append(prc0,prc11);
		}));
	case 2:
		var ft = prc0.held;
		var prc12 = prc1;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(prc0) {
			return stx_coroutine_pack_TunnelLift.append(prc0,prc12);
		}))));
	case 3:
		var _g = prc0.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
		case 1:
			if(_g.v == null) {
				return prc1();
			} else {
				var e = _g;
				return stx_coroutine_core_CoroutineSum.Halt(e);
			}
			break;
		}
		break;
	}
};
stx_coroutine_pack_TunnelLift.flat_map = function(prc,fn) {
	var tmp;
	switch(prc._hx_index) {
	case 0:
		var head = prc.o;
		var tail = prc.next;
		var tmp1 = fn(head);
		var prc1 = stx_coroutine_pack_Tunnel.fromCoroutine(tail);
		var fn1 = fn;
		tmp = stx_coroutine_pack_TunnelLift.append(tmp1,function() {
			return stx_coroutine_pack_TunnelLift.flat_map(prc1,fn1);
		});
		break;
	case 1:
		var arw = prc.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(function(i) {
			var next = arw(i);
			return stx_coroutine_pack_Tunnel.toCoroutine(stx_coroutine_pack_TunnelLift.flat_map(stx_coroutine_pack_Tunnel.fromCoroutine(next),fn));
		});
		break;
	case 2:
		var ft = prc.held;
		var fn2 = fn;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(prc) {
			return stx_coroutine_pack_TunnelLift.flat_map(prc,fn2);
		}))));
		break;
	case 3:
		var e = prc.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(e);
		break;
	}
	return stx_coroutine_pack_TunnelLift.lift(tmp);
};
stx_coroutine_pack_TunnelLift.emiter = function(self,that) {
	var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("emiter: " + Std.string(self))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 94, className : "stx.coroutine.pack.TunnelLift", methodName : "emiter"}));
	var that1 = that;
	var f = function(self) {
		return stx_coroutine_pack_TunnelLift.emiter(self,that1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		tmp = stx_coroutine_core_CoroutineSum.Emit(head,f(stx_coroutine_pack_Tunnel.fromCoroutine(tail)));
		break;
	case 1:
		var fn1 = self.tran;
		switch(that._hx_index) {
		case 0:
			var head = that.o;
			var tail = that.next;
			tmp = stx_coroutine_pack_TunnelLift.emiter(stx_coroutine_pack_Tunnel.fromCoroutine(fn1(stx_coroutine_core_Control.push(head))),stx_coroutine_pack_Emiter.fromCoroutine(tail));
			break;
		case 1:
			var arw = that.tran;
			tmp = stx_coroutine_pack_TunnelLift.emiter(self,stx_coroutine_pack_Emiter.fromCoroutine(arw(stx_coroutine_core_ControlSum.Push(null))));
			break;
		case 2:
			var ft = that.held;
			tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(ft,function(pipe) {
				return stx_coroutine_core_Coroutine.lift(stx_coroutine_pack_TunnelLift.emiter(self,stx_coroutine_pack_Emiter.fromCoroutine(pipe)));
			})));
			break;
		case 3:
			var done = that.r;
			tmp = stx_coroutine_core_CoroutineSum.Halt(done);
			break;
		}
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(ft,function(pipe) {
			return stx_coroutine_core_Coroutine.lift(stx_coroutine_pack_TunnelLift.emiter(stx_coroutine_pack_Tunnel.fromCoroutine(pipe),that));
		})));
		break;
	case 3:
		var e = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(e);
		break;
	}
	return stx_coroutine_pack_Emiter.lift(tmp);
};
stx_coroutine_pack_TunnelLift.demand = function(self,req,fn) {
	var source = stx_nano_Pledge.trigger();
	var sent = false;
	var done = false;
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			if(sent) {
				if(!done) {
					return stx_LiftIf.if_else(fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o)),function() {
						done = true;
						return next;
					},function() {
						return f(next);
					});
				} else {
					return next;
				}
			} else {
				return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
			}
			break;
		case 1:
			var tran = self.tran;
			if(!sent) {
				sent = true;
				return f(tran(stx_coroutine_core_Control.push(req)));
			} else {
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
			}
			break;
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.c;
				switch(_g1._hx_index) {
				case 0:
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
				case 1:
					var e = _g1.err;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
				}
				break;
			case 1:
				var _g1 = _g.v;
				if(!done) {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 148, className : "stx.coroutine.pack.TunnelLift", methodName : "demand"});
					var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
					var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
						return stx_nano_Rejection.prj(x);
					});
					if(data == null) {
						data = haxe_ds_Option.None;
					}
					if(lst == null) {
						lst = haxe_ds_Option.None;
					}
					var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
					var err = this2;
					fn(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err));
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(err)));
				} else {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(null));
				}
				break;
			}
			break;
		}
	};
	return stx_coroutine_pack_Tunnel.lift(f(self));
};
var stx_coroutine_pack_Tunnel = {};
stx_coroutine_pack_Tunnel._new = function(self) {
	var this1 = self;
	return this1;
};
stx_coroutine_pack_Tunnel.lift = function(self) {
	return stx_coroutine_pack_Tunnel._new(self);
};
stx_coroutine_pack_Tunnel.fromFun2CallbackVoid = function(arw) {
	var rec = null;
	rec = function(i) {
		var future = new tink_core_FutureTrigger();
		arw(i,function(o) {
			var fn = rec;
			future.trigger(stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
				return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
				},function() {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
				});
			}))));
		});
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(future,{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 22, className : "stx.coroutine.pack._Tunnel.Tunnel_Impl_", methodName : "fromFun2CallbackVoid"}));
	};
	var fn = rec;
	return stx_coroutine_pack_Tunnel.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Tunnel.fromEmiterConstrucor = function(cons) {
	var fn = function(i) {
		var recurse = null;
		recurse = function(emiter) {
			switch(emiter._hx_index) {
			case 0:
				var head = emiter.o;
				var tail = emiter.next;
				return stx_coroutine_core_CoroutineSum.Emit(head,recurse(stx_coroutine_pack_Emiter.fromCoroutine(tail)));
			case 1:
				var fn = emiter.tran;
				var fn = stx_fn_UnaryLift.then(cons,recurse);
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
					return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
					},function() {
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					});
				}));
			case 2:
				var h = emiter.held;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(h,function(pipe) {
					return stx_coroutine_core_Coroutine.lift(recurse(stx_coroutine_pack_Emiter.fromCoroutine(pipe)));
				})));
			case 3:
				var r = emiter.r;
				return stx_coroutine_core_CoroutineSum.Halt(r);
			}
		};
		return recurse(cons(i));
	};
	return stx_coroutine_pack_Tunnel.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Tunnel.fromFunction = function(fn) {
	var rec = null;
	rec = function(i) {
		var head = fn(i);
		var fn1 = rec;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		})));
	};
	var fn1 = rec;
	return stx_coroutine_pack_Tunnel.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Tunnel.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Tunnel.fromCoroutine = function(self) {
	return stx_coroutine_pack_Tunnel.lift(self);
};
stx_coroutine_pack_Tunnel.prj = function(this1) {
	return this1;
};
var stx_fail_AssertFailure = $hxEnums["stx.fail.AssertFailure"] = { __ename__:"stx.fail.AssertFailure",__constructs__:null
	,PredicateFailed: ($_=function(type,valueN,value0) { return {_hx_index:0,type:type,valueN:valueN,value0:value0,__enum__:"stx.fail.AssertFailure",toString:$estr}; },$_._hx_name="PredicateFailed",$_.__params__ = ["type","valueN","value0"],$_)
};
stx_fail_AssertFailure.__constructs__ = [stx_fail_AssertFailure.PredicateFailed];
var stx_fail_LogFailure = $hxEnums["stx.fail.LogFailure"] = { __ename__:"stx.fail.LogFailure",__constructs__:null
	,E_Log_UnderLogLevel: {_hx_name:"E_Log_UnderLogLevel",_hx_index:0,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_SourceNotInPackage: ($_=function(source,dir) { return {_hx_index:1,source:source,dir:dir,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_SourceNotInPackage",$_.__params__ = ["source","dir"],$_)
	,E_Log_NotLine: ($_=function(n) { return {_hx_index:2,n:n,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotLine",$_.__params__ = ["n"],$_)
	,E_Log_NotOfRange: ($_=function(l,r) { return {_hx_index:3,l:l,r:r,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotOfRange",$_.__params__ = ["l","r"],$_)
	,E_Log_NotInMethod: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotInMethod",$_.__params__ = ["str"],$_)
	,E_Log_DoesNotContainTag: ($_=function(tag) { return {_hx_index:5,tag:tag,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_DoesNotContainTag",$_.__params__ = ["tag"],$_)
	,E_Log_Not: {_hx_name:"E_Log_Not",_hx_index:6,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_LosesRace: {_hx_name:"E_Log_LosesRace",_hx_index:7,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_Default: ($_=function(data) { return {_hx_index:8,data:data,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_Default",$_.__params__ = ["data"],$_)
	,E_Log_Zero: {_hx_name:"E_Log_Zero",_hx_index:9,__enum__:"stx.fail.LogFailure",toString:$estr}
};
stx_fail_LogFailure.__constructs__ = [stx_fail_LogFailure.E_Log_UnderLogLevel,stx_fail_LogFailure.E_Log_SourceNotInPackage,stx_fail_LogFailure.E_Log_NotLine,stx_fail_LogFailure.E_Log_NotOfRange,stx_fail_LogFailure.E_Log_NotInMethod,stx_fail_LogFailure.E_Log_DoesNotContainTag,stx_fail_LogFailure.E_Log_Not,stx_fail_LogFailure.E_Log_LosesRace,stx_fail_LogFailure.E_Log_Default,stx_fail_LogFailure.E_Log_Zero];
var stx_fail_SchemaFailure = $hxEnums["stx.fail.SchemaFailure"] = { __ename__:"stx.fail.SchemaFailure",__constructs__:null
	,E_Schema_EnumValueError: ($_=function(should_be,actual) { return {_hx_index:0,should_be:should_be,actual:actual,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_EnumValueError",$_.__params__ = ["should_be","actual"],$_)
	,E_Schema_HaxeTypeError: ($_=function(should_be,actual) { return {_hx_index:1,should_be:should_be,actual:actual,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_HaxeTypeError",$_.__params__ = ["should_be","actual"],$_)
	,E_Schema_ValidationError: ($_=function(validation,caught) { return {_hx_index:2,validation:validation,caught:caught,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_ValidationError",$_.__params__ = ["validation","caught"],$_)
	,E_Schema_Dynamic: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_Dynamic",$_.__params__ = ["e"],$_)
	,E_Schema_WrongSchemaType: ($_=function(type) { return {_hx_index:4,type:type,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_WrongSchemaType",$_.__params__ = ["type"],$_)
	,E_Schema_WrongType: ($_=function(type) { return {_hx_index:5,type:type,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_WrongType",$_.__params__ = ["type"],$_)
	,E_Schema_UnexpectedGeneric: {_hx_name:"E_Schema_UnexpectedGeneric",_hx_index:6,__enum__:"stx.fail.SchemaFailure",toString:$estr}
	,E_Schema_UnexpectedType: {_hx_name:"E_Schema_UnexpectedType",_hx_index:7,__enum__:"stx.fail.SchemaFailure",toString:$estr}
	,E_Schema_IdentityUnresolved: ($_=function(identity) { return {_hx_index:8,identity:identity,__enum__:"stx.fail.SchemaFailure",toString:$estr}; },$_._hx_name="E_Schema_IdentityUnresolved",$_.__params__ = ["identity"],$_)
};
stx_fail_SchemaFailure.__constructs__ = [stx_fail_SchemaFailure.E_Schema_EnumValueError,stx_fail_SchemaFailure.E_Schema_HaxeTypeError,stx_fail_SchemaFailure.E_Schema_ValidationError,stx_fail_SchemaFailure.E_Schema_Dynamic,stx_fail_SchemaFailure.E_Schema_WrongSchemaType,stx_fail_SchemaFailure.E_Schema_WrongType,stx_fail_SchemaFailure.E_Schema_UnexpectedGeneric,stx_fail_SchemaFailure.E_Schema_UnexpectedType,stx_fail_SchemaFailure.E_Schema_IdentityUnresolved];
var stx_fail_TestFailureSum = $hxEnums["stx.fail.TestFailureSum"] = { __ename__:"stx.fail.TestFailureSum",__constructs__:null
	,NullTestFailure: {_hx_name:"NullTestFailure",_hx_index:0,__enum__:"stx.fail.TestFailureSum",toString:$estr}
	,WhileAsserting: ($_=function(description,failure) { return {_hx_index:1,description:description,failure:failure,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="WhileAsserting",$_.__params__ = ["description","failure"],$_)
	,TestFailedBecause: ($_=function(str) { return {_hx_index:2,str:str,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="TestFailedBecause",$_.__params__ = ["str"],$_)
	,TestTimedOut: ($_=function(after) { return {_hx_index:3,after:after,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="TestTimedOut",$_.__params__ = ["after"],$_)
	,NoTestNamed: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="NoTestNamed",$_.__params__ = ["name"],$_)
	,E_Test_Exception: ($_=function(e) { return {_hx_index:5,e:e,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_Exception",$_.__params__ = ["e"],$_)
	,E_Test_Rejection: ($_=function(err) { return {_hx_index:6,err:err,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_Rejection",$_.__params__ = ["err"],$_)
};
stx_fail_TestFailureSum.__constructs__ = [stx_fail_TestFailureSum.NullTestFailure,stx_fail_TestFailureSum.WhileAsserting,stx_fail_TestFailureSum.TestFailedBecause,stx_fail_TestFailureSum.TestTimedOut,stx_fail_TestFailureSum.NoTestNamed,stx_fail_TestFailureSum.E_Test_Exception,stx_fail_TestFailureSum.E_Test_Rejection];
var stx_fail_TestFailure = {};
stx_fail_TestFailure.__properties__ = {get_stack:"get_stack",get_self:"get_self"};
stx_fail_TestFailure._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fail_TestFailure.lift = function(self) {
	return stx_fail_TestFailure._new(self);
};
stx_fail_TestFailure.prj = function(this1) {
	return this1;
};
stx_fail_TestFailure.get_self = function(this1) {
	return stx_fail_TestFailure.lift(this1);
};
stx_fail_TestFailure.toString = function(this1) {
	switch(this1._hx_index) {
	case 5:
		var e = this1.e;
		return e.toString();
	case 6:
		var e = this1.err;
		return e.toString();
	default:
		return Std.string(this1);
	}
};
stx_fail_TestFailure.get_stack = function(this1) {
	switch(this1._hx_index) {
	case 5:
		var e = this1.e;
		return e.get_stack();
	case 6:
		var e = this1.err;
		return e.get_stack();
	default:
		return null;
	}
};
var stx_fn_BinaryLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.BinaryLift"] = stx_fn_BinaryLift;
stx_fn_BinaryLift.__name__ = "stx.fn.BinaryLift";
stx_fn_BinaryLift.then = function(self,that) {
	return function(pI,pII) {
		return that(self(pI,pII));
	};
};
stx_fn_BinaryLift.braid = function(self,pI,pII) {
	return self(pI,pII);
};
stx_fn_BinaryLift.rotate = function(self) {
	return function(pII,pI) {
		return self(pI,pII);
	};
};
stx_fn_BinaryLift.swap = function(self) {
	return function(pII,pI) {
		return self(pI,pII);
	};
};
stx_fn_BinaryLift.curry = function(self) {
	return function(pI) {
		return function(pII) {
			return self(pI,pII);
		};
	};
};
stx_fn_BinaryLift.equals = function(self,that) {
	return self == that;
};
stx_fn_BinaryLift.bindPi = function(self,pI) {
	var fn = self;
	var _g = fn;
	var a1 = pI;
	return function(a2) {
		return _g(a1,a2);
	};
};
stx_fn_BinaryLift.bindPii = function(pII,self) {
	var fn = self;
	var _g = fn;
	var a2 = pII;
	return function(a1) {
		return _g(a1,a2);
	};
};
stx_fn_BinaryLift.cache = function(self,pI,pII) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI,pII);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_BinaryLift.pipe = function(self,tp) {
	return function() {
		return stx_nano_CoupleLift.decouple(tp(),self);
	};
};
stx_fn_BinaryLift.encouple = function(self) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,self);
	};
};
stx_fn_BinaryLift.__super__ = stx_pico_Clazz;
stx_fn_BinaryLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_BinaryLift
});
var stx_fn_Binary = {};
stx_fn_Binary._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Binary.prj = function(this1) {
	return this1;
};
var stx_fn_BlockLift = function() { };
$hxClasses["stx.fn.BlockLift"] = stx_fn_BlockLift;
stx_fn_BlockLift.__name__ = "stx.fn.BlockLift";
stx_fn_BlockLift.returning = function(self,r) {
	return function() {
		self();
		return r;
	};
};
stx_fn_BlockLift.equals = function(self,that) {
	return self == that;
};
stx_fn_BlockLift.promote = function(f) {
	return function(p) {
		f();
	};
};
stx_fn_BlockLift.then = function(self,that) {
	return function() {
		self();
		that();
	};
};
stx_fn_BlockLift.enact = function(self) {
	self();
};
var stx_fn_Block = {};
stx_fn_Block._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Block.unit = function() {
	return function() {
	};
};
stx_fn_Block.pure = function(fn) {
	return fn;
};
stx_fn_Block.lift = function(fn) {
	return stx_fn_Block._new(fn);
};
var stx_fn_DualLift = function() { };
$hxClasses["stx.fn.DualLift"] = stx_fn_DualLift;
stx_fn_DualLift.__name__ = "stx.fn.DualLift";
stx_fn_DualLift.then = function(self,then) {
	return stx_fn_Unary._.then(stx_fn_Dual.toUnary(self),then);
};
stx_fn_DualLift.into = function(self,fn) {
	return stx_fn_DualLift.then(self,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,fn));
};
stx_fn_DualLift.pass = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,fn)));
};
stx_fn_DualLift.first = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_fn_UnaryLift.first(fn)));
};
stx_fn_DualLift.second = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_fn_UnaryLift.second(fn)));
};
var stx_fn_Dual = {};
stx_fn_Dual.unit = function() {
	return stx_fn_Dual._new(function(tp) {
		return tp;
	});
};
stx_fn_Dual._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Dual.fromUnary = function(self) {
	return stx_fn_Dual._new(self);
};
stx_fn_Dual.toUnary = function(this1) {
	return this1;
};
var stx_fn_FSum = $hxEnums["stx.fn.FSum"] = { __ename__:"stx.fn.FSum",__constructs__:null
	,F0X: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"stx.fn.FSum",toString:$estr}; },$_._hx_name="F0X",$_.__params__ = ["f"],$_)
	,F1X: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"stx.fn.FSum",toString:$estr}; },$_._hx_name="F1X",$_.__params__ = ["f"],$_)
	,F1R: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"stx.fn.FSum",toString:$estr}; },$_._hx_name="F1R",$_.__params__ = ["f"],$_)
};
stx_fn_FSum.__constructs__ = [stx_fn_FSum.F0X,stx_fn_FSum.F1X,stx_fn_FSum.F1R];
var stx_fn_F = {};
stx_fn_F.__properties__ = {get_self:"get_self"};
stx_fn_F._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_F.lift = function(self) {
	return stx_fn_F._new(self);
};
stx_fn_F.unit = function() {
	return stx_fn_F.lift(stx_fn_FSum.F1X(function(x) {
	}));
};
stx_fn_F.fromF0X = function(fn) {
	return stx_fn_F._new(stx_fn_FSum.F0X(fn));
};
stx_fn_F.fromF1X = function(fn) {
	return stx_fn_F.lift(stx_fn_FSum.F1X(fn));
};
stx_fn_F.fromF1R = function(fn) {
	return stx_fn_F.lift(stx_fn_FSum.F1R(fn));
};
stx_fn_F.toUnary = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var f = this1.f;
		return function(_) {
			f();
			return null;
		};
	case 1:
		var f1 = this1.f;
		return function(x) {
			f1(x);
			return null;
		};
	case 2:
		var f2 = this1.f;
		return function(x) {
			return f2(x);
		};
	}
};
stx_fn_F.prj = function(this1) {
	return this1;
};
stx_fn_F.get_self = function(this1) {
	return stx_fn_F.lift(this1);
};
stx_fn_F.apply = function(this1,pi) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var f = this1.f;
		tmp = function(_) {
			f();
			return null;
		};
		break;
	case 1:
		var f1 = this1.f;
		tmp = function(x) {
			f1(x);
			return null;
		};
		break;
	case 2:
		var f2 = this1.f;
		tmp = function(x) {
			return f2(x);
		};
		break;
	}
	return tmp(pi);
};
var stx_fn_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.Module"] = stx_fn_Module;
stx_fn_Module.__name__ = "stx.fn.Module";
stx_fn_Module.__super__ = stx_pico_Clazz;
stx_fn_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	_1R: function(fn) {
		return fn;
	}
	,__class__: stx_fn_Module
});
var stx_fn_Perhaps = {};
stx_fn_Perhaps._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fn_Pick = {};
stx_fn_Pick._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Pick.leftPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			return fn(v);
		case 1:
			var v = e.v;
			return haxe_ds_Either.Right(v);
		}
	};
};
stx_fn_Pick.rightPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			return haxe_ds_Either.Left(v);
		case 1:
			var v = e.v;
			return fn(v);
		}
	};
};
var stx_fn_SinkLift = function() { };
$hxClasses["stx.fn.SinkLift"] = stx_fn_SinkLift;
stx_fn_SinkLift.__name__ = "stx.fn.SinkLift";
stx_fn_SinkLift.then = function(self,that) {
	var this1 = function(p) {
		self(p);
		that(p);
	};
	return this1;
};
stx_fn_SinkLift.bind = function(self,p) {
	return stx_fn_Block.lift(stx_fn_SinkLift.bind(self,p));
};
stx_fn_SinkLift.promote = function(self,r) {
	return function(p) {
		self(p);
		return r;
	};
};
stx_fn_SinkLift.compose = function(self,fn) {
	return function(pI) {
		self(fn(pI));
	};
};
var stx_fn_Sink = {};
stx_fn_Sink._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Sink.unit = function() {
	var this1 = function(p) {
	};
	return this1;
};
stx_fn_Sink.lift = function(fn) {
	var this1 = fn;
	return this1;
};
stx_fn_Sink.toTinkCallback = function(this1) {
	return this1;
};
stx_fn_Sink.stage = function(this1,before,after) {
	if(before == null) {
		before = function(_) {
		};
	}
	if(after == null) {
		after = function(_) {
		};
	}
	return function(p) {
		before(p);
		this1(p);
		after(p);
	};
};
stx_fn_Sink.prj = function(this1) {
	return this1;
};
var stx_fn_Switch = {};
stx_fn_Switch._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fn_TernaryLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.TernaryLift"] = stx_fn_TernaryLift;
stx_fn_TernaryLift.__name__ = "stx.fn.TernaryLift";
stx_fn_TernaryLift.rotate = function(f) {
	return function(pII,pIII,pI) {
		return f(pI,pII,pIII);
	};
};
stx_fn_TernaryLift.curry = function(f) {
	return function(pI) {
		return function(pII) {
			return function(pIII) {
				return f(pI,pII,pIII);
			};
		};
	};
};
stx_fn_TernaryLift.cache = function(self,pI,pII,pIII) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI,pII,pIII);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_TernaryLift.equals = function(self,that) {
	return self == that;
};
stx_fn_TernaryLift.__super__ = stx_pico_Clazz;
stx_fn_TernaryLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_TernaryLift
});
var stx_fn_Ternary = {};
stx_fn_Ternary._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fn_ThunkLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.ThunkLift"] = stx_fn_ThunkLift;
stx_fn_ThunkLift.__name__ = "stx.fn.ThunkLift";
stx_fn_ThunkLift.reply = function(self) {
	return self();
};
stx_fn_ThunkLift.cache = function(self) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self();
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_ThunkLift.promote = function(self) {
	return function(p) {
		return self();
	};
};
stx_fn_ThunkLift.stage = function(f,before,after) {
	var state = before();
	var result = f();
	after(state);
	return result;
};
stx_fn_ThunkLift.equals = function(that,self) {
	return self == that;
};
stx_fn_ThunkLift.then = function(that,self) {
	return function() {
		return that(self());
	};
};
stx_fn_ThunkLift.__super__ = stx_pico_Clazz;
stx_fn_ThunkLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_ThunkLift
});
var stx_fn_Thunk = {};
stx_fn_Thunk.lift = function(thk) {
	var this1 = thk;
	return this1;
};
stx_fn_Thunk._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Thunk.then = function(this1,that) {
	return stx_fn_Thunk._.then(that,this1);
};
stx_fn_Thunk.cache = function(this1) {
	return stx_fn_Thunk._.cache(this1);
};
stx_fn_Thunk.prj = function(this1) {
	return this1;
};
var stx_fn_UnaryLift = function() { };
$hxClasses["stx.fn.UnaryLift"] = stx_fn_UnaryLift;
stx_fn_UnaryLift.__name__ = "stx.fn.UnaryLift";
stx_fn_UnaryLift.apply = function(self,pI) {
	return self(pI);
};
stx_fn_UnaryLift.cache = function(self,pI) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_UnaryLift.pipe = function(self,pI) {
	return function() {
		return self(pI());
	};
};
stx_fn_UnaryLift.equals = function(self,that) {
	return self == that;
};
stx_fn_UnaryLift.then = function(self,that) {
	return function(a) {
		return that(self(a));
	};
};
stx_fn_UnaryLift.compose = function(that,self) {
	return function(a) {
		return that(self(a));
	};
};
stx_fn_UnaryLift.dual = function(self) {
	return function(t) {
		return stx_nano_CoupleLift.decouple(t,function(l,r) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self(l),self(r));
		});
	};
};
stx_fn_UnaryLift.perhaps = function(self) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return haxe_ds_Option.Some(self(v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
stx_fn_UnaryLift.first = function(fn1) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn1(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t));
	};
};
stx_fn_UnaryLift.second = function(fn1) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(t),fn1(stx_nano_CoupleLift.snd(t)));
	};
};
stx_fn_UnaryLift.bound = function(bindl,bindr) {
	var out = stx_fn_UnaryLift.then(stx_fn_UnaryLift.split(stx_fn_Unary.unit(),bindl),bindr);
	return out;
};
stx_fn_UnaryLift.broach = function(bindl) {
	return stx_fn_UnaryLift.bound(bindl,function(x) {
		return x;
	});
};
stx_fn_UnaryLift.split = function(self,that) {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self(p),that(p));
	};
};
stx_fn_UnaryLift.fan = function(a) {
	return stx_fn_UnaryLift.then(a,function(x) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,x);
	});
};
stx_fn_UnaryLift.pair = function(fn1,fn2) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn1(stx_nano_CoupleLift.fst(t)),fn2(stx_nano_CoupleLift.snd(t)));
	};
};
stx_fn_UnaryLift.bindI = function(fn,p) {
	var _g = stx_fn_Unary.prj(fn);
	var a1 = p;
	return function() {
		return _g(a1);
	};
};
stx_fn_UnaryLift.sink = function(fn,handler) {
	var this1 = function(p) {
		var val = fn(p);
		handler(val);
	};
	return this1;
};
var stx_fn_Unary = {};
stx_fn_Unary._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Unary.lift = function(fn) {
	return stx_fn_Unary._new(fn);
};
stx_fn_Unary.unit = function() {
	return stx_fn_Unary.lift(function(x) {
		return x;
	});
};
stx_fn_Unary.pure = function(r) {
	return function(v) {
		return r;
	};
};
stx_fn_Unary.prj = function(this1) {
	return this1;
};
var stx_fn_lift_LiftBroker = function() { };
$hxClasses["stx.fn.lift.LiftBroker"] = stx_fn_lift_LiftBroker;
stx_fn_lift_LiftBroker.__name__ = "stx.fn.lift.LiftBroker";
stx_fn_lift_LiftBroker.broker = function(v,fn) {
	return (fn(function(x) {
		return x;
	}))(v);
};
var stx_fp_ContinuationLift = function() { };
$hxClasses["stx.fp.ContinuationLift"] = stx_fp_ContinuationLift;
stx_fp_ContinuationLift.__name__ = "stx.fp.ContinuationLift";
stx_fp_ContinuationLift.apply = function(self,fn) {
	return self(fn);
};
stx_fp_ContinuationLift.map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return cont(fn(p));
		});
	};
};
stx_fp_ContinuationLift.flat_map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return (fn(p))(cont);
		});
	};
};
stx_fp_ContinuationLift.zip_with = function(self,that,fn) {
	return function(cont) {
		return self(function(p) {
			return that(function(pI) {
				return cont(fn(p,pI));
			});
		});
	};
};
stx_fp_ContinuationLift.mod = function(self,g) {
	return function(f) {
		return g(self(f));
	};
};
var stx_fp_Continuation = {};
stx_fp_Continuation.unit = function() {
	return function(fn) {
		return fn(null);
	};
};
stx_fp_Continuation.pure = function(p) {
	return function(fn) {
		return fn(p);
	};
};
stx_fp_Continuation.lift = function(fn) {
	return stx_fp_Continuation._new(fn);
};
stx_fp_Continuation._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_Continuation.callcc = function(f) {
	return function(k) {
		return (f(function(p) {
			return stx_fp_Continuation.lift(function(_) {
				return k(p);
			});
		}))(k);
	};
};
stx_fp_Continuation.asFunction = function(this1) {
	return this1;
};
stx_fp_Continuation.prj = function(this1) {
	return this1;
};
var stx_fp_Fix = $hxEnums["stx.fp.Fix"] = { __ename__:"stx.fp.Fix",__constructs__:null
	,FixOf: ($_=function(unfix) { return {_hx_index:0,unfix:unfix,__enum__:"stx.fp.Fix",toString:$estr}; },$_._hx_name="FixOf",$_.__params__ = ["unfix"],$_)
};
stx_fp_Fix.__constructs__ = [stx_fp_Fix.FixOf];
var stx_fp_FreeFSum = $hxEnums["stx.fp.FreeFSum"] = { __ename__:"stx.fp.FreeFSum",__constructs__:null
	,Pure: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.fp.FreeFSum",toString:$estr}; },$_._hx_name="Pure",$_.__params__ = ["v"],$_)
	,Impure: ($_=function(kind) { return {_hx_index:1,kind:kind,__enum__:"stx.fp.FreeFSum",toString:$estr}; },$_._hx_name="Impure",$_.__params__ = ["kind"],$_)
};
stx_fp_FreeFSum.__constructs__ = [stx_fp_FreeFSum.Pure,stx_fp_FreeFSum.Impure];
var stx_fp_FreeF = {};
stx_fp_FreeF.__properties__ = {get_self:"get_self"};
stx_fp_FreeF._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_FreeF.lift = function(self) {
	return stx_fp_FreeF._new(self);
};
stx_fp_FreeF.prj = function(this1) {
	return this1;
};
stx_fp_FreeF.get_self = function(this1) {
	return stx_fp_FreeF.lift(this1);
};
var stx_fp_Handler = {};
stx_fp_Handler.lift = function(self) {
	return stx_fp_Handler._new(self);
};
stx_fp_Handler._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_Handler.handle = function(this1,cb) {
	this1(cb);
};
stx_fp_Handler.callcc = function(f) {
	return function(k) {
		(f(function(p) {
			return stx_fp_Handler.lift(function(_) {
				k(p);
			});
		}))(k);
	};
};
var stx_fp_HandlerLift = function() { };
$hxClasses["stx.fp.HandlerLift"] = stx_fp_HandlerLift;
stx_fp_HandlerLift.__name__ = "stx.fp.HandlerLift";
stx_fp_HandlerLift.lift = function(self) {
	return stx_fp_Handler._new(self);
};
stx_fp_HandlerLift.apply = function(self,fn) {
	stx_fp_ContinuationLift.apply(self,fn);
};
stx_fp_HandlerLift.map = function(self,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.map(self,fn));
};
stx_fp_HandlerLift.flat_map = function(self,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.flat_map(self,fn));
};
stx_fp_HandlerLift.zip_with = function(self,that,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.zip_with(self,that,fn));
};
var stx_fp_KindApi = function() { };
$hxClasses["stx.fp.KindApi"] = stx_fp_KindApi;
stx_fp_KindApi.__name__ = "stx.fp.KindApi";
stx_fp_KindApi.__isInterface__ = true;
stx_fp_KindApi.prototype = {
	fix: null
	,__class__: stx_fp_KindApi
};
var stx_fp_Kind = {};
stx_fp_Kind.__properties__ = {get_self:"get_self"};
stx_fp_Kind._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_Kind.lift = function(self) {
	return stx_fp_Kind._new(self);
};
stx_fp_Kind.prj = function(this1) {
	return this1;
};
stx_fp_Kind.get_self = function(this1) {
	return stx_fp_Kind.lift(this1);
};
var stx_fp_LazyStreamTrigger = {};
stx_fp_LazyStreamTrigger.__properties__ = {get_self:"get_self"};
stx_fp_LazyStreamTrigger._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_LazyStreamTrigger.lift = function(self) {
	return stx_fp_LazyStreamTrigger._new(self);
};
stx_fp_LazyStreamTrigger.fromFn = function(fn) {
	return { next : fn};
};
stx_fp_LazyStreamTrigger.prj = function(this1) {
	return this1;
};
stx_fp_LazyStreamTrigger.get_self = function(this1) {
	return stx_fp_LazyStreamTrigger.lift(this1);
};
var stx_fp_LazyStreamSum = $hxEnums["stx.fp.LazyStreamSum"] = { __ename__:"stx.fp.LazyStreamSum",__constructs__:null
	,LazyVal: ($_=function(val,next) { return {_hx_index:0,val:val,next:next,__enum__:"stx.fp.LazyStreamSum",toString:$estr}; },$_._hx_name="LazyVal",$_.__params__ = ["val","next"],$_)
};
stx_fp_LazyStreamSum.__constructs__ = [stx_fp_LazyStreamSum.LazyVal];
var stx_fp_LazyStream = {};
stx_fp_LazyStream._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_LazyStream.lift = function(self) {
	return self;
};
stx_fp_LazyStream.zero = function() {
	return stx_fp_LazyStream.ZERO;
};
stx_fp_LazyStream.fromRec = function(v) {
	var v1 = v;
	return stx_fp_LazyStream.lift(stx_fp_LazyStreamSum.LazyVal(stx_pico_Option.fromNullT(v()),stx_fp_LazyStreamTrigger.fromFn(function() {
		return stx_fp_LazyStream.fromRec(v1);
	})));
};
stx_fp_LazyStream.fromTuple = function(tp) {
	return stx_fp_LazyStream.lift(stx_fp_LazyStreamSum.LazyVal(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp)));
};
stx_fp_LazyStream.make = function(xs,x) {
	return stx_fp_LazyStream.fromTuple(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,xs));
};
stx_fp_LazyStream.unit = function() {
	return stx_fp_LazyStreamSum.LazyVal(null,stx_fp_LazyStreamTrigger.fromFn(stx_fp_LazyStream.unit));
};
stx_fp_LazyStream.pure = function(x) {
	return stx_fp_LazyStream.make(stx_fp_LazyStreamTrigger.fromFn(stx_fp_LazyStream.unit),x);
};
stx_fp_LazyStream.reply = function(this1) {
	var val = this1.val;
	var next = this1.next;
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,val,next);
};
var stx_fp_Monoid = {};
stx_fp_Monoid._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_Monoid.put = function(this1,v) {
	return { unit : function() {
		return this1.plus(this1.unit(),v);
	}, plus : function(l,r) {
		return this1.plus(l,r);
	}};
};
stx_fp_Monoid.into = function(this1,next,fn) {
	return stx_fp_Monoid.put(this1,fn(this1,next));
};
var stx_fp_SemiGroup = {};
stx_fp_SemiGroup._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fp_State = {};
stx_fp_State._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_State.unit = function() {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,null,p);
	};
};
stx_fp_State.pure = function(r) {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,p);
	};
};
var stx_fp_StateLift = function() { };
$hxClasses["stx.fp.StateLift"] = stx_fp_StateLift;
stx_fp_StateLift.__name__ = "stx.fp.StateLift";
stx_fp_StateLift.exec = function(self,p) {
	return stx_nano_CoupleLift.snd(self(p));
};
stx_fp_StateLift.eval = function(self,p) {
	return stx_nano_CoupleLift.fst(self(p));
};
stx_fp_StateLift.map = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn(r),p);
		});
	};
};
stx_fp_StateLift.mod = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,fn(p));
		});
	};
};
stx_fp_StateLift.flat_map = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return (fn(r))(p);
		});
	};
};
var stx_fp_With = {};
stx_fp_With.__properties__ = {get_self:"get_self"};
stx_fp_With._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_With.lift = function(self) {
	return stx_fp_With._new(self);
};
stx_fp_With.prj = function(this1) {
	return this1;
};
stx_fp_With.get_self = function(this1) {
	return stx_fp_With.lift(this1);
};
var stx_lift_ArrayLift = function() { };
$hxClasses["stx.lift.ArrayLift"] = stx_lift_ArrayLift;
stx_lift_ArrayLift.__name__ = "stx.lift.ArrayLift";
stx_lift_ArrayLift.flatten = function(arrs) {
	var res = [];
	var _g = 0;
	while(_g < arrs.length) {
		var arr = arrs[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var e = arr[_g1];
			++_g1;
			res.push(e);
		}
	}
	return res;
};
stx_lift_ArrayLift.interleave = function(alls) {
	var res = [];
	if(alls.length > 0) {
		var minLength = alls[0].length;
		var _g = 0;
		while(_g < alls.length) {
			var e = alls[_g];
			++_g;
			minLength = Math.min(minLength,e.length) | 0;
		}
		var length = minLength;
		var i = 0;
		while(i < length) {
			var _g = 0;
			while(_g < alls.length) {
				var arr = alls[_g];
				++_g;
				res.push(arr[i]);
			}
			++i;
		}
	}
	return res;
};
stx_lift_ArrayLift.is_defined = function(self) {
	return self.length > 0;
};
stx_lift_ArrayLift.cons = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.unshift(t);
	return copy;
};
stx_lift_ArrayLift.snoc = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.push(t);
	return copy;
};
stx_lift_ArrayLift.set = function(self,i,v) {
	var arr0 = self.slice();
	arr0[i] = v;
	return arr0;
};
stx_lift_ArrayLift.get = function(self,i) {
	return self[i];
};
stx_lift_ArrayLift.head = function(self) {
	if(self.length == 0) {
		return haxe_ds_Option.None;
	} else if(self[0] == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(self[0]);
	}
};
stx_lift_ArrayLift.tail = function(self) {
	return self.slice(1);
};
stx_lift_ArrayLift.last = function(self) {
	var v = self[self.length > 0 ? self.length - 1 : 0];
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_lift_ArrayLift.copy = function(self) {
	return [].concat(self);
};
stx_lift_ArrayLift.concat = function(self,that) {
	var acc = stx_lift_ArrayLift.copy(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		acc.push(e);
	}
	return acc;
};
stx_lift_ArrayLift.bind_fold = function(self,pure,init,bind,fold) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return bind(memo,function(b) {
			return pure(fold(next,b));
		});
	},pure(init));
};
stx_lift_ArrayLift.reduce = function(self,unit,pure,plus) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return plus(memo,pure(next));
	},unit());
};
stx_lift_ArrayLift.map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		n.push(fn(e));
	}
	return n;
};
stx_lift_ArrayLift.imap = function(self,fn) {
	var n = [];
	var e = null;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		e = self[i];
		n.push(fn(i,e));
	}
	return n;
};
stx_lift_ArrayLift.flat_map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e1 = self[_g];
		++_g;
		var e2 = $getIterator(fn(e1));
		while(e2.hasNext()) {
			var e21 = e2.next();
			n.push(e21);
		}
	}
	return n;
};
stx_lift_ArrayLift.lfold = function(self,fn,memo) {
	var r = memo;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.lfold1 = function(self,fn) {
	var folded = stx_lift_ArrayLift.head(self);
	var tail = stx_lift_ArrayLift.tail(self);
	return stx_pico_OptionLift.map(folded,function(memo) {
		var _g = 0;
		while(_g < tail.length) {
			var item = tail[_g];
			++_g;
			memo = fn(memo,item);
		}
		return memo;
	});
};
stx_lift_ArrayLift.rfold = function(self,fn,z) {
	var r = z;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var e = self[self.length - 1 - i];
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.rfold1 = function(self,fn) {
	return stx_lift_ArrayLift.lfold1(stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]),fn);
};
stx_lift_ArrayLift.lscan = function(self,f,init) {
	var accum = init;
	var result = [init];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		result.push(f(e,accum));
	}
	return result;
};
stx_lift_ArrayLift.lscan1 = function(self,f) {
	var result = [];
	if(0 == self.length) {
		return result;
	}
	var accum = self[0];
	result.push(accum);
	var _g = 1;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result.push(f(self[i],accum));
	}
	return result;
};
stx_lift_ArrayLift.rscan = function(self,init,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan(a,f,init);
};
stx_lift_ArrayLift.rscan1 = function(self,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan1(a,f);
};
stx_lift_ArrayLift.filter = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			n.push(e);
		}
	}
	return n;
};
stx_lift_ArrayLift.map_filter = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_lift_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.whilst = function(self,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			r.push(e);
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.range = function(self,l,r) {
	return self.slice(l,r);
};
stx_lift_ArrayLift.ltaken = function(self,n) {
	return self.slice(0,Math.min(n,self.length) | 0);
};
stx_lift_ArrayLift.ldropn = function(self,n) {
	if(n >= self.length) {
		return [];
	} else {
		return self.slice(n);
	}
};
stx_lift_ArrayLift.rdropn = function(self,n) {
	if(self != null && n >= self.length) {
		return [];
	} else {
		return self.splice(0,self.length - n);
	}
};
stx_lift_ArrayLift.ldrop = function(self,p) {
	var r = [].concat(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(p(e)) {
			r.shift();
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
stx_lift_ArrayLift.all = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return fn(b);
		} else {
			return false;
		}
	},true);
};
stx_lift_ArrayLift.any = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
stx_lift_ArrayLift.zip_with = function(self,that,fn) {
	var next = [];
	var lower = Math.min(self.length,that.length) | 0;
	var _g = 0;
	var _g1 = lower;
	while(_g < _g1) {
		var i = _g++;
		next.push(fn(self[i],that[i]));
	}
	return next;
};
stx_lift_ArrayLift.cross_with = function(self,that,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var va = self[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < that.length) {
			var vb = that[_g1];
			++_g1;
			r.push(fn(va,vb));
		}
	}
	return r;
};
stx_lift_ArrayLift.difference_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = [self[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(that,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.union_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		res.push(e);
	}
	var _g = 0;
	while(_g < that.length) {
		var e = [that[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.unique_with = function(self,eq) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		var exists = stx_lift_ArrayLift.any(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		var val = stx_lift_ArrayLift.search(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		if(!exists) {
			r.push(e);
		}
	}
	return r;
};
stx_lift_ArrayLift.nub_with = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		var _g = f;
		var a1 = b;
		if(stx_lift_ArrayLift.any(a,function(a2) {
			return _g(a1,a2);
		})) {
			return a;
		} else {
			return stx_lift_ArrayLift.snoc(a,b);
		}
	},[]);
};
stx_lift_ArrayLift.intersect_with = function(self,that,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = f;
		var a1 = next;
		var _g1 = function(a2) {
			return _g(a1,a2);
		};
		if(stx_lift_ArrayLift.any(that,_g1) == true) {
			return stx_lift_ArrayLift.snoc(memo,next);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.reversed = function(self) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]);
};
stx_lift_ArrayLift.count = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		return a + (f(b) ? 1 : 0);
	},0);
};
stx_lift_ArrayLift.size = function(self) {
	return self.length;
};
stx_lift_ArrayLift.index_of = function(self,t) {
	var index = 0;
	var ok = false;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(t(e)) {
			ok = true;
			break;
		}
		++index;
	}
	if(ok) {
		return index;
	} else {
		return -1;
	}
};
stx_lift_ArrayLift.has = function(self,obj) {
	var index = self.indexOf(obj);
	if(index == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(index);
	}
};
stx_lift_ArrayLift.partition = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		if(f(next)) {
			memo.a.push(next);
		} else {
			memo.b.push(next);
		}
		return memo;
	},{ a : [], b : []});
};
stx_lift_ArrayLift.chunk = function(self,size) {
	var slices = [];
	var rest = 0;
	var _g = 0;
	while(_g < size.length) {
		var n = size[_g];
		++_g;
		var next = rest + n;
		var slice = self.slice(rest,next);
		slices.push(slice);
		rest = next;
	}
	return slices;
};
stx_lift_ArrayLift.pad = function(self,len,val) {
	var len0 = len - self.length;
	var arr0 = [];
	var _g = 0;
	var _g1 = len0;
	while(_g < _g1) {
		var i = _g++;
		arr0.push(val);
	}
	return self.concat(arr0);
};
stx_lift_ArrayLift.fill = function(self,def) {
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var x = self[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
stx_lift_ArrayLift.toIterable = function(self) {
	return self;
};
stx_lift_ArrayLift.toMap = function(self) {
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_lift_ArrayLift.random = function(self) {
	var len = self.length;
	var ind = Math.round(Math.random() * (len - 1));
	return self[ind];
};
stx_lift_ArrayLift.shuffle = function(self) {
	var res = [];
	var cp = self.slice();
	while(cp.length > 0) {
		var randArray = Math.floor(Math.random() * cp.length);
		res.push(cp.splice(randArray,1)[0]);
	}
	return res;
};
stx_lift_ArrayLift.and_with = function(self,that,eq) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.zip_with(self,that,function(l,r) {
		return { a : l, b : r};
	}),function(next,memo) {
		if(memo) {
			if(eq(next.a,next.b)) {
				return eq(next.a,next.b);
			} else {
				return false;
			}
		} else {
			return memo;
		}
	},true);
};
stx_lift_ArrayLift.rotate = function(self,num) {
	num %= self.length;
	var l = stx_lift_ArrayLift.ltaken(self,num);
	var r = stx_lift_ArrayLift.ldropn(self,num);
	if(num < 0) {
		return stx_lift_ArrayLift.concat(l,r);
	} else if(num > 1) {
		return stx_lift_ArrayLift.concat(l,r);
	} else {
		return self;
	}
};
stx_lift_ArrayLift.iterator = function(self) {
	return new haxe_iterators_ArrayIterator(self);
};
stx_lift_ArrayLift.elide = function(self) {
	return stx_lift_ArrayLift.map(self,function(v) {
		return v;
	});
};
stx_lift_ArrayLift.prj = function(self) {
	return self;
};
var stx_lift_ErrorLift = function() { };
$hxClasses["stx.lift.ErrorLift"] = stx_lift_ErrorLift;
stx_lift_ErrorLift.__name__ = "stx.lift.ErrorLift";
stx_lift_ErrorLift.is_defined = function(self) {
	return !(self.get_val() == haxe_ds_Option.None && self.get_lst() == haxe_ds_Option.None);
};
var stx_lift_IterableLift = function() { };
$hxClasses["stx.lift.IterableLift"] = stx_lift_IterableLift;
stx_lift_IterableLift.__name__ = "stx.lift.IterableLift";
stx_lift_IterableLift.make = function(self) {
	return { iterator : self};
};
stx_lift_IterableLift.concat = function(self,that) {
	return stx_lift_IterableLift.make(function() {
		var rest = false;
		var lhs = $getIterator(self);
		var rhs = $getIterator(that);
		return stx_lift_IteratorLift.make(function() {
			if(!rest) {
				if(lhs.hasNext()) {
					return true;
				} else {
					rest = true;
					return rhs.hasNext();
				}
			} else {
				return rhs.hasNext();
			}
		},function() {
			if(!rest) {
				return lhs.next();
			} else {
				return rhs.next();
			}
		});
	});
};
var stx_lift_IteratorLift = function() { };
$hxClasses["stx.lift.IteratorLift"] = stx_lift_IteratorLift;
stx_lift_IteratorLift.__name__ = "stx.lift.IteratorLift";
stx_lift_IteratorLift.make = function(hasNext,next) {
	return { hasNext : hasNext, next : next};
};
var stx_log_EntryCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.EntryCtr"] = stx_log_EntryCtr;
stx_log_EntryCtr.__name__ = "stx.log.EntryCtr";
stx_log_EntryCtr.__super__ = stx_pico_Clazz;
stx_log_EntryCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	make: function(val,ctr) {
		return { val : val, ctr : ctr};
	}
	,pure: function(val) {
		return { val : val, ctr : Std.string};
	}
	,thunk: function(fn) {
		return { val : null, ctr : function(_) {
			return Std.string(fn());
		}};
	}
	,json: function(val) {
		return { val : val, ctr : function(x) {
			return JSON.stringify(x,null," ");
		}};
	}
	,show: function(val) {
		return { val : val, ctr : function(x) {
			return stx_Show.show(stx_nano_Wildcard.__,x);
		}};
	}
	,__class__: stx_log_EntryCtr
});
var stx_log_Includes = {};
stx_log_Includes.clear = function(this1) {
	while(this1.length > 0) this1.pop();
};
stx_log_Includes.match = function(this1,string) {
	return stx_lift_ArrayLift.lfold(this1,function(next,memo) {
		return stx_nano_lift_LiftNano.if_else(memo,function() {
			return true;
		},function() {
			var str = hx_files_GlobPatterns.toRegEx(next);
			var opt = "";
			if(opt == null) {
				opt = "";
			}
			return (str == null ? null : new EReg(str,opt)).match(string);
		});
	},false);
};
var stx_log_LevelSum = {};
stx_log_LevelSum.prj = function(this1) {
	return this1;
};
var stx_log_LogPositionCls = function(pos,stamp) {
	this.pos = pos;
	this.stamp = stamp;
};
$hxClasses["stx.log.LogPositionCls"] = stx_log_LogPositionCls;
stx_log_LogPositionCls.__name__ = "stx.log.LogPositionCls";
stx_log_LogPositionCls.is_runtime = function() {
	return true;
};
stx_log_LogPositionCls.prototype = {
	pos: null
	,stamp: null
	,scoping: null
	,get_scoping: function() {
		var self = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.get_methodName(x);
		});
		var methodName;
		if(self._hx_index == 0) {
			var v = self.v;
			methodName = v;
		} else {
			methodName = "";
		}
		var self = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.get_className(x);
		});
		var className;
		if(self._hx_index == 0) {
			var v = self.v;
			className = v;
		} else {
			className = "";
		}
		var self = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.get_fileName(x);
		});
		var fileName;
		if(self._hx_index == 0) {
			var v = self.v;
			fileName = v;
		} else {
			fileName = "";
		}
		return new stx_log_Scoping(methodName,className,fileName);
	}
	,match: function(race) {
		switch(race.scope._hx_index) {
		case 0:
			var self = stx_pico_OptionLift.map(this.pos,function(x) {
				return stx_nano_Position.get_methodName(x) == race.scoping.method;
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
			break;
		case 1:
			var self = stx_pico_OptionLift.map(this.pos,function(x) {
				return stx_nano_Position.get_className(x) == race.scoping.type;
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
			break;
		case 2:
			var self = stx_pico_OptionLift.map(this.pos,function(x) {
				return stx_nano_Position.get_fileName(x) == race.scoping.module;
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
			break;
		}
	}
	,copy: function(pos,stamp) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,pos);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.pos;
		}
		var tmp1 = stx_pico_OptionLift.map(tmp,function(x) {
			return stx_nano_PositionLift.copy(x);
		});
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stamp);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.stamp;
		}
		return new stx_log_LogPositionCls(tmp1,tmp);
	}
	,with_stamp: function(fn) {
		return this.copy(null,fn(this.stamp));
	}
	,__class__: stx_log_LogPositionCls
	,__properties__: {get_scoping:"get_scoping"}
};
var stx_log_LogPosition = {};
stx_log_LogPosition.__properties__ = {get_self:"get_self"};
stx_log_LogPosition._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_LogPosition.lift = function(self) {
	return stx_log_LogPosition._new(self);
};
stx_log_LogPosition.pure = function(pos) {
	return new stx_log_LogPositionCls(haxe_ds_Option.Some(pos),new stx_log_Stamp());
};
stx_log_LogPosition.fromPos = function(pos) {
	return new stx_log_LogPositionCls(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,pos),new stx_log_Stamp());
};
stx_log_LogPosition.unit = function() {
	return new stx_log_LogPositionCls(haxe_ds_Option.None,new stx_log_Stamp());
};
stx_log_LogPosition.prj = function(this1) {
	return this1;
};
stx_log_LogPosition.get_self = function(this1) {
	return stx_log_LogPosition.lift(this1);
};
var stx_log_Logger = function() { };
$hxClasses["stx.log.Logger"] = stx_log_Logger;
stx_log_Logger.__name__ = "stx.log.Logger";
stx_log_Logger.__properties__ = {get_ZERO:"get_ZERO"};
stx_log_Logger.spur = function(value) {
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logger.hx", lineNumber : 6, className : "stx.log.Logger", methodName : "spur"});
	var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_Zero));
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
};
stx_log_Logger.ZERO = null;
stx_log_Logger.get_ZERO = function() {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_log_Logger.ZERO);
	if(self._hx_index == 0) {
		var v = self.v;
	} else {
		stx_log_Logger.ZERO = new stx_log_logger_Unit();
	}
	return stx_log_Logger.ZERO;
};
stx_log_Logger.ConsoleLogger = function(logic,format,level,verbose,reinstate) {
	if(reinstate == null) {
		reinstate = false;
	}
	if(verbose == null) {
		verbose = false;
	}
	return new stx_log_logger_ConsoleLogger(logic,format,level,verbose,reinstate);
};
var stx_log_ScopeSum = $hxEnums["stx.log.ScopeSum"] = { __ename__:"stx.log.ScopeSum",__constructs__:null
	,ScopeMethod: {_hx_name:"ScopeMethod",_hx_index:0,__enum__:"stx.log.ScopeSum",toString:$estr}
	,ScopeClass: {_hx_name:"ScopeClass",_hx_index:1,__enum__:"stx.log.ScopeSum",toString:$estr}
	,ScopeModule: {_hx_name:"ScopeModule",_hx_index:2,__enum__:"stx.log.ScopeSum",toString:$estr}
};
stx_log_ScopeSum.__constructs__ = [stx_log_ScopeSum.ScopeMethod,stx_log_ScopeSum.ScopeClass,stx_log_ScopeSum.ScopeModule];
var stx_log_Scoping = function(method,type,$module) {
	this.method = method;
	this.type = type;
	this.module = $module;
};
$hxClasses["stx.log.Scoping"] = stx_log_Scoping;
stx_log_Scoping.__name__ = "stx.log.Scoping";
stx_log_Scoping.prototype = {
	method: null
	,type: null
	,module: null
	,copy: function(method,type,$module) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,method);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.method;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,type);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.type;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,$module);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.module;
		}
		return new stx_log_Scoping(tmp,tmp1,tmp2);
	}
	,with_method: function(name) {
		return this.copy(name);
	}
	,toString: function() {
		return "(" + this.module + "::" + this.type + "::" + this.method + ")";
	}
	,__class__: stx_log_Scoping
};
var stx_log__$Signal_NullSignalCls = function() {
	stx_log__$Signal_SignalCls.call(this);
};
$hxClasses["stx.log._Signal.NullSignalCls"] = stx_log__$Signal_NullSignalCls;
stx_log__$Signal_NullSignalCls.__name__ = "stx.log._Signal.NullSignalCls";
stx_log__$Signal_NullSignalCls.__super__ = stx_log__$Signal_SignalCls;
stx_log__$Signal_NullSignalCls.prototype = $extend(stx_log__$Signal_SignalCls.prototype,{
	trigger: function(v) {
	}
	,__class__: stx_log__$Signal_NullSignalCls
});
var stx_log_DebugLogger = function(logic,format) {
	stx_log_logger_Base.call(this,logic,format);
};
$hxClasses["stx.log.DebugLogger"] = stx_log_DebugLogger;
stx_log_DebugLogger.__name__ = "stx.log.DebugLogger";
stx_log_DebugLogger.__super__ = stx_log_logger_Base;
stx_log_DebugLogger.prototype = $extend(stx_log_logger_Base.prototype,{
	__class__: stx_log_DebugLogger
});
var stx_log_Stamp = function(id,level,timestamp,tags,hidden) {
	if(hidden == null) {
		hidden = false;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		var _g = function(value) {
			return stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,value);
		};
		var value = "xxxxx";
		tmp = (function() {
			return _g(value);
		})();
	}
	this.id = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,level);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = 0;
	}
	this.level = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,timestamp);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = _$Date_Date_$Impl_$.now();
	}
	this.timestamp = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tags);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = [];
	}
	this.tags = tmp;
	this.hidden = hidden;
};
$hxClasses["stx.log.Stamp"] = stx_log_Stamp;
stx_log_Stamp.__name__ = "stx.log.Stamp";
stx_log_Stamp.prototype = {
	id: null
	,level: null
	,timestamp: null
	,tags: null
	,hidden: null
	,copy: function(id,level,timestamp,tags,hidden) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.id;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,level);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.level;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,timestamp);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.timestamp;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tags);
		var tmp3;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp3 = v;
		} else {
			tmp3 = this.tags;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,hidden);
		var tmp4;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp4 = v;
		} else {
			tmp4 = this.hidden;
		}
		return new stx_log_Stamp(tmp,tmp1,tmp2,tmp3,tmp4);
	}
	,relevel: function(level) {
		return this.copy(null,level);
	}
	,tag: function(tag) {
		return this.copy(null,null,null,stx_lift_ArrayLift.snoc(this.tags,tag));
	}
	,hide: function() {
		return this.copy(this.id,this.level,this.timestamp,this.tags,true);
	}
	,toString: function() {
		var time = HxOverrides.dateStr(this.timestamp);
		var lev = stx_log_Level.toString(this.level);
		var out = "Stamp(" + lev + " " + time + ")";
		return out;
	}
	,is_zero: function() {
		return this == stx_log_Stamp.ZERO;
	}
	,__class__: stx_log_Stamp
};
var stx_log_StringCtr = {};
stx_log_StringCtr.__properties__ = {get_self:"get_self"};
stx_log_StringCtr._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_StringCtr.unit = function() {
	return stx_log_StringCtr.lift({ ctr : Std.string});
};
stx_log_StringCtr.lift = function(self) {
	return stx_log_StringCtr._new(self);
};
stx_log_StringCtr.capture = function(this1,val) {
	return { ctr : $bind(this1,this1.ctr), val : val};
};
stx_log_StringCtr.prj = function(this1) {
	return this1;
};
stx_log_StringCtr.get_self = function(this1) {
	return stx_log_StringCtr.lift(this1);
};
var stx_log_Stringify = {};
stx_log_Stringify.fromString = function(str) {
	return function(ctr) {
		return stx_log_core_Entry.fromString(str);
	};
};
stx_log_Stringify.fromInt = function(self) {
	return function(ctr) {
		return stx_log_core_Entry.fromString("" + self);
	};
};
stx_log_Stringify.fromFloat = function(self) {
	return function(ctr) {
		return stx_log_core_Entry.fromString("" + self);
	};
};
stx_log_Stringify.fromBool = function(self) {
	return function(ctr) {
		return stx_log_core_Entry.fromString("" + (self == null ? "null" : "" + self));
	};
};
var stx_log_core_Entry = {};
stx_log_core_Entry._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_core_Entry.fromString = function(str) {
	return stx_log_core_Entry._new({ ctr : function(_) {
		return str;
	}, val : null});
};
stx_log_core_Entry.toString = function(this1) {
	return this1.ctr(this1.val);
};
var stx_log_core_format_Console = function(data) {
	stx_log_core_FormatCls.call(this,data);
};
$hxClasses["stx.log.core.format.Console"] = stx_log_core_format_Console;
stx_log_core_format_Console.__name__ = "stx.log.core.format.Console";
stx_log_core_format_Console.__super__ = stx_log_core_FormatCls;
stx_log_core_format_Console.prototype = $extend(stx_log_core_FormatCls.prototype,{
	print: function(value) {
		var p = value.source;
		var s = p.stamp;
		var a = [];
		if(this.has(stx_log_core_FormatSum.INCLUDE_LEVEL)) {
			var l = s.level;
			var level_str;
			switch(s.level) {
			case 1:
				level_str = "<grey>" + (l == null ? "null" : stx_log_Level.toString(l)) + "</grey>";
				break;
			case 2:
				level_str = "<light_white>" + (l == null ? "null" : stx_log_Level.toString(l)) + "</light_white>";
				break;
			case 3:
				level_str = "<green>" + (l == null ? "null" : stx_log_Level.toString(l)) + "</green>";
				break;
			case 4:
				level_str = "<yellow>" + (l == null ? "null" : stx_log_Level.toString(l)) + "</yellow>";
				break;
			case 5:
				level_str = "<red>" + (l == null ? "null" : stx_log_Level.toString(l)) + "</red>";
				break;
			case 6:
				level_str = "<invert><red>" + (l == null ? "null" : stx_log_Level.toString(l)) + "</red></invert>";
				break;
			default:
				level_str = "" + (l == null ? "null" : stx_log_Level.toString(l));
			}
			a.push("" + level_str);
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_TIMESTAMP)) {
			var fmt = "%Y-%m-%dT%H:%M:%S";
			a.push("" + DateTools.format(s.timestamp,fmt));
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_TAGS)) {
			var tag_string = [s.tags.join(",")];
			a.push("<magenta>" + Std.string(tag_string) + "</magenta>");
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_LOCATION)) {
			var self = stx_pico_OptionLift.map(p.pos,stx_nano_PositionLift.to_vscode_clickable_link);
			var lnk;
			if(self._hx_index == 0) {
				var v = self.v;
				lnk = v;
			} else {
				lnk = "<unknown>";
			}
			a.push(lnk);
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL)) {
			a.push("\n");
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_DETAIL)) {
			var detail_string = stx_log_core_Entry.toString(value.detail);
			a.push("<invert>" + detail_string + "</invert>");
		}
		return a.join(" ");
	}
	,__class__: stx_log_core_format_Console
});
var stx_log_filter_term_PosPredicate = function(delegate) {
	stx_log_Filter.call(this);
	this.delegate = delegate;
};
$hxClasses["stx.log.filter.term.PosPredicate"] = stx_log_filter_term_PosPredicate;
stx_log_filter_term_PosPredicate.__name__ = "stx.log.filter.term.PosPredicate";
stx_log_filter_term_PosPredicate.__super__ = stx_log_Filter;
stx_log_filter_term_PosPredicate.prototype = $extend(stx_log_Filter.prototype,{
	delegate: null
	,apply: function(value) {
		return this.delegate.apply(value.source);
	}
	,__class__: stx_log_filter_term_PosPredicate
});
var stx_log_filter_term_Race = function() {
	stx_log_Filter.call(this);
	this.races = [];
};
$hxClasses["stx.log.filter.term.Race"] = stx_log_filter_term_Race;
stx_log_filter_term_Race.__name__ = "stx.log.filter.term.Race";
stx_log_filter_term_Race.__super__ = stx_log_Filter;
stx_log_filter_term_Race.prototype = $extend(stx_log_Filter.prototype,{
	races: null
	,apply: function(value) {
		var race = Lambda.fold(this.races,function(next,memo) {
			var race;
			switch(memo._hx_index) {
			case 0:
				var t = memo.v;
				var v = t;
				race = stx_nano_lift_LiftNano.if_else(next.timestamp > v.timestamp,function() {
					return haxe_ds_Option.Some(next);
				},function() {
					return haxe_ds_Option.Some(v);
				});
				break;
			case 1:
				race = haxe_ds_Option.Some(next);
				break;
			}
			return race;
		},haxe_ds_Option.None);
		if(race._hx_index == 0) {
			var v = race.v;
			haxe_Log.trace("wins race",{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 24, className : "stx.log.filter.term.Race", methodName : "apply"});
			var out = value.source.match(v);
			if(out) {
				haxe_Log.trace("wins race",{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 27, className : "stx.log.filter.term.Race", methodName : "apply"});
			}
			return stx_nano_lift_LiftNano.if_else(out,function() {
				return stx_nano_Report.unit();
			},function() {
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 29, className : "stx.log.filter.term.Race", methodName : "apply"});
				var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_LosesRace));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				return stx_nano_Report.pure(this2);
			});
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 30, className : "stx.log.filter.term.Race", methodName : "apply"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_LogFailure.E_Log_LosesRace));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			return stx_nano_Report.pure(this2);
		}
	}
	,__class__: stx_log_filter_term_Race
});
var stx_log_filter_term_race_Stamp = {};
stx_log_filter_term_race_Stamp.__properties__ = {get_self:"get_self"};
stx_log_filter_term_race_Stamp._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_filter_term_race_Stamp.lift = function(self) {
	return stx_log_filter_term_race_Stamp._new(self);
};
stx_log_filter_term_race_Stamp.make = function(scoping,timestamp,scope) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,scope);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_log_ScopeSum.ScopeMethod;
	}
	return { scoping : scoping, timestamp : timestamp, scope : tmp};
};
stx_log_filter_term_race_Stamp.prj = function(this1) {
	return this1;
};
stx_log_filter_term_race_Stamp.get_self = function(this1) {
	return stx_log_filter_term_race_Stamp.lift(this1);
};
var stx_log_logger_Custom = function(logic,format,level,verbose,reinstate) {
	stx_log_logger_Unit.call(this,logic,format,level,verbose,reinstate);
};
$hxClasses["stx.log.logger.Custom"] = stx_log_logger_Custom;
stx_log_logger_Custom.__name__ = "stx.log.logger.Custom";
stx_log_logger_Custom.__super__ = stx_log_logger_Unit;
stx_log_logger_Custom.prototype = $extend(stx_log_logger_Unit.prototype,{
	__class__: stx_log_logger_Custom
});
var stx_log_logger_ConsoleLogger = function(logic,format,level,verbose,reinstate) {
	if(reinstate == null) {
		reinstate = false;
	}
	if(verbose == null) {
		verbose = false;
	}
	if(level == null) {
		level = 2;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,format);
	var v = new stx_log_core_format_Console();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	stx_log_logger_Custom.call(this,logic,tmp,level,verbose,reinstate);
};
$hxClasses["stx.log.logger.ConsoleLogger"] = stx_log_logger_ConsoleLogger;
stx_log_logger_ConsoleLogger.__name__ = "stx.log.logger.ConsoleLogger";
stx_log_logger_ConsoleLogger.__super__ = stx_log_logger_Custom;
stx_log_logger_ConsoleLogger.prototype = $extend(stx_log_logger_Custom.prototype,{
	render: function(v,infos) {
		var s = Console.logPrefix + ("" + Std.string(v));
		var outputStream = 0;
		if(outputStream == null) {
			outputStream = 0;
		}
		if(s == null) {
			s = "";
		}
		Console.printFormatted(s + "\n",outputStream);
	}
	,__class__: stx_log_logger_ConsoleLogger
});
var stx_log_output_term_Js = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.output.term.Js"] = stx_log_output_term_Js;
stx_log_output_term_Js.__name__ = "stx.log.output.term.Js";
stx_log_output_term_Js.__interfaces__ = [stx_log_OutputApi];
stx_log_output_term_Js.__super__ = stx_pico_Clazz;
stx_log_output_term_Js.prototype = $extend(stx_pico_Clazz.prototype,{
	render: function(v,pos) {
		var msg = "";
		msg += js_Boot.__string_rec(v,"");
		var d;
		var tmp;
		if(typeof(document) != "undefined") {
			d = document.getElementById("haxe:trace");
			tmp = d != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			d.innerHTML += __unhtml(msg) + "<br/>";
		} else if(typeof console != "undefined" && console.log != null) {
			console.log(msg);
		}
	}
	,__class__: stx_log_output_term_Js
});
var stx_nano_AccrualLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.AccrualLift"] = stx_nano_AccrualLift;
stx_nano_AccrualLift.__name__ = "stx.nano.AccrualLift";
stx_nano_AccrualLift.make = function() {
	return new stx_nano_AccrualLift();
};
stx_nano_AccrualLift.lift = function(self) {
	return stx_nano_Accrual.lift(self);
};
stx_nano_AccrualLift.errata = function(self,fn) {
	return stx_nano_Accrual.lift(tink_core_Future.map(self,function(x) {
		return stx_nano_ReceiptLift.errata(x,fn);
	}));
};
stx_nano_AccrualLift.errate = function(self,fn) {
	return stx_nano_Accrual.lift(tink_core_Future.map(self,function(x) {
		return stx_nano_ReceiptLift.errate(x,fn);
	}));
};
stx_nano_AccrualLift.flat_map = function(self,fn) {
	return tink_core_Future.flatMap(self,function(x) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,x.value);
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			return stx_nano_AccrualLift.errata(fn(t),function(e) {
				return stx_nano_ErrataLift.toError(x.get_error()).concat(e);
			});
		case 1:
			return stx_nano_Accrual.fromReceipt(stx_nano_Receipt.fromDefect(x.toDefect()));
		}
	});
};
stx_nano_AccrualLift.map = function(self,fn) {
	return tink_core_Future.map(self,function(x) {
		return stx_nano_ReceiptLift.map(x,fn);
	});
};
stx_nano_AccrualLift.escape = function(self,fn) {
	return tink_core_Future.map(self,fn);
};
stx_nano_AccrualLift.__super__ = stx_pico_Clazz;
stx_nano_AccrualLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_AccrualLift
});
var stx_nano_Accrual = {};
stx_nano_Accrual.__properties__ = {get_self:"get_self"};
stx_nano_Accrual._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Accrual.unit = function() {
	return tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Receipt.unit());
	});
};
stx_nano_Accrual.fromReceipt = function(self) {
	return stx_nano_Accrual.lift(tink_core_Future.irreversible(function(cb) {
		cb(self);
	}));
};
stx_nano_Accrual.pure = function(self) {
	return stx_nano_Accrual.make(self);
};
stx_nano_Accrual.make = function(value,error) {
	return stx_nano_Accrual.lift(tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Receipt.make(value,error));
	}));
};
stx_nano_Accrual.ok = function(self) {
	return stx_nano_Accrual.pure(self);
};
stx_nano_Accrual.no = function(self) {
	return stx_nano_Accrual.make(null,self);
};
stx_nano_Accrual.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Accrual.prj = function(this1) {
	return this1;
};
stx_nano_Accrual.get_self = function(this1) {
	return stx_nano_Accrual.lift(this1);
};
var stx_nano_AlertLift = function() { };
$hxClasses["stx.nano.AlertLift"] = stx_nano_AlertLift;
stx_nano_AlertLift.__name__ = "stx.nano.AlertLift";
stx_nano_AlertLift.fold = function(self,pure,unit) {
	return tink_core_Future.map(self,function(report) {
		if(report == null) {
			return unit();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				return pure(v);
			case 1:
				return unit();
			}
		}
	});
};
stx_nano_AlertLift.execute = function(self,fn) {
	return tink_core_Future.flatMap(self,function(report) {
		var tmp;
		if(report == null) {
			tmp = fn();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				tmp = stx_nano_Alert.pure(v);
				break;
			case 1:
				tmp = fn();
				break;
			}
		}
		return tmp;
	});
};
stx_nano_AlertLift.adjust = function(self,fn) {
	return stx_nano_Alert.lift(tink_core_Future.flatMap(self,function(report) {
		return fn(report);
	}));
};
stx_nano_AlertLift.tap = function(self,fn,pos) {
	return stx_nano_Alert.lift(tink_core_Future.map(self,function(report) {
		fn(report,pos);
		return report;
	}));
};
stx_nano_AlertLift.flat_fold = function(self,ers,nil) {
	return tink_core_Future.flatMap(self,function(report) {
		if(report == null) {
			return nil();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				return ers(v);
			case 1:
				return nil();
			}
		}
	});
};
stx_nano_AlertLift.resolve = function(self,val) {
	return stx_nano_Pledge.lift(stx_nano_AlertLift.fold(self,function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
	},function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,val);
	}));
};
stx_nano_AlertLift.ignore = function(self,fn) {
	return stx_nano_Alert.lift(tink_core_Future.map(self,function(report) {
		return stx_nano_ReportLift.ignore(report,fn);
	}));
};
stx_nano_AlertLift.anyway = function(self,fn) {
	return tink_core_Future.flatMap(self,function(report) {
		return stx_nano_Alert.prj(fn(report));
	});
};
stx_nano_AlertLift.toTinkPromise = function(self) {
	return stx_nano_AlertLift.fold(self,function(er) {
		return tink_core_Outcome.Failure(stx_nano_lift_LiftError.toTinkError(er));
	},function() {
		return tink_core_Outcome.Success(null);
	});
};
var stx_nano_Alert = {};
stx_nano_Alert.__properties__ = {get_self:"get_self"};
stx_nano_Alert.unit = function() {
	return tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Report.unit());
	});
};
stx_nano_Alert.pure = function(e) {
	return tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Report.pure(e));
	});
};
stx_nano_Alert.make = function(self) {
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_nano_Alert.any = function(arr) {
	return stx_nano_Alert.lift(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(arr,function(next,memo) {
		return tink_core_Future.map(stx_nano_Alert.prj(next),function(report) {
			return stx_nano_ReportLift.concat(memo,report);
		});
	},stx_nano_Report.unit()));
};
stx_nano_Alert.seq = function(arr,fn) {
	return stx_nano_Alert.lift(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(arr,function(next,memo) {
		var tmp;
		if(memo == null) {
			tmp = fn(next);
		} else {
			switch(memo._hx_index) {
			case 0:
				var v = memo.v;
				tmp = stx_nano_Report.alert(stx_nano_lift_LiftError.report(v));
				break;
			case 1:
				tmp = fn(next);
				break;
			}
		}
		return tmp;
	},stx_nano_Report.unit()));
};
stx_nano_Alert._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Alert.lift = function(self) {
	return stx_nano_Alert._new(self);
};
stx_nano_Alert.prj = function(this1) {
	return this1;
};
stx_nano_Alert.get_self = function(this1) {
	return stx_nano_Alert.lift(this1);
};
stx_nano_Alert.errata = function(this1,fn) {
	return tink_core_Future.map(this1,function(report) {
		return stx_nano_Report.errata(report,fn);
	});
};
stx_nano_Alert.errate = function(this1,fn) {
	return stx_nano_Alert.errata(this1,function(err) {
		return stx_nano_Rejection.errate(err,fn);
	});
};
stx_nano_Alert.handle = function(this1,fn) {
	return this1.handle(fn);
};
var stx_nano_Blob = {};
stx_nano_Blob.asInt = function(this1) {
	return this1;
};
stx_nano_Blob.asString = function(this1) {
	return this1;
};
stx_nano_Blob.asBool = function(this1) {
	return this1;
};
stx_nano_Blob.asFloat = function(this1) {
	return this1;
};
stx_nano_Blob.typeof = function(this1) {
	return Type.typeof(this1);
};
var stx_nano_Bools = function() { };
$hxClasses["stx.nano.Bools"] = stx_nano_Bools;
stx_nano_Bools.__name__ = "stx.nano.Bools";
stx_nano_Bools.truthiness = function(str) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,str),StringTools.trim);
	var _g;
	if(self._hx_index == 0) {
		var v = self.v;
		_g = v;
	} else {
		_g = null;
	}
	if(_g == null) {
		return false;
	} else {
		switch(_g) {
		case "0":
			return false;
		case "1":
			return true;
		case "false":
			return false;
		case "true":
			return true;
		default:
			return true;
		}
	}
};
stx_nano_Bools.existishness = function(str) {
	if(str == null) {
		return false;
	} else if(str == "") {
		return false;
	} else {
		return true;
	}
};
var stx_nano_ByteSize = {};
stx_nano_ByteSize.__properties__ = {get_length:"get_length"};
stx_nano_ByteSize.endianness = function(this1) {
	switch(this1) {
	case "dle":case "fle":case "i16-":case "i24-":case "i32-":case "ui16-":case "ui24-":
		return haxe_ds_Option.Some(stx_nano_Endianness.LITTLE_ENDIAN);
	case "dbe":case "fbe":case "i16+":case "i24+":case "i32+":case "ui16+":case "ui24+":
		return haxe_ds_Option.Some(stx_nano_Endianness.BIG_ENDIAN);
	default:
		return haxe_ds_Option.None;
	}
};
stx_nano_ByteSize.get_length = function(this1) {
	switch(this1) {
	case "dbe":case "dle":
		return 8;
	case "fbe":case "fle":case "i32+":case "i32-":
		return 4;
	case "i24+":case "i24-":case "ui24+":case "ui24-":
		return 3;
	case "i8":
		return 1;
	case "i16+":case "i16-":case "ui16+":case "ui16-":
		return 2;
	default:
		return -1;
	}
};
stx_nano_ByteSize.get_width = function(this1) {
	var l = stx_nano_ByteSize.get_length(this1);
	if(l == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(l);
	}
};
var stx_nano_Cell = {};
stx_nano_Cell.__properties__ = {get_value:"get_value"};
stx_nano_Cell.get_value = function(this1) {
	return this1.pop();
};
stx_nano_Cell._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Cell.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Cell.make = function(fn) {
	return stx_nano_Cell.lift({ pop : fn});
};
stx_nano_Cell.many = function(self) {
	return stx_nano_Cell.lift({ pop : function() {
		var out = [];
		var _g_current = 0;
		var _g_array = self;
		while(_g_current < _g_array.length) {
			var x = _g_array[_g_current++];
			out.push(x());
		}
		return stx_nano_Cluster.lift(out);
	}});
};
stx_nano_Cell.toString = function(this1) {
	return "@:[" + Std.string(this1.pop()) + "]";
};
stx_nano_Cell.pure = function(v) {
	return stx_nano_Cell.make(function() {
		return v;
	});
};
var stx_nano_Char = {};
stx_nano_Char._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Char.code = function(this1) {
	return HxOverrides.cca(this1,0);
};
var stx_nano_CharsLift = function() { };
$hxClasses["stx.nano.CharsLift"] = stx_nano_CharsLift;
stx_nano_CharsLift.__name__ = "stx.nano.CharsLift";
stx_nano_CharsLift.parse_bool = function(self) {
	var vLower = self.toLowerCase();
	switch(vLower) {
	case "false":
		return haxe_ds_Option.Some(false);
	case "true":
		switch(self) {
		case "0":
			return haxe_ds_Option.Some(false);
		case "1":
			return haxe_ds_Option.Some(true);
		default:
			return haxe_ds_Option.Some(true);
		}
		break;
	default:
		switch(self) {
		case "0":
			return haxe_ds_Option.Some(false);
		case "1":
			return haxe_ds_Option.Some(true);
		default:
			return haxe_ds_Option.None;
		}
	}
};
stx_nano_CharsLift.parse_int = function(self) {
	return stx_pico_OptionLift.filter(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Std.parseInt(self)),function(i) {
		return !isNaN(i);
	});
};
stx_nano_CharsLift.parse_float = function(self) {
	return stx_pico_OptionLift.filter(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,parseFloat(self)),function(i) {
		return !isNaN(i);
	});
};
stx_nano_CharsLift.starts_with = function(self,frag) {
	if(self.length >= frag.length && frag == HxOverrides.substr(self,0,frag.length)) {
		return true;
	} else {
		return false;
	}
};
stx_nano_CharsLift.ends_with = function(self,frag) {
	if(self.length >= frag.length && frag == HxOverrides.substr(self,self.length - frag.length,null)) {
		return true;
	} else {
		return false;
	}
};
stx_nano_CharsLift.contains = function(self,substr) {
	return self.indexOf(substr) != -1;
};
stx_nano_CharsLift.replace = function(self,sub,by) {
	return StringTools.replace(self,sub,by);
};
stx_nano_CharsLift.brackets = function(self,l,r) {
	return "" + l + self + r;
};
stx_nano_CharsLift.prepend = function(self,before) {
	return stx_nano_Chars.add(before,self);
};
stx_nano_CharsLift.append = function(self,after) {
	return stx_nano_Chars.add(self,after);
};
stx_nano_CharsLift.cca = function(self,i) {
	return HxOverrides.cca(self,i);
};
stx_nano_CharsLift.at = function(self,i) {
	return self.charAt(i);
};
stx_nano_CharsLift.chunk = function(self,len) {
	if(len == null) {
		len = 1;
	}
	var start = 0;
	var end = Math.round(Math.min(start + len,self.length));
	if(end == 0) {
		return [];
	} else {
		var prefix = HxOverrides.substr(self,start,end);
		var rest = HxOverrides.substr(self,end,null);
		return [prefix].concat(stx_nano_CharsLift.chunk(rest,len));
	}
};
stx_nano_CharsLift.chars = function(self) {
	var a = [];
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		a.push(self.charAt(i));
	}
	return a;
};
stx_nano_CharsLift.split = function(self,sep) {
	return self.split(sep);
};
stx_nano_CharsLift.strip_white = function(self) {
	var l = self.length;
	var i = 0;
	var sb_b = "";
	while(i < l) {
		if(!stx_nano_CharsLift.is_space(self,i)) {
			sb_b += Std.string(self.charAt(i));
		}
		++i;
	}
	return sb_b;
};
stx_nano_CharsLift.replace_recurse = function(self,sub,by) {
	if(sub.length == 0) {
		return stx_nano_CharsLift.replace(self,sub,by);
	}
	if(by.indexOf(sub) >= 0) {
		throw haxe_Exception.thrown("Infinite recursion");
	}
	var ns = self.toString();
	var olen = 0;
	var nlen = ns.length;
	while(olen != nlen) {
		olen = ns.length;
		stx_nano_CharsLift.replace(sub,by,ns);
		nlen = ns.length;
	}
	return ns;
};
stx_nano_CharsLift.iterator = function(self) {
	var index = 0;
	return { hasNext : function() {
		return index < self.length;
	}, next : function() {
		if(index < self.length) {
			index += 1;
			return HxOverrides.substr(self,index - 1,1);
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Chars.hx", lineNumber : 184, className : "stx.nano.CharsLift", methodName : "iterator"});
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			throw haxe_Exception.thrown(this2);
		}
	}};
};
stx_nano_CharsLift.uncapitalize_first_letter = function(self) {
	self = HxOverrides.substr(self,0,1).toLowerCase() + HxOverrides.substr(self,1,self.length);
	return self;
};
stx_nano_CharsLift.capitalize_first_letter = function(self) {
	self = HxOverrides.substr(self,0,1).toUpperCase() + HxOverrides.substr(self,1,self.length);
	return self;
};
stx_nano_CharsLift.capitalize_hyphens = function(self) {
	return stx_nano_CharsLift.capitalize_delim(self,"-");
};
stx_nano_CharsLift.capitalize_delim = function(self,d) {
	var r = self;
	var n = r.indexOf(d);
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + stx_nano_CharsLift.capitalize_first_letter(after);
		n = r.indexOf(d,n + 1);
	}
	return r;
};
stx_nano_CharsLift.to_dashes = function(self,toLower) {
	if(toLower == null) {
		toLower = true;
	}
	var self1 = new EReg("([a-zA-Z])(?=[A-Z])","g").map(self,function(re) {
		return "" + re.matched(1) + "-";
	});
	if(toLower == true) {
		self1 = self1.toLowerCase();
	}
	return self1;
};
stx_nano_CharsLift.replace_vars = function(self,params) {
	if(params != null) {
		var h = params.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			self = StringTools.replace(self,"${" + k + "}",params.h[k]);
		}
	}
	return self;
};
stx_nano_CharsLift.is_space = function(self,pos) {
	var c = HxOverrides.cca(self,pos);
	if(!(c >= 9 && c <= 13)) {
		return c == 32;
	} else {
		return true;
	}
};
stx_nano_CharsLift.chr = function(i) {
	return String.fromCodePoint(i);
};
stx_nano_CharsLift.underscore = function(s) {
	var _this_r = new RegExp("::","g".split("u").join(""));
	s = s.replace(_this_r,"/");
	var _this_r = new RegExp("([A-Z]+)([A-Z][a-z])","g".split("u").join(""));
	s = s.replace(_this_r,"$1_$2");
	var _this_r = new RegExp("([a-z\\d])([A-Z])","g".split("u").join(""));
	s = s.replace(_this_r,"$1_$2");
	var _this_r = new RegExp("-","g".split("u").join(""));
	s = s.replace(_this_r,"_");
	return s.toLowerCase();
};
stx_nano_CharsLift.after = function(self,sub) {
	var idx = self.indexOf(sub);
	if(idx < 0) {
		return "";
	}
	return self.substring(idx + sub.length,self.length);
};
stx_nano_CharsLift.before = function(self,sub) {
	return self.substring(0,self.indexOf(sub));
};
stx_nano_CharsLift.quote = function(str) {
	return "\"" + str + "\"";
};
stx_nano_CharsLift.requote = function(self) {
	return stx_nano_CharsLift.replace(self,"\"","\\\"");
};
stx_nano_CharsLift.truncate = function(self,int) {
	return HxOverrides.substr(self,0,int);
};
stx_nano_CharsLift.rdropn = function(self,int) {
	return HxOverrides.substr(self,0,self.length - int);
};
stx_nano_CharsLift.ldropn = function(self,int) {
	return HxOverrides.substr(self,int,null);
};
var stx_nano_Chars = {};
stx_nano_Chars.lift = function(self) {
	return stx_nano_Chars._new(self);
};
stx_nano_Chars._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Chars.char = function(this1,int) {
	return stx_nano_Char._new(this1.charAt(int));
};
stx_nano_Chars.add = function(this1,that) {
	return this1 + that;
};
var stx_nano_ChunkSum = $hxEnums["stx.nano.ChunkSum"] = { __ename__:"stx.nano.ChunkSum",__constructs__:null
	,Val: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.ChunkSum",toString:$estr}; },$_._hx_name="Val",$_.__params__ = ["v"],$_)
	,Tap: {_hx_name:"Tap",_hx_index:1,__enum__:"stx.nano.ChunkSum",toString:$estr}
	,End: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"stx.nano.ChunkSum",toString:$estr}; },$_._hx_name="End",$_.__params__ = ["err"],$_)
};
stx_nano_ChunkSum.__constructs__ = [stx_nano_ChunkSum.Val,stx_nano_ChunkSum.Tap,stx_nano_ChunkSum.End];
var stx_nano_ChunkLift = function() { };
$hxClasses["stx.nano.ChunkLift"] = stx_nano_ChunkLift;
stx_nano_ChunkLift.__name__ = "stx.nano.ChunkLift";
stx_nano_ChunkLift.def = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return v;
	case 1:
		return fn();
	case 2:
		var e = self.err;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_ChunkLift.defv = function(self,t) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return v;
	case 1:
		return t;
	case 2:
		var e = self.err;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_ChunkLift.fold = function(chk,val,ers,tap) {
	switch(chk._hx_index) {
	case 0:
		var v = chk.v;
		return val(v);
	case 1:
		return tap();
	case 2:
		var e = chk.err;
		return ers(e);
	}
};
stx_nano_ChunkLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		var o = fn(v);
		return stx_nano_Chunk.pure(o);
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		return stx_nano_ChunkSum.End(err);
	}
};
stx_nano_ChunkLift.flatten = function(self) {
	return stx_nano_ChunkLift.flat_map(self,function(x) {
		return x;
	});
};
stx_nano_ChunkLift.flat_map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return fn(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		return stx_nano_ChunkSum.End(err);
	}
};
stx_nano_ChunkLift.recover = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return stx_nano_ChunkSum.Val(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		return fn(err);
	}
};
stx_nano_ChunkLift.errata = function(self,fn) {
	return stx_nano_ChunkLift.recover(self,function(x) {
		return stx_nano_ChunkSum.End(fn(x));
	});
};
stx_nano_ChunkLift.errate = function(self,fn) {
	return stx_nano_ChunkLift.recover(self,function(x) {
		return stx_nano_ChunkSum.End(stx_nano_Rejection.errate(x,fn));
	});
};
stx_nano_ChunkLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		switch(that._hx_index) {
		case 0:
			var v0 = that.v;
			return stx_nano_ChunkSum.Val(stx_nano_lift_LiftNano.toCouple(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,v,v0)));
		case 1:
			return stx_nano_ChunkSum.Tap;
		case 2:
			var err = that.err;
			return stx_nano_ChunkSum.End(err);
		}
		break;
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		if(that._hx_index == 2) {
			var err0 = that.err;
			return stx_nano_ChunkSum.End(stx_nano_Rejection.concat(err,err0));
		} else {
			return stx_nano_ChunkSum.Tap;
		}
		break;
	}
};
stx_nano_ChunkLift.value = function(chk) {
	switch(chk._hx_index) {
	case 0:
		var v = chk.v;
		return haxe_ds_Option.Some(v);
	case 1:
		return haxe_ds_Option.None;
	case 2:
		var _g = chk.err;
		return haxe_ds_Option.None;
	}
};
stx_nano_ChunkLift.is_defined = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return true;
	case 1:
		return false;
	case 2:
		var e = self.err;
		return false;
	}
};
stx_nano_ChunkLift.opt_else = function(self,_if,_else) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return _if(v);
	case 1:
		return _else(haxe_ds_Option.None);
	case 2:
		var e = self.err;
		return _else(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e));
	}
};
stx_nano_ChunkLift.fudge = function(self,pos) {
	if(self == null) {
		throw haxe_Exception.thrown("no self to push on");
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown("Value not found on force");
		case 2:
			var _g = self.err;
			if(_g == null) {
				throw haxe_Exception.thrown("Value not found on force");
			} else {
				var err = _g;
				throw haxe_Exception.thrown(err);
			}
			break;
		}
	}
};
stx_nano_ChunkLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_nano_EnumValue.alike(stx_nano_EnumValue._new(self),stx_nano_EnumValue._new(stx_nano_ChunkSum.Val(null)));
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return null;
		}
	}};
};
stx_nano_ChunkLift.secure = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		tmp = v == null ? stx_nano_ChunkSum.Tap : stx_nano_ChunkSum.Val(v);
		break;
	case 1:
		tmp = stx_nano_ChunkSum.Tap;
		break;
	case 2:
		var e = self.err;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return tmp;
};
var stx_nano_Chunk = {};
stx_nano_Chunk.__properties__ = {get_self:"get_self"};
stx_nano_Chunk._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Chunk.fromRejection = function(e) {
	return stx_nano_ChunkSum.End(e);
};
stx_nano_Chunk.fromError = function(e) {
	var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
	return stx_nano_ChunkSum.End(this1);
};
stx_nano_Chunk.fromNull_T = function(v) {
	return stx_nano_Chunk.pure(v);
};
stx_nano_Chunk.lift = function(v) {
	return stx_nano_Chunk._new(v);
};
stx_nano_Chunk.pure = function(c) {
	if(c == null) {
		return stx_nano_ChunkSum.Tap;
	} else {
		return stx_nano_ChunkSum.Val(c);
	}
};
stx_nano_Chunk.unit = function() {
	return stx_nano_ChunkSum.Tap;
};
stx_nano_Chunk.fromTinkOutcome = function(outcome) {
	var tmp;
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		tmp = stx_nano_Chunk.pure(v);
		break;
	case 1:
		var e = outcome.failure;
		var this1 = e.toError().errate(stx_nano_DeclinationSum.REJECT);
		tmp = stx_nano_ChunkSum.End(this1);
		break;
	}
	return stx_nano_Chunk._new(tmp);
};
stx_nano_Chunk.fromOption = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_nano_ChunkSum.Val(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	}
};
stx_nano_Chunk.fromOptionRejection = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_nano_ChunkSum.End(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	}
};
stx_nano_Chunk.all = function(arr,TapFail) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var _g = memo.v;
			switch(next._hx_index) {
			case 0:
				var next1 = next.v;
				var memo1 = _g;
				memo1.push(next1);
				return stx_nano_ChunkSum.Val(memo1);
			case 1:
				var v = _g;
				if(TapFail == null) {
					return stx_nano_ChunkSum.Tap;
				} else {
					return stx_nano_ChunkSum.End(TapFail);
				}
				break;
			case 2:
				var e = next.err;
				var memo1 = _g;
				return stx_nano_ChunkSum.End(e);
			}
			break;
		case 2:
			var _g = memo.err;
			switch(next._hx_index) {
			case 1:
				var e = _g;
				var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e),function(e) {
					return stx_nano_Rejection.concat(e,TapFail);
				});
				var err;
				if(self._hx_index == 0) {
					var v = self.v;
					err = v;
				} else {
					err = TapFail;
				}
				return stx_nano_ChunkSum.End(err);
			case 2:
				var e0 = next.err;
				var e = _g;
				var err = stx_lift_ArrayLift.lfold(stx_pico_OptionLift.toArray(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e)).concat(stx_pico_OptionLift.toArray(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e0))),function(nx,mm) {
					return stx_nano_Rejection.concat(mm,nx);
				},TapFail);
				return stx_nano_ChunkSum.End(err);
			default:
				var e = _g;
				return stx_nano_ChunkSum.End(e);
			}
			break;
		default:
			if(TapFail == null) {
				return stx_nano_ChunkSum.Tap;
			} else {
				return stx_nano_ChunkSum.End(TapFail);
			}
		}
	},stx_nano_ChunkSum.Val([]));
};
stx_nano_Chunk.available = function(rest) {
	return stx_lift_ArrayLift.lfold(rest,function(next,memo) {
		if(memo._hx_index == 0) {
			var xs = memo.v;
			switch(next._hx_index) {
			case 0:
				var x = next.v;
				xs.push(x);
				return stx_nano_ChunkSum.Val(xs);
			case 1:
				return stx_nano_ChunkSum.Val(xs);
			case 2:
				var e = next.err;
				return stx_nano_ChunkSum.End(e);
			}
		} else {
			return memo;
		}
	},stx_nano_ChunkSum.Val([]));
};
stx_nano_Chunk.get_self = function(this1) {
	return this1;
};
var stx_nano_ClusterLift = function() { };
$hxClasses["stx.nano.ClusterLift"] = stx_nano_ClusterLift;
stx_nano_ClusterLift.__name__ = "stx.nano.ClusterLift";
stx_nano_ClusterLift.lift = function(self) {
	return stx_nano_Cluster.lift(self);
};
stx_nano_ClusterLift.fmap = function(self,fn) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(fn(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.accs = function(self,fn) {
	var value = stx_nano_Cluster.toIterable(self);
	return fn(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.flatten = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.flatten(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.interleave = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.interleave(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.is_defined = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return (((value) instanceof Array) ? value : null).length > 0;
};
stx_nano_ClusterLift.cons = function(self,t) {
	var t1 = t;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.cons(self,t1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.snoc = function(self,t) {
	var t1 = t;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.snoc(self,t1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.set = function(self,i,v) {
	var i1 = i;
	var v1 = v;
	var self1 = function(self) {
		var arr0 = self.slice();
		arr0[i1] = v1;
		return arr0;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.get = function(self,i) {
	var i1 = i;
	var tmp = function(self) {
		return self[i1];
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.head = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.head(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.tail = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.tail(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.last = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.last(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.copy = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.copy(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.concat = function(self,that) {
	var that1 = that;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.concat(self,that1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.bind_fold = function(self,pure,init,bind,fold) {
	var pure1 = pure;
	var init1 = init;
	var bind1 = bind;
	var fold1 = fold;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.bind_fold(self,pure1,init1,bind1,fold1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.reduce = function(self,unit,pure,plus) {
	var unit1 = unit;
	var pure1 = pure;
	var plus1 = plus;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.reduce(self,unit1,pure1,plus1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.map = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.map(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.imap = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.imap(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.flat_map = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.flat_map(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.lfold = function(self,fn,memo) {
	var fn1 = fn;
	var memo1 = memo;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.lfold(self,fn1,memo1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.lfold1 = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.lfold1(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.rfold = function(self,fn,z) {
	var fn1 = fn;
	var z1 = z;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.rfold(self,fn1,z1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.rfold1 = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.rfold1(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.lscan = function(self,f,init) {
	var f1 = f;
	var init1 = init;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.lscan(self,f1,init1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.lscan1 = function(self,f) {
	var f1 = f;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.lscan1(self,f1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.rscan = function(self,init,f) {
	var init1 = init;
	var f1 = f;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rscan(self,init1,f1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.rscan1 = function(self,fn) {
	var f = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rscan1(self,f);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.filter = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.filter(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.map_filter = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.map_filter(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.whilst = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.whilst(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.ltaken = function(self,n) {
	var n1 = n;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.ltaken(self,n1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.ldropn = function(self,n) {
	var n1 = n;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.ldropn(self,n1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.rdropn = function(self,n) {
	var n1 = n;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rdropn(self,n1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.ldrop = function(self,p) {
	var p1 = p;
	var self1 = function(self) {
		var r = [].concat(self);
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			if(p1(e)) {
				r.shift();
			} else {
				break;
			}
		}
		return r;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.search = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.search(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.all = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.all(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.any = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.any(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.zip_with = function(self,that,fn) {
	var that1 = that;
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.zip_with(self,that1,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.cross_with = function(self,that,fn) {
	var that1 = that;
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.cross_with(self,that1,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.difference_with = function(self,that,eq) {
	var that1 = that;
	var eq1 = eq;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.difference_with(self,that1,eq1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.union_with = function(self,that,eq) {
	var that1 = that;
	var eq1 = eq;
	var self1 = function(self) {
		var eq = eq1;
		var res = [];
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			res.push(e);
		}
		var _g = 0;
		while(_g < that1.length) {
			var e = [that1[_g]];
			++_g;
			if(!stx_lift_ArrayLift.any(res,(function(e) {
				return function(x) {
					return eq(x,e[0]);
				};
			})(e))) {
				res.push(e[0]);
			}
		}
		return res;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.unique_with = function(self,eq) {
	var eq1 = eq;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.unique_with(self,eq1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.nub_with = function(self,f) {
	var f1 = f;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.nub_with(self,f1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.intersect_with = function(self,that,f) {
	var that1 = that;
	var f1 = f;
	var self1 = function(self) {
		var that = that1;
		var f = f1;
		return stx_lift_ArrayLift.lfold(self,function(next,memo) {
			var _g = f;
			var a1 = next;
			var _g1 = function(a2) {
				return _g(a1,a2);
			};
			if(stx_lift_ArrayLift.any(that,_g1) == true) {
				return stx_lift_ArrayLift.snoc(memo,next);
			} else {
				return memo;
			}
		},[]);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.reversed = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_lift_ArrayLift.lfold(((value) instanceof Array) ? value : null,function(b,a) {
		a.unshift(b);
		return a;
	},[]));
};
stx_nano_ClusterLift.count = function(self,fn) {
	var f = fn;
	var tmp = function(self) {
		var f1 = f;
		return stx_lift_ArrayLift.lfold(self,function(b,a) {
			return a + (f1(b) ? 1 : 0);
		},0);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.size = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return (((value) instanceof Array) ? value : null).length;
};
stx_nano_ClusterLift.index_of = function(self,t) {
	var t1 = t;
	var tmp = function(self) {
		var index = 0;
		var ok = false;
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			if(t1(e)) {
				ok = true;
				break;
			}
			++index;
		}
		if(ok) {
			return index;
		} else {
			return -1;
		}
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.has = function(self,obj) {
	var obj1 = obj;
	var tmp = function(self) {
		var index = self.indexOf(obj1);
		if(index == -1) {
			return haxe_ds_Option.None;
		} else {
			return haxe_ds_Option.Some(index);
		}
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.partition = function(self,f) {
	var f1 = f;
	var tmp = function(self) {
		var f = f1;
		return stx_lift_ArrayLift.lfold(self,function(next,memo) {
			if(f(next)) {
				memo.a.push(next);
			} else {
				memo.b.push(next);
			}
			return memo;
		},{ a : [], b : []});
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.pad = function(self,len,val) {
	var len1 = len;
	var val1 = val;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.pad(self,len1,val1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.fill = function(self,def) {
	var def1 = def;
	var self1 = function(self) {
		var def = def1;
		var result = new Array(self.length);
		var _g = 0;
		var _g1 = self.length;
		while(_g < _g1) {
			var i = _g++;
			var x = self[i];
			result[i] = x == null ? def : x;
		}
		return result;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.toIterable = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.toIterable(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.toMap = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	var self = ((value) instanceof Array) ? value : null;
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_nano_ClusterLift.random = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.random(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.shuffle = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.shuffle(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.and_with = function(self,that,eq) {
	var that1 = that;
	var eq1 = eq;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.and_with(self,that1,eq1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.rotate = function(self,i) {
	var num = i;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rotate(self,num);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.iterator = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return $iterator(stx_nano_ClusterLift._)(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.elide = function(self) {
	return stx_nano_ClusterLift.map(self,function(v) {
		return v;
	});
};
stx_nano_ClusterLift.range = function(self,l,r) {
	var l1 = l;
	var r1 = r;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.range(self,l1,r1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
var stx_nano_Cluster = {};
stx_nano_Cluster.__properties__ = {get_length:"get_length",get_ZERO:"get_ZERO"};
stx_nano_Cluster.ZERO = null;
stx_nano_Cluster.get_ZERO = function() {
	if(stx_nano_Cluster.ZERO == null) {
		return stx_nano_Cluster.ZERO = stx_nano_Cluster._new([]);
	} else {
		return stx_nano_Cluster.ZERO;
	}
};
stx_nano_Cluster._new = function(self) {
	var this1;
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self);
	if(self1._hx_index == 0) {
		var v = self1.v;
		this1 = v;
	} else {
		this1 = [];
	}
	return this1;
};
stx_nano_Cluster.lift = function(self) {
	return stx_nano_Cluster._new(self);
};
stx_nano_Cluster.unit = function() {
	return stx_nano_Cluster.lift([]);
};
stx_nano_Cluster.pure = function(self) {
	return stx_nano_Cluster.lift([self]);
};
stx_nano_Cluster.toIterable = function(this1) {
	return this1;
};
stx_nano_Cluster.toIter = function(this1) {
	return this1;
};
stx_nano_Cluster.concat = function(this1,that) {
	var value = stx_nano_Cluster.toIterable(that);
	return stx_nano_Cluster.lift(this1.concat(((value) instanceof Array) ? value : null));
};
stx_nano_Cluster.copy = function(this1) {
	return stx_nano_Cluster.lift(this1.slice());
};
stx_nano_Cluster.get_length = function(this1) {
	return this1.length;
};
stx_nano_Cluster.prj = function(this1) {
	return this1;
};
stx_nano_Cluster.toString = function(this1) {
	return Std.string(this1);
};
var stx_nano_CompilerTargetSum = $hxEnums["stx.nano.CompilerTargetSum"] = { __ename__:"stx.nano.CompilerTargetSum",__constructs__:null
	,Js: {_hx_name:"Js",_hx_index:0,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Lua: {_hx_name:"Lua",_hx_index:1,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Swf: {_hx_name:"Swf",_hx_index:2,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Neko: {_hx_name:"Neko",_hx_index:3,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Php: {_hx_name:"Php",_hx_index:4,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Cpp: {_hx_name:"Cpp",_hx_index:5,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Cppia: {_hx_name:"Cppia",_hx_index:6,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Cs: {_hx_name:"Cs",_hx_index:7,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Java: {_hx_name:"Java",_hx_index:8,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Python: {_hx_name:"Python",_hx_index:9,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Hl: {_hx_name:"Hl",_hx_index:10,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Interp: {_hx_name:"Interp",_hx_index:11,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
};
stx_nano_CompilerTargetSum.__constructs__ = [stx_nano_CompilerTargetSum.Js,stx_nano_CompilerTargetSum.Lua,stx_nano_CompilerTargetSum.Swf,stx_nano_CompilerTargetSum.Neko,stx_nano_CompilerTargetSum.Php,stx_nano_CompilerTargetSum.Cpp,stx_nano_CompilerTargetSum.Cppia,stx_nano_CompilerTargetSum.Cs,stx_nano_CompilerTargetSum.Java,stx_nano_CompilerTargetSum.Python,stx_nano_CompilerTargetSum.Hl,stx_nano_CompilerTargetSum.Interp];
var stx_nano_CompilerTargetLift = function() { };
$hxClasses["stx.nano.CompilerTargetLift"] = stx_nano_CompilerTargetLift;
stx_nano_CompilerTargetLift.__name__ = "stx.nano.CompilerTargetLift";
stx_nano_CompilerTargetLift.list = function() {
	return stx_nano_Enum.constructs(stx_nano_Enum._new(stx_nano_CompilerTargetSum));
};
stx_nano_CompilerTargetLift.toBuildDirective = function(target) {
	switch(target._hx_index) {
	case 0:
		return haxe_ds_Option.Some("js");
	case 1:
		return haxe_ds_Option.Some("lua");
	case 2:
		return haxe_ds_Option.Some("swf");
	case 3:
		return haxe_ds_Option.Some("neko");
	case 4:
		return haxe_ds_Option.Some("php");
	case 5:
		return haxe_ds_Option.Some("cpp");
	case 6:
		return haxe_ds_Option.Some("cppia");
	case 7:
		return haxe_ds_Option.Some("cs");
	case 8:
		return haxe_ds_Option.Some("java");
	case 9:
		return haxe_ds_Option.Some("python");
	case 10:
		return haxe_ds_Option.Some("hl");
	case 11:
		return haxe_ds_Option.Some("interp");
	}
};
stx_nano_CompilerTargetLift.uses_directory = function(self) {
	switch(self._hx_index) {
	case 4:case 5:case 7:case 8:
		return true;
	case 0:case 1:case 2:case 3:case 6:case 9:case 10:case 11:
		return false;
	}
};
stx_nano_CompilerTargetLift.uses_file = function(self) {
	switch(self._hx_index) {
	case 0:case 1:case 2:case 3:case 6:case 9:case 10:
		return true;
	case 4:case 5:case 7:case 8:case 11:
		return false;
	}
};
stx_nano_CompilerTargetLift.extension = function(self) {
	switch(self._hx_index) {
	case 0:
		return haxe_ds_Option.Some("js");
	case 1:
		return haxe_ds_Option.Some("lua");
	case 2:
		return haxe_ds_Option.Some("swf");
	case 3:
		return haxe_ds_Option.Some("n");
	case 4:
		return haxe_ds_Option.Some("php");
	case 5:
		return haxe_ds_Option.None;
	case 6:
		return haxe_ds_Option.Some("cppia");
	case 7:
		return haxe_ds_Option.None;
	case 8:
		return haxe_ds_Option.None;
	case 9:
		return haxe_ds_Option.Some("py");
	case 10:
		return haxe_ds_Option.Some("hl");
	case 11:
		return haxe_ds_Option.None;
	}
};
stx_nano_CompilerTargetLift.canonical = function(target) {
	return stx_nano_EnumValue.ctr(stx_nano_EnumValue._new(stx_nano_CompilerTarget.prj(target)));
};
var stx_nano_CompilerTarget = {};
stx_nano_CompilerTarget.__properties__ = {get_self:"get_self"};
stx_nano_CompilerTarget._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_CompilerTarget.lift = function(self) {
	return stx_nano_CompilerTarget._new(self);
};
stx_nano_CompilerTarget.prj = function(this1) {
	return this1;
};
stx_nano_CompilerTarget.get_self = function(this1) {
	return stx_nano_CompilerTarget.lift(this1);
};
stx_nano_CompilerTarget.fromString = function(str) {
	switch(str) {
	case "Cppia":
		return stx_nano_CompilerTargetSum.Cppia;
	case "cpp":
		return stx_nano_CompilerTargetSum.Cpp;
	case "cs":
		return stx_nano_CompilerTargetSum.Cs;
	case "hl":
		return stx_nano_CompilerTargetSum.Hl;
	case "interp":
		return stx_nano_CompilerTargetSum.Interp;
	case "java":
		return stx_nano_CompilerTargetSum.Java;
	case "js":
		return stx_nano_CompilerTargetSum.Js;
	case "lua":
		return stx_nano_CompilerTargetSum.Lua;
	case "neko":
		return stx_nano_CompilerTargetSum.Neko;
	case "php":
		return stx_nano_CompilerTargetSum.Php;
	case "python":
		return stx_nano_CompilerTargetSum.Python;
	case "swf":
		return stx_nano_CompilerTargetSum.Swf;
	default:
		haxe_Log.trace(str,{ fileName : "stx/nano/CompilerTarget.hx", lineNumber : 50, className : "stx.nano._CompilerTarget.CompilerTarget_Impl_", methodName : "fromString"});
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/CompilerTarget.hx", lineNumber : 51, className : "stx.nano._CompilerTarget.CompilerTarget_Impl_", methodName : "fromString"});
		var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		throw haxe_Exception.thrown(this2);
	}
};
var stx_nano_ContractLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.ContractLift"] = stx_nano_ContractLift;
stx_nano_ContractLift.__name__ = "stx.nano.ContractLift";
stx_nano_ContractLift.lift = function(self) {
	return stx_nano_Contract.lift(self);
};
stx_nano_ContractLift.toJsPromise = function(self) {
	var promise = new Promise(function(resolve,reject) {
		try {
			stx_nano_Contract.handle(self,function(res) {
				switch(res._hx_index) {
				case 0:
					var v = res.v;
					resolve(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.Some(v)));
					break;
				case 1:
					resolve(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.None));
					break;
				case 2:
					var e = res.err;
					reject(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
					break;
				}
			});
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof stx_pico_Error)) {
				var e = _g1;
				reject(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.fromError(e)));
			} else if(((_g1) instanceof Error)) {
				var e = _g1;
				var reject1 = reject;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Contract.hx", lineNumber : 172, className : "stx.nano.ContractLift", methodName : "toJsPromise"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				reject1(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2));
			} else {
				throw _g;
			}
		}
	});
	return promise;
};
stx_nano_ContractLift.zip = function(self,that) {
	var out = tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(self,that),function(tp) {
		return stx_nano_ChunkLift.zip(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	});
	return out;
};
stx_nano_ContractLift.map = function(self,fn) {
	return stx_nano_ContractLift.lift(tink_core_Future.map(self,function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return stx_nano_ChunkSum.Val(fn(v));
		case 1:
			return stx_nano_ChunkSum.Tap;
		case 2:
			var err = x.err;
			return stx_nano_ChunkSum.End(err);
		}
	}));
};
stx_nano_ContractLift.flat_map = function(self,fn) {
	var ft = stx_nano_Contract.prj(self);
	return tink_core_Future.flatMap(ft,function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return stx_nano_Contract.prj(fn(v));
		case 1:
			return stx_nano_Contract.prj(stx_nano_Contract._new(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_ChunkSum.Tap))));
		case 2:
			var err = x.err;
			return stx_nano_Contract.prj(stx_nano_Contract.fromChunk(stx_nano_ChunkSum.End(err)));
		}
	});
};
stx_nano_ContractLift.flat_fold = function(self,val,ers,nil) {
	return tink_core_Future.flatMap(self,function(chunk) {
		switch(chunk._hx_index) {
		case 0:
			var v = chunk.v;
			return val(v);
		case 1:
			return nil();
		case 2:
			var e = chunk.err;
			return ers(e);
		}
	});
};
stx_nano_ContractLift.fold = function(self,val,ers,nil) {
	var val1 = val;
	var ers1 = ers;
	var tap = nil;
	var tmp = function(chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return val1(v);
		case 1:
			return tap();
		case 2:
			var e = chk.err;
			return ers1(e);
		}
	};
	return tink_core_Future.map(stx_nano_Contract.prj(self),tmp);
};
stx_nano_ContractLift.recover = function(self,fn) {
	return stx_nano_ContractLift.lift(stx_nano_ContractLift.fold(self,function(x) {
		return stx_nano_ChunkSum.Val(x);
	},function(e) {
		return fn(e);
	},function() {
		return stx_nano_ChunkSum.Tap;
	}));
};
stx_nano_ContractLift.adjust = function(self,fn) {
	return stx_nano_ContractLift.lift(stx_nano_ContractLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_nano_ChunkSum.End(v);
	},function() {
		return stx_nano_ChunkSum.Tap;
	}));
};
stx_nano_ContractLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_nano_Contract.prj(self),function(chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			fn(v);
			return haxe_ds_Option.None;
		case 1:
			return haxe_ds_Option.None;
		case 2:
			var e = chk.err;
			return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
		}
	});
};
stx_nano_ContractLift.now = function(self) {
	var out = null;
	stx_nano_Contract.prj(self).handle(function(v) {
		out = v;
	});
	if(out == null) {
		out = stx_nano_ChunkSum.Tap;
	}
	return out;
};
stx_nano_ContractLift.errata = function(self,fn) {
	return tink_core_Future.map(stx_nano_Contract.prj(self),function(chk) {
		return stx_nano_ChunkLift.errata(chk,fn);
	});
};
stx_nano_ContractLift.errate = function(self,fn) {
	return stx_nano_ContractLift.errata(self,function(x) {
		return stx_nano_Rejection.errate(x,fn);
	});
};
stx_nano_ContractLift.tap = function(self,fn,pos) {
	return stx_nano_ContractLift.lift(tink_core_Future.map(stx_nano_Contract.prj(self),function(x) {
		fn(x,pos);
		return x;
	}));
};
stx_nano_ContractLift.__super__ = stx_pico_Clazz;
stx_nano_ContractLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_ContractLift
});
var stx_nano_Contract = $hx_exports["stx"]["nano"]["Contract"] = {};
stx_nano_Contract._new = function(v) {
	var this1 = v;
	return this1;
};
stx_nano_Contract.lift = function(self) {
	return stx_nano_Contract._new(self);
};
stx_nano_Contract.unit = function() {
	return stx_nano_Contract.pure(stx_nano_ChunkSum.Tap);
};
stx_nano_Contract.sync = function(ch) {
	return stx_nano_Contract.lift(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(ch)));
};
stx_nano_Contract.pure = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(ch);
	});
};
stx_nano_Contract.accept = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(stx_nano_ChunkSum.Val(ch));
	});
};
stx_nano_Contract.reject = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(stx_nano_ChunkSum.End(ch));
	});
};
stx_nano_Contract.bind_fold = function(it,fm,start) {
	return stx_nano_Contract._new(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(it,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var v = memo.v;
			return stx_nano_Contract.prj(fm(next,v));
		case 1:
			return stx_nano_Contract.prj(stx_nano_Contract.unit());
		case 2:
			var err = memo.err;
			return stx_nano_Contract.prj(stx_nano_Contract.end(err));
		}
	},stx_nano_ChunkSum.Val(start)));
};
stx_nano_Contract.lazy = function(fn) {
	return stx_nano_Contract.lift(tink_core_Future.irreversible(function(f) {
		f(stx_nano_ChunkSum.Val(fn()));
	}));
};
stx_nano_Contract.fromLazyError = function(fn) {
	return stx_nano_Contract.fromLazyChunk(function() {
		var this1 = fn().errate(stx_nano_DeclinationSum.REJECT);
		return stx_nano_ChunkSum.End(this1);
	});
};
stx_nano_Contract.fromLazyRejection = function(fn) {
	return stx_nano_Contract.fromLazyChunk(function() {
		return stx_nano_ChunkSum.End(fn());
	});
};
stx_nano_Contract.fromLazyChunk = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_nano_Contract.end = function(e) {
	return stx_nano_Contract.pure(stx_nano_ChunkSum.End(e));
};
stx_nano_Contract.tap = function() {
	return stx_nano_Contract.unit();
};
stx_nano_Contract.fromChunk = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_nano_Contract.fromOption = function(m) {
	var val;
	switch(m._hx_index) {
	case 0:
		var t = m.v;
		val = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		val = stx_nano_ChunkSum.Tap;
		break;
	}
	var val1 = val;
	return stx_nano_Contract.fromChunk(val1);
};
stx_nano_Contract.fromUpshot = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return stx_nano_Contract.pure(tmp);
};
stx_nano_Contract.toTinkSurprise = function(this1) {
	return stx_nano_Contract._.fold(this1,tink_core_Outcome.Success,function(e) {
		var tmp = e.toString();
		var self = e.get_val();
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = null;
		}
		var self = e.get_pos();
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = null;
		}
		return tink_core_Outcome.Failure(tink_core_TypedError.withData(500,tmp,tmp1,tmp2));
	},function() {
		return tink_core_Outcome.Failure(new tink_core_TypedError(500,"empty",{ fileName : "stx/nano/Contract.hx", lineNumber : 102, className : "stx.nano._Contract.Contract_Impl_", methodName : "toTinkSurprise"}));
	});
};
stx_nano_Contract.fromJsPromise = function(self,pos) {
	return stx_nano_Contract.lift(tink_core_Future.map(tink_core_Future.ofJsPromise(self),function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			return stx_nano_ChunkSum.Val(v);
		case 1:
			var e = outcome.failure;
			var _g = Type.typeof(e.data);
			if(_g._hx_index == 6) {
				if(_g.c == Error) {
					var er = e.data;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),er)));
					var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
						return stx_nano_Rejection.prj(x);
					});
					if(data == null) {
						data = haxe_ds_Option.None;
					}
					if(lst == null) {
						lst = haxe_ds_Option.None;
					}
					var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
					return stx_nano_ChunkSum.End(this2);
				} else {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),new Error("" + (e.data == null ? "null" : Std.string(e.data))))));
					var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
						return stx_nano_Rejection.prj(x);
					});
					if(data == null) {
						data = haxe_ds_Option.None;
					}
					if(lst == null) {
						lst = haxe_ds_Option.None;
					}
					var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
					return stx_nano_ChunkSum.End(this2);
				}
			} else {
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),new Error("" + (e.data == null ? "null" : Std.string(e.data))))));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				return stx_nano_ChunkSum.End(this2);
			}
			break;
		}
	}));
};
stx_nano_Contract.prj = function(this1) {
	return this1;
};
stx_nano_Contract.handle = function(this1,fn) {
	return this1.handle(fn);
};
stx_nano_Contract.seq = function(iter) {
	return stx_nano_Contract.bind_fold(iter,function(next,memo) {
		return stx_nano_ContractLift.map(next,function(a) {
			return stx_lift_ArrayLift.snoc(memo,a);
		});
	},[]);
};
var stx_nano_Counter = function(value) {
	if(value == null) {
		value = 0;
	}
	this.value = value;
};
$hxClasses["stx.nano.Counter"] = stx_nano_Counter;
stx_nano_Counter.__name__ = "stx.nano.Counter";
stx_nano_Counter.prototype = {
	value: null
	,next: function() {
		var result = this.value;
		this.value += 1;
		return result;
	}
	,__class__: stx_nano_Counter
};
var stx_nano_CoupleLift = function() { };
$hxClasses["stx.nano.CoupleLift"] = stx_nano_CoupleLift;
stx_nano_CoupleLift.__name__ = "stx.nano.CoupleLift";
stx_nano_CoupleLift.map = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(ti,fn(tii));
		});
	};
};
stx_nano_CoupleLift.mapl = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(fn(ti),tii);
		});
	};
};
stx_nano_CoupleLift.mapr = function(self,fn) {
	return stx_nano_CoupleLift.map(self,fn);
};
stx_nano_CoupleLift.fst = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(tI,_) {
		return tI;
	});
};
stx_nano_CoupleLift.snd = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(_,tII) {
		return tII;
	});
};
stx_nano_CoupleLift.swap = function(self) {
	return function(tp) {
		self(function(ti,tii) {
			tp(tii,ti);
		});
	};
};
stx_nano_CoupleLift.equals = function(lhs,rhs) {
	return stx_nano_CoupleLift.decouple(lhs,function(t0l,t0r) {
		return stx_nano_CoupleLift.decouple(rhs,function(t1l,t1r) {
			if(t0l == t1l) {
				return t0r == t1r;
			} else {
				return false;
			}
		});
	});
};
stx_nano_CoupleLift.reduce = function(self,flhs,frhs,plus) {
	return stx_nano_CoupleLift.decouple(self,function(tI,tII) {
		return plus(flhs(tI),frhs(tII));
	});
};
stx_nano_CoupleLift.decouple = function(self,fn) {
	var out = null;
	self(function(ti,tii) {
		out = fn(ti,tii);
	});
	return out;
};
stx_nano_CoupleLift.cat = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return [haxe_ds_Either.Left(l),haxe_ds_Either.Right(r)];
	});
};
stx_nano_CoupleLift.tup = function(self) {
	return stx_nano_CoupleLift.decouple(self,stx_Tup2.tuple2);
};
stx_nano_CoupleLift.toString = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return "(" + Std.string(l) + " " + Std.string(r) + ")";
	});
};
var stx_nano_Couple = {};
stx_nano_Couple.make = function(lhs,rhs) {
	return function(cb) {
		cb(lhs,rhs);
	};
};
stx_nano_Couple.toString = function(this1) {
	return stx_nano_CoupleLift.toString(this1);
};
var stx_nano_DeclinationSum = $hxEnums["stx.nano.DeclinationSum"] = { __ename__:"stx.nano.DeclinationSum",__constructs__:null
	,REJECT: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.DeclinationSum",toString:$estr}; },$_._hx_name="REJECT",$_.__params__ = ["v"],$_)
	,DIGEST: ($_=function(digest) { return {_hx_index:1,digest:digest,__enum__:"stx.nano.DeclinationSum",toString:$estr}; },$_._hx_name="DIGEST",$_.__params__ = ["digest"],$_)
};
stx_nano_DeclinationSum.__constructs__ = [stx_nano_DeclinationSum.REJECT,stx_nano_DeclinationSum.DIGEST];
var stx_nano_DeclinationLift = function() { };
$hxClasses["stx.nano.DeclinationLift"] = stx_nano_DeclinationLift;
stx_nano_DeclinationLift.__name__ = "stx.nano.DeclinationLift";
stx_nano_DeclinationLift.fold = function(self,val,def) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return val(v);
	case 1:
		var e = self.digest;
		return def(e);
	}
};
stx_nano_DeclinationLift.fold_filter = function(self,val,def) {
	return stx_nano_DeclinationLift.fold(self,function(x) {
		return stx_nano_lift_LiftNano.if_else(val(x),function() {
			return stx_pico_Option.pure(stx_nano_DeclinationSum.REJECT(x));
		},function() {
			return stx_pico_Option.unit();
		});
	},function(x) {
		return stx_nano_lift_LiftNano.if_else(def(x),function() {
			return stx_pico_Option.pure(stx_nano_DeclinationSum.DIGEST(x));
		},function() {
			return stx_pico_Option.unit();
		});
	});
};
stx_nano_DeclinationLift.pick = function(self,val,code) {
	return !stx_pico_OptionLift.is_defined(stx_nano_DeclinationLift.fold_filter(self,val,code));
};
stx_nano_DeclinationLift.value = function(self) {
	return stx_nano_DeclinationLift.fold(self,haxe_ds_Option.Some,function(_) {
		return haxe_ds_Option.None;
	});
};
stx_nano_DeclinationLift.toString = function(self) {
	return stx_nano_DeclinationLift.fold(self,function(v) {
		return Std.string(v);
	},function(n) {
		return n.toString();
	});
};
stx_nano_DeclinationLift.map = function(self,fn) {
	return stx_nano_Declination._new(stx_nano_DeclinationLift.fold(self,function(x) {
		return stx_nano_DeclinationSum.REJECT(fn(x));
	},function(y) {
		return stx_nano_DeclinationSum.DIGEST(y);
	}));
};
var stx_nano_Declination = {};
stx_nano_Declination.__properties__ = {get_self:"get_self"};
stx_nano_Declination._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Declination.lift = function(self) {
	return stx_nano_Declination._new(self);
};
stx_nano_Declination.fromDigest = function(code) {
	return stx_nano_DeclinationSum.DIGEST(code);
};
stx_nano_Declination.fromErrOf = function(v) {
	return stx_nano_DeclinationSum.REJECT(v);
};
stx_nano_Declination.report = function(this1,pos) {
	var this2 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
	var data = haxe_ds_Option.Some(this1);
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this1 = new stx_pico_ErrorBase(data,lst,this2 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this2)).toError();
	return stx_nano_Report.pure(this1);
};
stx_nano_Declination.prj = function(this1) {
	return this1;
};
stx_nano_Declination.get_self = function(this1) {
	return stx_nano_Declination._new(this1);
};
var stx_nano_DefectApi = function() { };
$hxClasses["stx.nano.DefectApi"] = stx_nano_DefectApi;
stx_nano_DefectApi.__name__ = "stx.nano.DefectApi";
stx_nano_DefectApi.__isInterface__ = true;
stx_nano_DefectApi.prototype = {
	error: null
	,get_error: null
	,toDefect: null
	,__class__: stx_nano_DefectApi
	,__properties__: {get_error:"get_error"}
};
var stx_nano_DefectCls = function(error) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_nano_Errata.unit();
	}
	this.error = tmp;
};
$hxClasses["stx.nano.DefectCls"] = stx_nano_DefectCls;
stx_nano_DefectCls.__name__ = "stx.nano.DefectCls";
stx_nano_DefectCls.__interfaces__ = [stx_nano_DefectApi];
stx_nano_DefectCls.prototype = {
	error: null
	,get_error: function() {
		return this.error;
	}
	,toDefect: function() {
		return this;
	}
	,__class__: stx_nano_DefectCls
	,__properties__: {get_error:"get_error"}
};
var stx_nano_DefectLift = function() { };
$hxClasses["stx.nano.DefectLift"] = stx_nano_DefectLift;
stx_nano_DefectLift.__name__ = "stx.nano.DefectLift";
stx_nano_DefectLift.concat = function(self,that) {
	return stx_nano_Defect.make(stx_nano_ErrataLift.concat(self.get_error(),that.get_error()));
};
stx_nano_DefectLift.errate = function(self,fn) {
	return stx_nano_Defect.make(stx_nano_ErrataLift.errata(self.get_error(),function(e) {
		return e.errate(fn);
	}));
};
stx_nano_DefectLift.has_error = function(self) {
	return stx_nano_ErrataLift.is_defined(self.get_error());
};
var stx_nano_Defect = {};
stx_nano_Defect._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Defect.lift = function(self) {
	return stx_nano_Defect._new(self);
};
stx_nano_Defect.unit = function() {
	return stx_nano_Defect.lift(new stx_nano_DefectCls(stx_nano_Errata.unit()));
};
stx_nano_Defect.pure = function(e) {
	return stx_nano_Defect.make(stx_nano_Errata.lift([e]));
};
stx_nano_Defect.make = function(data) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data),function(x) {
		return stx_nano_Defect.lift(new stx_nano_DefectCls(x));
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_nano_Defect.unit();
	}
};
stx_nano_Defect.toErrorAt = function(this1,pos) {
	return stx_nano_Errata._.toErrorAt(this1.get_error(),pos);
};
stx_nano_Defect.fromError = function(self) {
	return stx_nano_Defect.make(stx_nano_Errata.lift(self));
};
stx_nano_Defect.elide = function(this1) {
	return this1;
};
stx_nano_Defect.entype = function(this1) {
	return this1;
};
stx_nano_Defect.toError = function(this1) {
	return stx_nano_ErrataLift.toError(this1.get_error());
};
stx_nano_Defect.prj = function(this1) {
	return this1;
};
var stx_nano_Embed = {};
stx_nano_Embed._new = function() {
	var this1 = stx_nano__$Embed_Constructor.embed();
	return this1;
};
var stx_nano__$Embed_Constructor = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano._Embed.Constructor"] = stx_nano__$Embed_Constructor;
stx_nano__$Embed_Constructor.__name__ = "stx.nano._Embed.Constructor";
stx_nano__$Embed_Constructor.embed = function() {
	var r = haxe_ds_Option.None;
	var unpack = null;
	unpack = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return r;
	};
	var pull = null;
	pull = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return stx_pico_OptionLift.fudge(r);
	};
	var pack = null;
	pack = function(v) {
		var o = haxe_ds_Option.Some(v);
		return function() {
			r = o;
		};
	};
	var check = null;
	check = function(fn) {
		var _g = unpack(fn);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			return true;
		case 1:
			return false;
		}
	};
	return { pack : pack, unpack : unpack, pull : pull, check : check};
};
stx_nano__$Embed_Constructor.__super__ = stx_pico_Clazz;
stx_nano__$Embed_Constructor.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano__$Embed_Constructor
});
var stx_nano_Endianness = $hxEnums["stx.nano.Endianness"] = { __ename__:"stx.nano.Endianness",__constructs__:null
	,BIG_ENDIAN: {_hx_name:"BIG_ENDIAN",_hx_index:0,__enum__:"stx.nano.Endianness",toString:$estr}
	,LITTLE_ENDIAN: {_hx_name:"LITTLE_ENDIAN",_hx_index:1,__enum__:"stx.nano.Endianness",toString:$estr}
};
stx_nano_Endianness.__constructs__ = [stx_nano_Endianness.BIG_ENDIAN,stx_nano_Endianness.LITTLE_ENDIAN];
var stx_nano_Enquire = {};
stx_nano_Enquire.__properties__ = {get_self:"get_self"};
stx_nano_Enquire._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Enquire.lift = function(self) {
	return stx_nano_Enquire._new(self);
};
stx_nano_Enquire.prj = function(this1) {
	return this1;
};
stx_nano_Enquire.get_self = function(this1) {
	return stx_nano_Enquire.lift(this1);
};
var stx_nano_EnquireLift = function() { };
$hxClasses["stx.nano.EnquireLift"] = stx_nano_EnquireLift;
stx_nano_EnquireLift.__name__ = "stx.nano.EnquireLift";
var stx_nano_Ensemble = {};
stx_nano_Ensemble.__properties__ = {get_self:"get_self"};
stx_nano_Ensemble.object_access = function(self,str) {
	return stx_nano_Ensemble.prj(self)[str];
};
stx_nano_Ensemble._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Ensemble.lift = function(self) {
	return stx_nano_Ensemble._new(self);
};
stx_nano_Ensemble.unit = function() {
	return stx_nano_Ensemble.lift({ });
};
stx_nano_Ensemble.fromMap = function(self) {
	var data = { };
	var h = self.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var k = _g1_key;
		var v = _g1_value;
		data[k] = v;
	}
	return stx_nano_Ensemble.lift(data);
};
stx_nano_Ensemble.fromIterKV = function(self) {
	var data = { };
	var v = $getIterator(self);
	while(v.hasNext()) {
		var v1 = v.next();
		data[v1.key] = v1.val;
	}
	return stx_nano_Ensemble.lift(data);
};
stx_nano_Ensemble.prj = function(this1) {
	return this1;
};
stx_nano_Ensemble.get_self = function(this1) {
	return stx_nano_Ensemble.lift(this1);
};
stx_nano_Ensemble.set = function(this1,key,val) {
	var next = stx_nano_Ensemble.prj(stx_nano_Ensemble.copy(this1));
	next[key] = val;
	return stx_nano_Ensemble.lift(next);
};
stx_nano_Ensemble.concat = function(this1,that) {
	var next = stx_nano_Ensemble.prj(stx_nano_Ensemble.copy(this1));
	var _g = $getKeyValueIterator(that);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var k = _g1.key;
		var v = _g1.value;
		next[k] = v;
	}
	return stx_nano_Ensemble.lift(next);
};
stx_nano_Ensemble.copy = function(this1) {
	var next = { };
	var access = this1;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1_value = _g_access[key];
		var _g1_key = key;
		var k = _g1_key;
		var v = _g1_value;
		next[k] = v;
	}
	return stx_nano_Ensemble.lift(next);
};
stx_nano_Ensemble.fromClusterCouple = function(self) {
	var thiz = { };
	var _g_current = 0;
	var _g_array = self;
	while(_g_current < _g_array.length) {
		var tup = _g_array[_g_current++];
		tup(function(l,r) {
			thiz[l] = r;
		});
	}
	return stx_nano_Ensemble.lift(thiz);
};
stx_nano_Ensemble.toCluster = function(this1) {
	var next = [];
	var access = this1;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1_value = _g_access[key];
		var _g1_key = key;
		var k = _g1_key;
		var v = _g1_value;
		next.push(stx_nano_Field.make(k,v));
	}
	return stx_nano_Cluster.lift(next);
};
stx_nano_Ensemble.toClusterCouple = function(this1) {
	var next = [];
	var access = this1;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g1_value = _g_access[key];
		var _g1_key = key;
		var k = _g1_key;
		var v = _g1_value;
		next.push(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,k,v));
	}
	return stx_nano_Cluster.lift(next);
};
stx_nano_Ensemble.toIterKV = function(this1) {
	return stx_nano_IterKV.fromEnsemble(this1);
};
var stx_nano_EnsembleLift = function() { };
$hxClasses["stx.nano.EnsembleLift"] = stx_nano_EnsembleLift;
stx_nano_EnsembleLift.__name__ = "stx.nano.EnsembleLift";
var stx_nano_Enum = {};
stx_nano_Enum._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Enum.constructs = function(this1) {
	var _this = this1.__constructs__;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i]._hx_name;
	}
	return result;
};
stx_nano_Enum.$name = function(this1) {
	return this1.__ename__;
};
stx_nano_Enum.construct = function(this1,cons,args) {
	switch(cons._hx_index) {
	case 0:
		var i = cons.v;
		return stx_pico_Option.fromNullT(Type.createEnumIndex(this1,i,args));
	case 1:
		var s = cons.v;
		return stx_pico_Option.fromNullT(Type.createEnum(this1,s,args));
	}
};
var stx_nano_EnumValue = {};
stx_nano_EnumValue.pure = function(self) {
	return stx_nano_EnumValue._new(self);
};
stx_nano_EnumValue._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_EnumValue.params = function(this1) {
	return Type.enumParameters(this1);
};
stx_nano_EnumValue.ctr = function(this1) {
	return $hxEnums[this1.__enum__].__constructs__[this1._hx_index]._hx_name;
};
stx_nano_EnumValue.index = function(this1) {
	return this1._hx_index;
};
stx_nano_EnumValue.alike = function(this1,that) {
	if(stx_nano_EnumValue.ctr(this1) == stx_nano_EnumValue.ctr(that)) {
		return stx_nano_EnumValue.index(this1) == stx_nano_EnumValue.index(that);
	} else {
		return false;
	}
};
stx_nano_EnumValue.prj = function(this1) {
	return this1;
};
var stx_nano_ReceiptApi = function() { };
$hxClasses["stx.nano.ReceiptApi"] = stx_nano_ReceiptApi;
stx_nano_ReceiptApi.__name__ = "stx.nano.ReceiptApi";
stx_nano_ReceiptApi.__isInterface__ = true;
stx_nano_ReceiptApi.__interfaces__ = [stx_nano_DefectApi];
stx_nano_ReceiptApi.prototype = {
	value: null
	,__class__: stx_nano_ReceiptApi
};
var stx_nano_EquityApi = function() { };
$hxClasses["stx.nano.EquityApi"] = stx_nano_EquityApi;
stx_nano_EquityApi.__name__ = "stx.nano.EquityApi";
stx_nano_EquityApi.__isInterface__ = true;
stx_nano_EquityApi.__interfaces__ = [stx_nano_ReceiptApi];
stx_nano_EquityApi.prototype = {
	asset: null
	,toEquity: null
	,__class__: stx_nano_EquityApi
};
var stx_nano_ReceiptCls = function(error,value) {
	stx_nano_DefectCls.call(this,error);
	this.value = value;
};
$hxClasses["stx.nano.ReceiptCls"] = stx_nano_ReceiptCls;
stx_nano_ReceiptCls.__name__ = "stx.nano.ReceiptCls";
stx_nano_ReceiptCls.__interfaces__ = [stx_nano_ReceiptApi];
stx_nano_ReceiptCls.__super__ = stx_nano_DefectCls;
stx_nano_ReceiptCls.prototype = $extend(stx_nano_DefectCls.prototype,{
	value: null
	,__class__: stx_nano_ReceiptCls
});
var stx_nano_EquityCls = function(error,value,asset) {
	stx_nano_ReceiptCls.call(this,error,value);
	this.asset = asset;
};
$hxClasses["stx.nano.EquityCls"] = stx_nano_EquityCls;
stx_nano_EquityCls.__name__ = "stx.nano.EquityCls";
stx_nano_EquityCls.__interfaces__ = [stx_nano_EquityApi];
stx_nano_EquityCls.__super__ = stx_nano_ReceiptCls;
stx_nano_EquityCls.prototype = $extend(stx_nano_ReceiptCls.prototype,{
	asset: null
	,toEquity: function() {
		return this;
	}
	,__class__: stx_nano_EquityCls
});
var stx_nano_EquityLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.EquityLift"] = stx_nano_EquityLift;
stx_nano_EquityLift.__name__ = "stx.nano.EquityLift";
stx_nano_EquityLift.make = function() {
	return new stx_nano_EquityLift();
};
stx_nano_EquityLift.lift = function(self) {
	return stx_nano_Equity.lift(self);
};
stx_nano_EquityLift.errate = function(self,fn) {
	return stx_nano_EquityLift.errata(self,function(x) {
		return x.errate(fn);
	});
};
stx_nano_EquityLift.errata = function(self,fn) {
	return stx_nano_Equity.make(self.asset,self.value,stx_nano_ErrataLift.errata(self.get_error(),fn));
};
stx_nano_EquityLift.copy = function(self,asset,value,error) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var v = self.get_error();
	var tmp;
	if(self1._hx_index == 0) {
		var v1 = self1.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,value);
	var tmp1;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp1 = v;
	} else {
		tmp1 = self.value;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,asset);
	var tmp2;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp2 = v;
	} else {
		tmp2 = self.asset;
	}
	return stx_nano_EquityLift.lift(new stx_nano_EquityCls(tmp,tmp1,tmp2).toEquity());
};
stx_nano_EquityLift.map = function(self,fn) {
	var self1 = self.asset;
	var self2 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self.value);
	var tmp;
	switch(self2._hx_index) {
	case 0:
		var t = self2.v;
		tmp = fn(t);
		break;
	case 1:
		tmp = null;
		break;
	}
	return stx_nano_Equity.make(self1,tmp,self.get_error());
};
stx_nano_EquityLift.mapi = function(self,fn) {
	return stx_nano_Equity.make(fn(self.asset),self.value,self.get_error());
};
stx_nano_EquityLift.is_defined = function(self) {
	return self.value != null;
};
stx_nano_EquityLift.has_error = function(self) {
	return stx_nano_ErrataLift.is_defined(self.get_error());
};
stx_nano_EquityLift.is_ok = function(self) {
	return !stx_nano_ErrataLift.is_defined(self.get_error());
};
stx_nano_EquityLift.defect = function(self,error) {
	return stx_nano_EquityLift.copy(self,null,null,stx_nano_ErrataLift.concat(self.get_error(),error));
};
stx_nano_EquityLift.relate = function(self,value) {
	if(stx_nano_EquityLift.has_error(stx_nano_EquityLift.lift(self))) {
		return self;
	} else {
		return stx_nano_EquityLift.copy(self,null,value);
	}
};
stx_nano_EquityLift.toUpshot = function(self) {
	if(stx_nano_ErrataLift.is_defined(self.get_error())) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.fromError(stx_nano_ErrataLift.toError(self.get_error())));
	} else {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,self.value);
	}
};
stx_nano_EquityLift.__super__ = stx_pico_Clazz;
stx_nano_EquityLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_EquityLift
});
var stx_nano_Equity = {};
stx_nano_Equity.__properties__ = {get_self:"get_self"};
stx_nano_Equity._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Equity.lift = function(self) {
	return stx_nano_Equity._new(self);
};
stx_nano_Equity.prj = function(this1) {
	return this1;
};
stx_nano_Equity.get_self = function(this1) {
	return stx_nano_Equity.lift(this1);
};
stx_nano_Equity.make = function(asset,value,error) {
	return stx_nano_Equity.lift(new stx_nano_EquityCls(error,value,asset).toEquity());
};
stx_nano_Equity.toError = function(this1) {
	return stx_nano_ErrataLift.toError(this1.get_error());
};
var stx_nano_ErrataLift = function() { };
$hxClasses["stx.nano.ErrataLift"] = stx_nano_ErrataLift;
stx_nano_ErrataLift.__name__ = "stx.nano.ErrataLift";
stx_nano_ErrataLift.errata = function(self,fn) {
	return stx_nano_lift_LiftNano.if_else(stx_nano_IterLift.is_defined(self),function() {
		return stx_nano_ErrataLift.fromError(fn(stx_nano_ErrataLift.toError(self)));
	},function() {
		return stx_nano_Errata.elide(stx_nano_Errata.lift(self));
	});
};
stx_nano_ErrataLift.toError = function(self) {
	return stx_nano_ErrataLift.toErrorAt(self,null);
};
stx_nano_ErrataLift.toErrorAt = function(self,pos) {
	var all = Lambda.array(self);
	all.reverse();
	var rec = null;
	rec = function(arr) {
		var head = stx_lift_ArrayLift.head(arr);
		var tail = stx_lift_ArrayLift.tail(arr);
		var _g = tail.length > 0;
		switch(head._hx_index) {
		case 0:
			var _g1 = head.v;
			if(_g) {
				var h = _g1;
				var data = haxe_ds_Option.Some(h);
				var lst = haxe_ds_Option.Some(rec(tail));
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
			} else {
				var h = _g1;
				var data = haxe_ds_Option.Some(h);
				var lst = haxe_ds_Option.None;
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
			}
			break;
		case 1:
			var data = haxe_ds_Option.None;
			var lst = haxe_ds_Option.None;
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
		}
	};
	var result = rec(all);
	return result;
};
stx_nano_ErrataLift.fromError = function(self) {
	return stx_nano_Errata.lift({ iterator : function() {
		return { hasNext : function() {
			return self != null;
		}, next : function() {
			var self1 = self.get_val();
			var val;
			if(self1._hx_index == 0) {
				var v = self1.v;
				val = v;
			} else {
				val = null;
			}
			var self1 = self.get_lst();
			if(self1._hx_index == 0) {
				var v = self1.v;
				self = v;
			} else {
				self = null;
			}
			return val;
		}};
	}});
};
stx_nano_ErrataLift.concat = function(self,that) {
	return stx_nano_Errata.lift(stx_lift_IterableLift.concat(stx_nano_Iter.prj(self),stx_nano_Errata.prj(that)));
};
stx_nano_ErrataLift.is_defined = function(self) {
	return stx_nano_IterLift.is_defined(self);
};
var stx_nano_Errata = {};
stx_nano_Errata.__properties__ = {get_self:"get_self"};
stx_nano_Errata._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Errata.lift = function(self) {
	return stx_nano_Errata._new(self);
};
stx_nano_Errata.unit = function() {
	return stx_nano_Errata.lift(stx_nano_Iter.unit());
};
stx_nano_Errata.prj = function(this1) {
	return this1;
};
stx_nano_Errata.get_self = function(this1) {
	return stx_nano_Errata.lift(this1);
};
stx_nano_Errata.elide = function(this1) {
	return this1;
};
stx_nano_Errata.toString = function(this1) {
	var str = "\n";
	var x = $getIterator(this1);
	while(x.hasNext()) {
		var x1 = x.next();
		str += "" + Std.string(x1) + "\n";
	}
	return str;
};
stx_nano_Errata.fromArray = function(self) {
	return stx_nano_Errata.lift(stx_nano_Iter.lift(self));
};
var stx_nano_FPath = {};
stx_nano_FPath.lift = function(self) {
	return stx_nano_FPath._new(self);
};
stx_nano_FPath._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_FPath.unit = function() {
	return stx_nano_FPath.lift("/");
};
stx_nano_FPath.pure = function(str) {
	return stx_nano_FPath._new(str);
};
stx_nano_FPath.into = function(this1,str) {
	return stx_nano_FPath._new(stx_nano_lift_LiftNano.if_else(stx_nano_FPath.has_end_slash(this1),function() {
		return "" + this1 + str;
	},function() {
		return "" + this1 + "/" + str;
	}));
};
stx_nano_FPath.trim_end_slash = function(this1) {
	return stx_nano_lift_LiftNano.if_else(stx_nano_FPath.has_end_slash(this1),function() {
		return stx_nano_FPath.lift(stx_nano_CharsLift.rdropn(this1,1));
	},function() {
		return stx_nano_FPath.lift(this1);
	});
};
stx_nano_FPath.has_end_slash = function(this1) {
	return StringTools.endsWith(this1,"/");
};
stx_nano_FPath.is_absolute = function(this1) {
	return StringTools.startsWith(this1,"/");
};
stx_nano_FPath.fromString = function(str) {
	return stx_nano_FPath.lift(str);
};
stx_nano_FPath.toString = function(this1) {
	return this1;
};
stx_nano_FPath.toArray = function(this1) {
	var splut = this1.split("/");
	if(stx_nano_FPath.is_absolute(this1)) {
		splut.shift();
	}
	if(stx_nano_FPath.has_end_slash(this1)) {
		splut.pop();
	}
	return splut;
};
stx_nano_FPath.head = function(this1) {
	return stx_lift_ArrayLift.head(stx_nano_FPath.toArray(this1));
};
stx_nano_FPath.prj = function(this1) {
	return this1;
};
var stx_nano_Fault = {};
stx_nano_Fault._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Fault.lift = function(self) {
	return stx_nano_Fault._new(self);
};
stx_nano_Fault.of = function(this1,data) {
	var data1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(data));
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data1,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	return this2;
};
stx_nano_Fault.decline = function(this1,self) {
	var data = haxe_ds_Option.Some(self);
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	return this2;
};
stx_nano_Fault.explain = function(this1,fn) {
	var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(fn(stx_Nano.digests(stx_nano_Wildcard.__))));
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	return this2;
};
stx_nano_Fault.digest = function(this1,fn) {
	var data = haxe_ds_Option.Some(fn(stx_Nano.digests(stx_nano_Wildcard.__)));
	var lst = haxe_ds_Option.None;
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	return new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
};
var stx_nano_Field = {};
stx_nano_Field.__properties__ = {get_value:"get_value"};
stx_nano_Field._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Field.lift = function(self) {
	return stx_nano_Field._new(self);
};
stx_nano_Field.fromTup = function(tp) {
	return stx_nano_Field._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_Field.fromCouple = function(tp) {
	return stx_nano_Field._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_Field.make = function(key,val) {
	return stx_nano_Field._new({ key : key, val : val});
};
stx_nano_Field.map = function(this1,fn) {
	return stx_nano_Field.lift(stx_nano_KVLift.map(stx_nano_KV.lift(this1),fn));
};
stx_nano_Field.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_nano_Field.toCouple = function(this1) {
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this1.key,this1.val);
};
stx_nano_Field.fromKeyValue = function(self) {
	return stx_nano_Field.lift({ key : self.key, val : self.value});
};
stx_nano_Field.get_value = function(this1) {
	return this1.val;
};
var stx_nano_Floats = function() { };
$hxClasses["stx.nano.Floats"] = stx_nano_Floats;
stx_nano_Floats.__name__ = "stx.nano.Floats";
stx_nano_Floats.delta = function(n0,n1) {
	return n1 - n0;
};
stx_nano_Floats.normalize = function(v,n0,n1) {
	return (v - n0) / (n1 - n0);
};
stx_nano_Floats.interpolate = function(v,n0,n1) {
	return n0 + (n1 - n0) * v;
};
stx_nano_Floats.map = function(v,min0,max0,min1,max1) {
	return min1 + (max1 - min1) * ((v - min0) / (max0 - min0));
};
stx_nano_Floats.round = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_nano_Floats.int(Math.round(n * r) / r);
};
stx_nano_Floats.ceil = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_nano_Floats.int(Math.ceil(n * r) / r);
};
stx_nano_Floats.floor = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_nano_Floats.int(Math.floor(n * r) / r);
};
stx_nano_Floats.clamp = function(n,min,max) {
	if(n > max) {
		n = max;
	} else if(n < min) {
		n = min;
	}
	return n;
};
stx_nano_Floats.sgn = function(n) {
	if(n == 0) {
		return 0;
	} else {
		return Math.abs(n) / n;
	}
};
stx_nano_Floats.max = function(v1,v2) {
	if(v2 > v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Floats.min = function(v1,v2) {
	if(v2 < v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Floats.int = function(v) {
	return v | 0;
};
stx_nano_Floats.compare = function(v1,v2) {
	if(v1 < v2) {
		return -1;
	} else if(v1 > v2) {
		return 1;
	} else {
		return 0;
	}
};
stx_nano_Floats.equals = function(v1,v2) {
	return v1 == v2;
};
stx_nano_Floats.toString = function(v) {
	return "" + v;
};
stx_nano_Floats.toInt = function(v) {
	return v | 0;
};
stx_nano_Floats.add = function(a,b) {
	return a + b;
};
stx_nano_Floats.sub = function(a,b) {
	return a - b;
};
stx_nano_Floats.div = function(a,b) {
	return a / b;
};
stx_nano_Floats.mul = function(a,b) {
	return a * b;
};
stx_nano_Floats.mod = function(a,b) {
	return a % b;
};
var stx_nano_Ident = {};
stx_nano_Ident.__properties__ = {get_self:"get_self"};
stx_nano_Ident._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Ident.lift = function(self) {
	return stx_nano_Ident._new(self);
};
stx_nano_Ident.make = function(name,pack) {
	return stx_nano_Ident.lift({ name : name, pack : pack});
};
stx_nano_Ident.prj = function(this1) {
	return this1;
};
stx_nano_Ident.get_self = function(this1) {
	return stx_nano_Ident.lift(this1);
};
stx_nano_Ident.toWay = function(this1) {
	return stx_nano_lift_LiftNano.if_else(this1.pack == null,function() {
		return stx_nano_Way.snoc(stx_nano_Way.unit(),this1.name);
	},function() {
		return stx_nano_Way.snoc(this1.pack,this1.name);
	});
};
stx_nano_Ident.fromObject = function(self) {
	return stx_nano_Ident.lift({ name : self.name, pack : stx_nano_Way.lift(stx_nano_Cluster.lift(self.pack))});
};
stx_nano_Ident.fromIdentifier = function(self) {
	var n = stx_pico_Identifier.get_name(self);
	var p = stx_pico_Identifier.get_pack(self);
	return { name : n, pack : stx_nano_Way.lift(p)};
};
stx_nano_Ident.toIdentifier = function(this1) {
	var _g = this1.name;
	var _g1 = this1.pack;
	if(_g1 == null) {
		var n = _g;
		return stx_pico_Identifier.lift(n);
	} else {
		var pack = _g1;
		var n = _g;
		if(stx_nano_Cluster.get_length(pack) == 0) {
			return stx_pico_Identifier.lift(n);
		} else {
			var p = _g1;
			var n = _g;
			return stx_pico_Identifier.lift(stx_nano_Way.snoc(p,n).join("."));
		}
	}
};
var stx_nano_Introspectable = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.Introspectable"] = stx_nano_Introspectable;
stx_nano_Introspectable.__name__ = "stx.nano.Introspectable";
stx_nano_Introspectable.__super__ = stx_pico_Clazz;
stx_nano_Introspectable.prototype = $extend(stx_pico_Clazz.prototype,{
	locals: function() {
		return stx_nano_lift_LiftNano.locals(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,this));
	}
	,__class__: stx_nano_Introspectable
});
var stx_nano_Ints = function() { };
$hxClasses["stx.nano.Ints"] = stx_nano_Ints;
stx_nano_Ints.__name__ = "stx.nano.Ints";
stx_nano_Ints.max = function(v1,v2) {
	if(v2 > v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Ints.min = function(v1,v2) {
	if(v2 < v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Ints.toBool = function(v) {
	if(v == 0) {
		return false;
	} else {
		return true;
	}
};
stx_nano_Ints.toFloat = function(v) {
	return v;
};
stx_nano_Ints.compare = function(v1,v2) {
	if(v1 < v2) {
		return -1;
	} else if(v1 > v2) {
		return 1;
	} else {
		return 0;
	}
};
stx_nano_Ints.equals = function(v1,v2) {
	return v1 == v2;
};
stx_nano_Ints.isOdd = function(n) {
	if(n % 2 == 0) {
		return false;
	} else {
		return true;
	}
};
stx_nano_Ints.isEven = function(n) {
	return (n % 2 == 0 ? false : true) == false;
};
stx_nano_Ints.isInteger = function(n) {
	return n % 1 == 0;
};
stx_nano_Ints.isNatural = function(n) {
	if(n > 0) {
		return n % 1 == 0;
	} else {
		return false;
	}
};
stx_nano_Ints.isPrime = function(n) {
	if(n == 1) {
		return false;
	}
	if(n == 2) {
		return false;
	}
	if(n % 2 == 0) {
		return false;
	}
	var itr_min = 3;
	var itr_max = Math.ceil(Math.sqrt(n)) + 1;
	while(itr_min < itr_max) {
		var i = itr_min++;
		if(n % 1 == 0) {
			return false;
		}
		++i;
	}
	return true;
};
stx_nano_Ints.factorial = function(n) {
	if(!(n > 0 && n % 1 == 0)) {
		throw haxe_Exception.thrown("function factorial requires natural number as input");
	}
	if(n == 0) {
		return 1;
	}
	var i = n - 1;
	while(i > 0) {
		n *= i;
		--i;
	}
	return n;
};
stx_nano_Ints.divisors = function(n) {
	var r = [];
	var iter_min = 1;
	var iter_max = Math.ceil(n / 2 + 1);
	while(iter_min < iter_max) {
		var i = iter_min++;
		if(n % i == 0) {
			r.push(i);
		}
	}
	if(n != 0) {
		r.push(n);
	}
	return r;
};
stx_nano_Ints.clamp = function(n,min,max) {
	if(n > max) {
		n = max;
	} else if(n < min) {
		n = min;
	}
	return n;
};
stx_nano_Ints.half = function(n) {
	return n / 2;
};
stx_nano_Ints.sum = function(xs) {
	var o = 0;
	var val = $getIterator(xs);
	while(val.hasNext()) {
		var val1 = val.next();
		o += val1;
	}
	return o;
};
stx_nano_Ints.add = function(a,b) {
	return a + b;
};
stx_nano_Ints.sub = function(a,b) {
	return a - b;
};
stx_nano_Ints.div = function(a,b) {
	return a / b;
};
stx_nano_Ints.mul = function(a,b) {
	return a * b;
};
stx_nano_Ints.mod = function(a,b) {
	return a % b;
};
stx_nano_Ints.inv = function(n) {
	return -n;
};
stx_nano_Ints.and = function(a,b) {
	return a & b;
};
stx_nano_Ints.eq = function(a,b) {
	return a == b;
};
stx_nano_Ints.gt = function(a,b) {
	return a > b;
};
stx_nano_Ints.gteq = function(a,b) {
	return a >= b;
};
stx_nano_Ints.lt = function(a,b) {
	return a < b;
};
stx_nano_Ints.lteq = function(a,b) {
	return a <= b;
};
stx_nano_Ints.ushr = function(v,bits) {
	return v >>> bits;
};
stx_nano_Ints.xor = function(a,b) {
	return a ^ b;
};
stx_nano_Ints.shl = function(v,bits) {
	return v << bits;
};
stx_nano_Ints.shr = function(v,bits) {
	return v >> bits;
};
stx_nano_Ints.abs = function(v) {
	return Math.abs(v) | 0;
};
stx_nano_Ints.toString = function(a) {
	return "" + a;
};
stx_nano_Ints.is_between = function(n,l,h) {
	if(n > l) {
		return n < h;
	} else {
		return false;
	}
};
stx_nano_Ints.is_of_range = function(n,l,h) {
	if(n >= l) {
		return n <= h;
	} else {
		return false;
	}
};
var stx_nano_IterLift = function() { };
$hxClasses["stx.nano.IterLift"] = stx_nano_IterLift;
stx_nano_IterLift.__name__ = "stx.nano.IterLift";
stx_nano_IterLift.cross = function(self,that) {
	return { iterator : function() {
		var l_it = $getIterator(self);
		var r_it = $getIterator(that);
		var l_val = null;
		var rec = null;
		rec = function() {
			if(l_val != null && l_it.hasNext()) {
				l_val = l_it.next();
			}
			if(r_it.hasNext()) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l_val,r_it.next());
			} else {
				if(l_it.hasNext()) {
					r_it = $getIterator(that);
				}
				l_val = null;
				return rec();
			}
		};
		return { next : rec, hasNext : function() {
			if(!l_it.hasNext()) {
				return r_it.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.zip = function(l,r) {
	return { iterator : function() {
		var lit = $getIterator(l);
		var rit = $getIterator(r);
		return { next : function() {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lit.next(),rit.next());
		}, hasNext : function() {
			if(lit.hasNext()) {
				return rit.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.ldrop = function(it,n) {
	return { iterator : function() {
		var iter = $getIterator(it);
		while(n > 0) {
			iter.next();
			n -= 1;
		}
		return iter;
	}};
};
stx_nano_IterLift.toMap = function(iter,fn,map) {
	var i = $getIterator(iter);
	while(i.hasNext()) {
		var i1 = i.next();
		var kv = fn(i1);
		stx_nano_CoupleLift.decouple(kv,$bind(map,map.set));
	}
	return map;
};
stx_nano_IterLift.map = function(iter,fn) {
	return { iterator : function() {
		var i = $getIterator(iter);
		return { next : function() {
			return fn(i.next());
		}, hasNext : function() {
			return i.hasNext();
		}};
	}};
};
stx_nano_IterLift.head = function(iter) {
	var it = $getIterator(iter);
	if(it.hasNext()) {
		return haxe_ds_Option.Some(it.next());
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_IterLift.lfold = function(iter,mapper,seed) {
	var folded = seed;
	var e = $getIterator(iter);
	while(e.hasNext()) {
		var e1 = e.next();
		folded = mapper(e1,folded);
	}
	return folded;
};
stx_nano_IterLift.lfold1 = function(iter,mapper) {
	var it = $getIterator(iter);
	var memo = haxe_ds_Option.None;
	if(!it.hasNext()) {
		return haxe_ds_Option.None;
	} else {
		memo = haxe_ds_Option.Some(it.next());
		while(true) if(!it.hasNext()) {
			break;
		} else {
			memo = stx_pico_OptionLift.flat_map(memo,function(lhs) {
				return haxe_ds_Option.Some(mapper(lhs,it.next()));
			});
		}
		return memo;
	}
};
stx_nano_IterLift.toGenerator = function(self) {
	var iter = haxe_ds_Option.None;
	return function() {
		if(iter == haxe_ds_Option.None) {
			iter = haxe_ds_Option.Some($getIterator(self));
		}
		return stx_pico_OptionLift.flat_map(iter,function(x) {
			if(x.hasNext()) {
				return haxe_ds_Option.Some(x.next());
			} else {
				return haxe_ds_Option.None;
			}
		});
	};
};
stx_nano_IterLift.toArray = function(self) {
	var arr = [];
	var v = $getIterator(self);
	while(v.hasNext()) {
		var v1 = v.next();
		arr.push(v1);
	}
	return arr;
};
stx_nano_IterLift.toCluster = function(self) {
	return stx_nano_Cluster.lift(stx_nano_IterLift.toArray(self));
};
stx_nano_IterLift.foldr = function(iter,fn,init) {
	var data = init;
	var iterator = $getIterator(iter);
	var eff = null;
	eff = function() {
		if(iterator.hasNext()) {
			var next = iterator.next();
			eff();
			data = fn(next,data);
		}
	};
	eff();
	return data;
};
stx_nano_IterLift.search = function(iter,fn) {
	return stx_nano_IterLift.lfold(iter,function(next,memo) {
		var tmp;
		switch(memo._hx_index) {
		case 0:
			var t = memo.v;
			tmp = haxe_ds_Option.Some(t);
			break;
		case 1:
			tmp = stx_nano_lift_LiftNano.if_else(fn(next),function() {
				return haxe_ds_Option.Some(next);
			},function() {
				return haxe_ds_Option.None;
			});
			break;
		}
		return tmp;
	},haxe_ds_Option.None);
};
stx_nano_IterLift.map_filter = function(self,fn) {
	return stx_nano_IterLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_lift_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_nano_IterLift.concat = function(self,that) {
	return stx_nano_Iter.lift(stx_lift_IterableLift.concat(self,that));
};
stx_nano_IterLift.is_defined = function(self) {
	return $getIterator(self).hasNext();
};
var stx_nano_Iter = {};
stx_nano_Iter.unit = function() {
	return stx_nano_Iter.lift({ iterator : function() {
		return { hasNext : function() {
			return false;
		}, next : function() {
			return null;
		}};
	}});
};
stx_nano_Iter.lift = function(self) {
	return stx_nano_Iter._new(self);
};
stx_nano_Iter.make = function(self) {
	return stx_nano_Iter.lift({ iterator : function() {
		return self;
	}});
};
stx_nano_Iter.make0 = function(self) {
	return stx_nano_Iter.make({ hasNext : function() {
		return (stx_nano_CoupleLift.fst(self()))();
	}, next : function() {
		return (stx_nano_CoupleLift.snd(self()))();
	}});
};
stx_nano_Iter._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Iter.prj = function(this1) {
	return this1;
};
var stx_nano_IterKV = {};
stx_nano_IterKV.__properties__ = {get_self:"get_self"};
stx_nano_IterKV._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_IterKV.lift = function(self) {
	return stx_nano_IterKV._new(self);
};
stx_nano_IterKV.prj = function(this1) {
	return this1;
};
stx_nano_IterKV.get_self = function(this1) {
	return stx_nano_IterKV.lift(this1);
};
stx_nano_IterKV.toIter = function(this1) {
	return stx_nano_IterLift.map({ iterator : $keyValueIterator(this1)},function(t) {
		return stx_nano_KV.make(t.key,t.value);
	});
};
stx_nano_IterKV.fromEnsemble = function(self) {
	return stx_nano_IterKV.lift({ keyValueIterator : function() {
		return new haxe_iterators_DynamicAccessKeyValueIterator(stx_nano_Ensemble.prj(self));
	}});
};
var stx_nano_Json = function() { };
$hxClasses["stx.nano.Json"] = stx_nano_Json;
stx_nano_Json.__name__ = "stx.nano.Json";
stx_nano_Json.encode = function(v,replacer,space) {
	var out = null;
	var err = null;
	try {
		out = JSON.stringify(v,replacer,space);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
		var pos = stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/nano/Json.hx", lineNumber : 10, className : "stx.nano.Json", methodName : "encode"});
		var data1 = data;
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data1 == null) {
			data1 = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data1,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
		err = this1;
	}
	if(err == null) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,out);
	} else {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err);
	}
};
stx_nano_Json.decode = function(str) {
	var out = null;
	var err = null;
	try {
		out = JSON.parse(str);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
		var pos = stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/nano/Json.hx", lineNumber : 20, className : "stx.nano.Json", methodName : "decode"});
		var data1 = data;
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data1 == null) {
			data1 = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data1,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
		err = this1;
	}
	if(err == null) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,out);
	} else {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err);
	}
};
var stx_nano_KVLift = function() { };
$hxClasses["stx.nano.KVLift"] = stx_nano_KVLift;
stx_nano_KVLift.__name__ = "stx.nano.KVLift";
stx_nano_KVLift.map = function(self,fn) {
	return { key : self.key, val : fn(self.val)};
};
stx_nano_KVLift.fst = function(self) {
	return self.key;
};
stx_nano_KVLift.snd = function(self) {
	return self.val;
};
stx_nano_KVLift.into = function(self,fn) {
	return fn(self.key,self.val);
};
stx_nano_KVLift.decouple = function(self,fn) {
	return fn(self.key,self.val);
};
var stx_nano_KV = {};
stx_nano_KV._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_KV.lift = function(self) {
	return stx_nano_KV._new(self);
};
stx_nano_KV.make = function(k,v) {
	return stx_nano_KV.lift({ key : k, val : v});
};
stx_nano_KV.fromObj = function(self) {
	return stx_nano_KV._new(self);
};
stx_nano_KV.fromTup = function(tp) {
	return stx_nano_KV._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
var stx_nano_LedgerLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.LedgerLift"] = stx_nano_LedgerLift;
stx_nano_LedgerLift.__name__ = "stx.nano.LedgerLift";
stx_nano_LedgerLift.make = function() {
	return new stx_nano_LedgerLift();
};
stx_nano_LedgerLift.lift = function(self) {
	return stx_nano_Ledger.lift(self);
};
stx_nano_LedgerLift.errata = function(self,fn) {
	return tink_core_Future.map(self,function(x) {
		return stx_nano_EquityLift.errata(x,fn);
	});
};
stx_nano_LedgerLift.errate = function(self,fn) {
	return stx_nano_LedgerLift.lift(tink_core_Future.map(self,function(x) {
		return stx_nano_EquityLift.errate(x,fn);
	}));
};
stx_nano_LedgerLift.flat_map = function(self,fn) {
	return tink_core_Future.flatMap(self,function(x) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,x.value);
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			return stx_nano_LedgerLift.errata(fn(t),function(e) {
				return stx_nano_ErrataLift.toError(x.get_error()).concat(e);
			});
		case 1:
			return stx_nano_Ledger.fromEquity(stx_nano_Equity.make(x.asset,null,x.get_error()));
		}
	});
};
stx_nano_LedgerLift.map = function(self,fn) {
	return tink_core_Future.map(self,function(x) {
		return stx_nano_EquityLift.map(x,fn);
	});
};
stx_nano_LedgerLift.escape = function(self,fn) {
	return tink_core_Future.map(self,fn);
};
stx_nano_LedgerLift.__super__ = stx_pico_Clazz;
stx_nano_LedgerLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_LedgerLift
});
var stx_nano_Ledger = {};
stx_nano_Ledger.__properties__ = {get_self:"get_self"};
stx_nano_Ledger._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Ledger.lift = function(self) {
	return stx_nano_Ledger._new(self);
};
stx_nano_Ledger.prj = function(this1) {
	return this1;
};
stx_nano_Ledger.get_self = function(this1) {
	return stx_nano_Ledger.lift(this1);
};
stx_nano_Ledger.fromEquity = function(self) {
	return stx_nano_Ledger.lift(tink_core_Future.irreversible(function(cb) {
		cb(self);
	}));
};
var stx_nano_LogicalClock = function() { };
$hxClasses["stx.nano.LogicalClock"] = stx_nano_LogicalClock;
stx_nano_LogicalClock.__name__ = "stx.nano.LogicalClock";
stx_nano_LogicalClock.previous = null;
stx_nano_LogicalClock.get = function() {
	var st = stx_nano_TimeStamp.pure;
	if(stx_nano_LogicalClock.previous == null) {
		return st({ realm : stx_nano_LogicalClock.previous = HxOverrides.now() / 1000, index : stx_nano_LogicalClock.counter, exact : ++stx_nano_LogicalClock.lifetime});
	} else {
		var stamp = HxOverrides.now() / 1000;
		if(stamp == stx_nano_LogicalClock.previous) {
			return st({ realm : stamp, index : stx_nano_LogicalClock.counter++, exact : ++stx_nano_LogicalClock.lifetime});
		} else {
			stx_nano_LogicalClock.previous = stamp;
			stx_nano_LogicalClock.counter = 0;
			return st({ realm : stamp, index : stx_nano_LogicalClock.counter, exact : ++stx_nano_LogicalClock.lifetime});
		}
	}
};
var stx_nano_Math = function() { };
$hxClasses["stx.nano.Math"] = stx_nano_Math;
stx_nano_Math.__name__ = "stx.nano.Math";
stx_nano_Math.rndOne = function(weight) {
	if(weight == null) {
		weight = 0.5;
	}
	return Math.random() - weight | 0;
};
stx_nano_Math.radians = function(v) {
	return v * (Math.PI / 180);
};
stx_nano_Math.degrees = function(v) {
	return v * (180 / Math.PI);
};
stx_nano_Math.random = function(max,min) {
	if(min == null) {
		min = 0;
	}
	if(max == null) {
		max = 1;
	}
	return Math.random() * (max - min) + min;
};
stx_nano_Math.isNaN = function(fl) {
	return isNaN(fl);
};
stx_nano_Math.unique_unordered_pair = function(x,y) {
	if(x < y) {
		return x * (y - 1) + Math.floor(Math.pow(y - x - 2,2) / 4);
	} else {
		return (x - 1) * y + Math.floor(Math.pow(x - y - 2,2) / 4);
	}
};
var stx_nano_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.Module"] = stx_nano_Module;
stx_nano_Module.__name__ = "stx.nano.Module";
stx_nano_Module.__super__ = stx_pico_Clazz;
stx_nano_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	Ft: function() {
		return new stx_nano__$Module_Ft();
	}
	,Map: function() {
		return new stx_nano__$Module_Map();
	}
	,command: function(fn) {
		return function(v) {
			fn(v);
			return v;
		};
	}
	,__class__: stx_nano_Module
});
var stx_nano__$Module_Ft = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano._Module.Ft"] = stx_nano__$Module_Ft;
stx_nano__$Module_Ft.__name__ = "stx.nano._Module.Ft";
stx_nano__$Module_Ft.__super__ = stx_pico_Clazz;
stx_nano__$Module_Ft.prototype = $extend(stx_pico_Clazz.prototype,{
	bind_fold: function(arr,fn,init) {
		return stx_nano_ClusterLift.lfold(arr,function(next,memo) {
			return tink_core_Future.flatMap(memo,function(tt) {
				return fn(next,tt);
			});
		},new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(init)));
	}
	,zip: function(self,that) {
		var left = haxe_ds_Option.None;
		var right = haxe_ds_Option.None;
		var trigger = new tink_core_FutureTrigger();
		var on_done = function() {
			if(left._hx_index == 0) {
				if(right._hx_index == 0) {
					var r = right.v;
					var l = left.v;
					trigger.trigger(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
				}
			}
		};
		var l_handler = function(l) {
			left = haxe_ds_Option.Some(l);
			on_done();
		};
		var r_handler = function(r) {
			right = haxe_ds_Option.Some(r);
			on_done();
		};
		self.handle(l_handler);
		that.handle(r_handler);
		return trigger;
	}
	,tryAndThenCancelIfNotAvailable: function(ft) {
		var output = haxe_ds_Option.None;
		var canceller = ft.handle(function(x) {
			output = haxe_ds_Option.Some(x);
		});
		if(!stx_pico_OptionLift.is_defined(output)) {
			if(canceller != null) {
				canceller.cancel();
			}
		}
		return output;
	}
	,value: function(ft) {
		var output = haxe_ds_Option.None;
		var finished = false;
		ft.handle(function(x) {
			if(!finished) {
				output = haxe_ds_Option.Some(x);
			}
		});
		finished = true;
		return output;
	}
	,__class__: stx_nano__$Module_Ft
});
var stx_nano__$Module_Sig = function() { };
$hxClasses["stx.nano._Module.Sig"] = stx_nano__$Module_Sig;
stx_nano__$Module_Sig.__name__ = "stx.nano._Module.Sig";
var stx_nano__$Module_Map = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano._Module.Map"] = stx_nano__$Module_Map;
stx_nano__$Module_Map.__name__ = "stx.nano._Module.Map";
stx_nano__$Module_Map.__super__ = stx_pico_Clazz;
stx_nano__$Module_Map.prototype = $extend(stx_pico_Clazz.prototype,{
	String: function() {
		return new haxe_ds_StringMap();
	}
	,__class__: stx_nano__$Module_Map
});
var stx_nano_NuggetApi = function() { };
$hxClasses["stx.nano.NuggetApi"] = stx_nano_NuggetApi;
stx_nano_NuggetApi.__name__ = "stx.nano.NuggetApi";
stx_nano_NuggetApi.__isInterface__ = true;
stx_nano_NuggetApi.prototype = {
	put: null
	,use: null
	,__class__: stx_nano_NuggetApi
};
var stx_nano_NuggetCls = function(val) {
	this.val = val;
};
$hxClasses["stx.nano.NuggetCls"] = stx_nano_NuggetCls;
stx_nano_NuggetCls.__name__ = "stx.nano.NuggetCls";
stx_nano_NuggetCls.__interfaces__ = [stx_nano_NuggetApi];
stx_nano_NuggetCls.prototype = {
	val: null
	,put: function(v) {
		if(this.val != null) {
			throw haxe_Exception.thrown("already set value on Nugget");
		}
	}
	,use: function(fn) {
		if(this.val == null) {
			throw haxe_Exception.thrown("val on Nugget unset");
		}
	}
	,__class__: stx_nano_NuggetCls
};
var stx_nano__$Nugget_Delegate = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.nano._Nugget.Delegate"] = stx_nano__$Nugget_Delegate;
stx_nano__$Nugget_Delegate.__name__ = "stx.nano._Nugget.Delegate";
stx_nano__$Nugget_Delegate.prototype = {
	delegate: null
	,__class__: stx_nano__$Nugget_Delegate
};
var stx_nano_FutureNugget = function(fut) {
	stx_nano_NuggetCls.call(this);
	this.fut = fut;
};
$hxClasses["stx.nano.FutureNugget"] = stx_nano_FutureNugget;
stx_nano_FutureNugget.__name__ = "stx.nano.FutureNugget";
stx_nano_FutureNugget.__super__ = stx_nano_NuggetCls;
stx_nano_FutureNugget.prototype = $extend(stx_nano_NuggetCls.prototype,{
	fut: null
	,put: function(v) {
		throw haxe_Exception.thrown("Future Nugget resolves internally");
	}
	,use: function(fn) {
		this.fut.handle(fn);
	}
	,__class__: stx_nano_FutureNugget
});
var stx_nano_Nugget = {};
stx_nano_Nugget.__properties__ = {get_self:"get_self"};
stx_nano_Nugget._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Nugget.lift = function(self) {
	return stx_nano_Nugget._new(self);
};
stx_nano_Nugget.prj = function(this1) {
	return this1;
};
stx_nano_Nugget.get_self = function(this1) {
	return stx_nano_Nugget.lift(this1);
};
var stx_nano_Absorbable = {};
stx_nano_Absorbable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Absorbable.lift = function(self) {
	return stx_nano_Absorbable._new(self);
};
stx_nano_Absorbable.pure = function(v) {
	return stx_nano_Absorbable.lift(new stx_nano_NuggetCls(v));
};
stx_nano_Absorbable.later = function(ft) {
	return stx_nano_Absorbable.lift(new stx_nano_FutureNugget(ft));
};
var stx_nano_Producable = {};
stx_nano_Producable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Producable.lift = function(self) {
	return stx_nano_Producable._new(self);
};
stx_nano_Producable.unit = function() {
	return stx_nano_Producable.lift(new stx_nano_NuggetCls());
};
stx_nano_Producable.go = function(this1,v) {
	this1.put(v);
	return stx_nano_Absorbable.lift(this1);
};
var stx_nano_NumericSum = $hxEnums["stx.nano.NumericSum"] = { __ename__:"stx.nano.NumericSum",__constructs__:null
	,NInt: ($_=function(int) { return {_hx_index:0,int:int,__enum__:"stx.nano.NumericSum",toString:$estr}; },$_._hx_name="NInt",$_.__params__ = ["int"],$_)
	,NInt64: ($_=function(int) { return {_hx_index:1,int:int,__enum__:"stx.nano.NumericSum",toString:$estr}; },$_._hx_name="NInt64",$_.__params__ = ["int"],$_)
	,NFloat: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"stx.nano.NumericSum",toString:$estr}; },$_._hx_name="NFloat",$_.__params__ = ["f"],$_)
};
stx_nano_NumericSum.__constructs__ = [stx_nano_NumericSum.NInt,stx_nano_NumericSum.NInt64,stx_nano_NumericSum.NFloat];
var stx_nano_Numeric = {};
stx_nano_Numeric.__properties__ = {get_self:"get_self"};
stx_nano_Numeric._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Numeric.lift = function(self) {
	return stx_nano_Numeric._new(self);
};
stx_nano_Numeric.prj = function(this1) {
	return this1;
};
stx_nano_Numeric.get_self = function(this1) {
	return stx_nano_Numeric.lift(this1);
};
stx_nano_Numeric.toString = function(this1) {
	var _g = stx_nano_Numeric.get_self(this1);
	switch(_g._hx_index) {
	case 0:
		var v = _g.int;
		return "" + v;
	case 1:
		var v = _g.int;
		return "" + (v == null ? "null" : haxe_Int64.toString(v));
	case 2:
		var v = _g.f;
		return "" + v;
	}
};
stx_nano_Numeric.get_width = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var int = this1.int;
		return 4;
	case 1:
		var int = this1.int;
		return 8;
	case 2:
		var f = this1.f;
		return 8;
	}
};
stx_nano_Numeric.intoBytes = function(this1) {
};
var stx_nano_OneOrManySum = $hxEnums["stx.nano.OneOrManySum"] = { __ename__:"stx.nano.OneOrManySum",__constructs__:null
	,OneOf: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.OneOrManySum",toString:$estr}; },$_._hx_name="OneOf",$_.__params__ = ["v"],$_)
	,ManyOf: ($_=function(arr) { return {_hx_index:1,arr:arr,__enum__:"stx.nano.OneOrManySum",toString:$estr}; },$_._hx_name="ManyOf",$_.__params__ = ["arr"],$_)
};
stx_nano_OneOrManySum.__constructs__ = [stx_nano_OneOrManySum.OneOf,stx_nano_OneOrManySum.ManyOf];
var stx_nano_OneOrMany = {};
stx_nano_OneOrMany.__properties__ = {get_self:"get_self"};
stx_nano_OneOrMany._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_OneOrMany.lift = function(self) {
	return stx_nano_OneOrMany._new(self);
};
stx_nano_OneOrMany.fromT = function(self) {
	return stx_nano_OneOrMany.lift(stx_nano_OneOrManySum.OneOf(self));
};
stx_nano_OneOrMany.fromArray = function(self) {
	return stx_nano_OneOrMany.lift(stx_nano_OneOrManySum.ManyOf(self));
};
stx_nano_OneOrMany.toArray = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		return [v];
	case 1:
		var arr = this1.arr;
		return arr;
	}
};
stx_nano_OneOrMany.prj = function(this1) {
	return this1;
};
stx_nano_OneOrMany.get_self = function(this1) {
	return stx_nano_OneOrMany.lift(this1);
};
var stx_nano_PledgeLift = function() { };
$hxClasses["stx.nano.PledgeLift"] = stx_nano_PledgeLift;
stx_nano_PledgeLift.__name__ = "stx.nano.PledgeLift";
stx_nano_PledgeLift.toJsPromise = function(self) {
	var promise = new Promise(function(resolve,reject) {
		try {
			self.handle(function(res) {
				switch(res._hx_index) {
				case 0:
					var t = res.t;
					resolve(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
					break;
				case 1:
					var e = res.e;
					reject(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
					break;
				}
			});
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof stx_pico_Error)) {
				var e = _g1;
				reject(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.fromError(e)));
			} else if(((_g1) instanceof Error)) {
				var e = _g1;
				var reject1 = reject;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 172, className : "stx.nano.PledgeLift", methodName : "toJsPromise"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				reject1(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2));
			} else {
				throw _g;
			}
		}
	});
	return promise;
};
stx_nano_PledgeLift.toJsPromiseError = function(self) {
	return stx_nano_PledgeLift.toJsPromise(self).then(function(res) {
		return new Promise(function(resolve,reject) {
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				resolve(t);
				break;
			case 1:
				var e = res.e;
				reject(e);
				break;
			}
		});
	});
};
stx_nano_PledgeLift.lift = function(self) {
	return stx_nano_Pledge.lift(self);
};
stx_nano_PledgeLift.zip = function(self,that) {
	var out = tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(stx_nano_Pledge.prj(self),stx_nano_Pledge.prj(that)),function(tp) {
		var self = stx_nano_CoupleLift.fst(tp);
		var that = stx_nano_CoupleLift.snd(tp);
		switch(self._hx_index) {
		case 0:
			var _g = self.t;
			switch(that._hx_index) {
			case 0:
				var tt = that.t;
				var t = _g;
				return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
			case 1:
				var e = that.e;
				return stx_nano_ResSum.Reject(e);
			}
			break;
		case 1:
			var _g = self.e;
			if(that._hx_index == 1) {
				var ee = that.e;
				var e = _g;
				return stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
			} else {
				var e = _g;
				return stx_nano_ResSum.Reject(e);
			}
			break;
		}
	});
	return out;
};
stx_nano_PledgeLift.map = function(self,fn) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(x) {
		var tmp;
		switch(x._hx_index) {
		case 0:
			var t = x.t;
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(t));
			break;
		case 1:
			var e = x.e;
			tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
			break;
		}
		return tmp;
	}));
};
stx_nano_PledgeLift.flat_map = function(self,fn) {
	var ft = stx_nano_Pledge.prj(self);
	return tink_core_Future.flatMap(ft,function(x) {
		switch(x._hx_index) {
		case 0:
			var t = x.t;
			return stx_nano_Pledge.prj(fn(t));
		case 1:
			var e = x.e;
			return stx_nano_Pledge.prj(stx_nano_Pledge.fromUpshot(stx_nano_ResSum.Reject(e)));
		}
	});
};
stx_nano_PledgeLift.flat_fold = function(self,val,ers) {
	return tink_core_Future.flatMap(self,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return val(t);
		case 1:
			var e = res.e;
			return ers(e);
		}
	});
};
stx_nano_PledgeLift.fold = function(self,val,ers) {
	var fn = val;
	var er = ers;
	var tmp = function(self) {
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return fn(t);
		case 1:
			var e = self.e;
			return er(e);
		}
	};
	return tink_core_Future.map(stx_nano_Pledge.prj(self),tmp);
};
stx_nano_PledgeLift.recover = function(self,fn) {
	return stx_nano_PledgeLift.lift(stx_nano_PledgeLift.fold(self,function(x) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x);
	},function(e) {
		return fn(e);
	}));
};
stx_nano_PledgeLift.adjust = function(self,fn) {
	return stx_nano_PledgeLift.lift(stx_nano_PledgeLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v);
	}));
};
stx_nano_PledgeLift.rectify = function(self,fn) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(res) {
		var fn1 = fn;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return stx_nano_Res.accept(t);
		case 1:
			var e = res.e;
			return fn1(e);
		}
	}));
};
stx_nano_PledgeLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_nano_Pledge.prj(self),function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			tmp = haxe_ds_Option.None;
			break;
		case 1:
			var e = res.e;
			tmp = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
			break;
		}
		return tmp;
	});
};
stx_nano_PledgeLift.fudge = function(self) {
	var out = null;
	stx_nano_Pledge.prj(self).handle(function(v) {
		out = v;
	});
	if(out == null) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 265, className : "stx.nano.PledgeLift", methodName : "fudge"});
		var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		throw haxe_Exception.thrown(this2);
	}
	return out;
};
stx_nano_PledgeLift.point = function(self,fn) {
	return stx_nano_Alert.lift(tink_core_Future.map(self,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn(t);
		case 1:
			var e = res.e;
			return stx_nano_lift_LiftError.report(e);
		}
	}));
};
stx_nano_PledgeLift.errata = function(self,fn) {
	return tink_core_Future.map(stx_nano_Pledge.prj(self),function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var t = chk.t;
			self = stx_nano_Res.accept(t);
			break;
		case 1:
			var e = chk.e;
			self = stx_nano_Res.reject(fn(e));
			break;
		}
		var this1 = self;
		return this1;
	});
};
stx_nano_PledgeLift.errate = function(self,fn) {
	return stx_nano_PledgeLift.errata(self,function(x) {
		return stx_nano_Rejection.errate(x,fn);
	});
};
stx_nano_PledgeLift.each = function(self,fn,err) {
	stx_nano_Pledge.prj(self).handle(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			break;
		case 1:
			var e = res.e;
			var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,err);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				t(e);
				break;
			case 1:
				throw haxe_Exception.thrown(e);
			}
			break;
		}
	});
};
stx_nano_PledgeLift.tap = function(self,fn,pos) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(x) {
		fn(x,pos);
		return x;
	}));
};
stx_nano_PledgeLift.command = function(self,fn) {
	return stx_nano_Pledge.flat_map(self,function(t) {
		return stx_nano_AlertLift.resolve(fn(t),t);
	});
};
stx_nano_PledgeLift.execute = function(self,fn) {
	return stx_nano_Pledge.flat_map(self,function(t) {
		return stx_nano_AlertLift.resolve(fn(),t);
	});
};
stx_nano_PledgeLift.anyway = function(self,fn) {
	return tink_core_Future.flatMap(self,function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			var ok = t;
			var f = null;
			tmp = stx_nano_AlertLift.flat_fold(fn(f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 320, className : "stx.nano.PledgeLift", methodName : "anyway"})))),function(err) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err)));
			},function() {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok)));
			});
			break;
		case 1:
			var e = res.e;
			var err = e;
			tmp = stx_nano_AlertLift.flat_fold(fn(stx_nano_lift_LiftError.report(err)),function(err0) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.concat(err,err0))));
			},function() {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,err)));
			});
			break;
		}
		return tmp;
	});
};
stx_nano_PledgeLift.toTinkPromise = function(self) {
	return stx_nano_PledgeLift.fold(self,function(ok) {
		return tink_core_Outcome.Success(ok);
	},function(no) {
		return tink_core_Outcome.Failure(stx_nano_lift_LiftError.toTinkError(no));
	});
};
var stx_nano_Pledge = {};
stx_nano_Pledge.__properties__ = {get_self:"get_self"};
stx_nano_Pledge._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Pledge.lift = function(self) {
	return stx_nano_Pledge._new(self);
};
stx_nano_Pledge.make = function(ch) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(f) {
		f(ch);
		return null;
	});
	return this1;
};
stx_nano_Pledge.accept = function(ch) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ch));
};
stx_nano_Pledge.reject = function(e) {
	var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1));
};
stx_nano_Pledge.bind_fold = function(it,fm,start) {
	return stx_nano_Pledge._new(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(it,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var t = memo.t;
			return stx_nano_Pledge.prj(fm(next,t));
		case 1:
			var e = memo.e;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_ResSum.Reject(e)));
		}
	},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,start)));
};
stx_nano_Pledge.seq = function(iter) {
	return stx_nano_Pledge.bind_fold(iter,function(next,memo) {
		return stx_nano_Pledge.map(next,function(a) {
			return stx_lift_ArrayLift.snoc(memo,a);
		});
	},[]);
};
stx_nano_Pledge.lazy = function(fn) {
	return stx_nano_Pledge.lift(tink_core_Future.irreversible(function(f) {
		f(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn()));
	}));
};
stx_nano_Pledge.fromLazyError = function(fn) {
	return stx_nano_Pledge.fromLazyUpshot(function() {
		var this1 = fn().errate(stx_nano_DeclinationSum.REJECT);
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
	});
};
stx_nano_Pledge.fromTinkPromise = function(promise) {
	return stx_nano_Pledge.lift(tink_core_Future.map(promise,function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var s = outcome.data;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,s);
		case 1:
			var f = outcome.failure;
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_tink_error(stx_Nano.digests(stx_nano_Wildcard.__),f.message,f.code)));
			var pos = f.pos;
			var data1 = data;
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data1 == null) {
				data1 = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data1,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
		}
	}));
};
stx_nano_Pledge.fromTinkFuture = function(future) {
	return stx_nano_Pledge.lift(tink_core_Future.map(future,function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	}));
};
stx_nano_Pledge.fromLazyUpshot = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_nano_Pledge.err = function(e) {
	var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1));
};
stx_nano_Pledge.fromUpshot = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_nano_Pledge.fromOption = function(m) {
	var val;
	switch(m._hx_index) {
	case 0:
		var t = m.v;
		val = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 87, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromOption"});
		var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
		val = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
		break;
	}
	var val1 = val;
	return stx_nano_Pledge.fromUpshot(val1);
};
stx_nano_Pledge.prj = function(this1) {
	return this1;
};
stx_nano_Pledge.get_self = function(this1) {
	return stx_nano_Pledge.lift(this1);
};
stx_nano_Pledge.map = function(this1,fn) {
	return stx_nano_Pledge._.map(this1,fn);
};
stx_nano_Pledge.flat_map = function(this1,fn) {
	return stx_nano_Pledge._.flat_map(this1,fn);
};
stx_nano_Pledge.trigger = function() {
	return stx_nano_PledgeTrigger._new();
};
stx_nano_Pledge.fromJsPromise = function(self,pos) {
	return stx_nano_Pledge.lift(tink_core_Future.map(tink_core_Future.ofJsPromise(self),function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v);
		case 1:
			var e = outcome.failure;
			var _g = Type.typeof(e.data);
			if(_g._hx_index == 6) {
				if(_g.c == Error) {
					var er = e.data;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),er)));
					var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
						return stx_nano_Rejection.prj(x);
					});
					if(data == null) {
						data = haxe_ds_Option.None;
					}
					if(lst == null) {
						lst = haxe_ds_Option.None;
					}
					var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
				} else {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),new Error("" + (e.data == null ? "null" : Std.string(e.data))))));
					var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
						return stx_nano_Rejection.prj(x);
					});
					if(data == null) {
						data = haxe_ds_Option.None;
					}
					if(lst == null) {
						lst = haxe_ds_Option.None;
					}
					var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
				}
			} else {
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_js_error(stx_Nano.digests(stx_nano_Wildcard.__),new Error("" + (e.data == null ? "null" : Std.string(e.data))))));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
			}
			break;
		}
	}));
};
var stx_nano_PledgeTrigger = {};
stx_nano_PledgeTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
stx_nano_PledgeTrigger.toPledge = function(this1) {
	return stx_nano_Pledge.lift(this1);
};
stx_nano_PledgeTrigger.prj = function(this1) {
	return this1;
};
var stx_nano_PositionLift = function() { };
$hxClasses["stx.nano.PositionLift"] = stx_nano_PositionLift;
stx_nano_PositionLift.__name__ = "stx.nano.PositionLift";
stx_nano_PositionLift.toString = function(pos) {
	if(pos == null) {
		return ":pos ()";
	}
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return ":pos (object :file_name " + fn + " :class_name " + cls + " :method_name " + fn + "  :line_number " + ln + ")";
};
stx_nano_PositionLift.copy = function(p) {
	return stx_nano_Position.make(p.fileName,p.className,p.methodName,p.lineNumber,p.customParams);
};
stx_nano_PositionLift.withFragmentName = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return "" + cls + "." + fn;
};
stx_nano_PositionLift.toStringClassMethodLine = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_nano_PositionLift.withFragmentName(pos);
	return "(" + class_method + "@" + pos.lineNumber + ")";
};
stx_nano_PositionLift.to_vscode_clickable_link = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_nano_PositionLift.withFragmentName(pos);
	return "" + f + ":" + ln;
};
stx_nano_PositionLift.toString_name_method_line = function(pos) {
	var name = stx_pico_Identifier.get_name(stx_nano_lift_LiftNano.toIdentifier(stx_LiftPos.lift(pos)));
	var method = pos.methodName;
	var line = pos.lineNumber;
	return "" + name + "." + method + "@" + line;
};
stx_nano_PositionLift.withCustomParams = function(p,v) {
	p = stx_nano_PositionLift.copy(p);
	if(p.customParams == null) {
		p.customParams = [];
	}
	p.customParams.push(v);
	return p;
};
stx_nano_PositionLift.identifier = function(self) {
	var valid = stx_nano_Position.get_fileName(stx_nano_lift_LiftNano.toPosition(self)).split(".")[0].split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join(".");
	return stx_pico_Identifier._new(valid);
};
stx_nano_PositionLift.toIdentfier = function(self) {
	var valid = stx_nano_Position.get_fileName(stx_nano_lift_LiftNano.toPosition(self)).split(".")[0].split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join(".");
	return stx_pico_Identifier._new(valid);
};
var stx_nano_Position = {};
stx_nano_Position.__properties__ = {get_methodName:"get_methodName",get_lineNumber:"get_lineNumber",get_fileName:"get_fileName",get_className:"get_className",get_customParams:"get_customParams"};
stx_nano_Position._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Position.lift = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_Position.make = function(fileName,className,methodName,lineNumber,customParams) {
	return { fileName : fileName, className : className, methodName : methodName, lineNumber : lineNumber, customParams : customParams};
};
stx_nano_Position.fromPos = function(pos) {
	return stx_nano_Position._new(pos);
};
stx_nano_Position.toString = function(this1) {
	return stx_nano_Position._.toStringClassMethodLine(this1);
};
stx_nano_Position.here = function(pos) {
	return pos;
};
stx_nano_Position.get_customParams = function(this1) {
	return this1.customParams;
};
stx_nano_Position.toIdent = function(this1) {
	return stx_nano_Ident.fromIdentifier(stx_nano_lift_LiftNano.toIdentifier(this1));
};
stx_nano_Position.get_className = function(this1) {
	return this1.className;
};
stx_nano_Position.get_fileName = function(this1) {
	return this1.fileName;
};
stx_nano_Position.get_lineNumber = function(this1) {
	return this1.lineNumber;
};
stx_nano_Position.get_methodName = function(this1) {
	return this1.methodName;
};
stx_nano_Position.toPos = function(this1) {
	return this1;
};
var stx_nano_PrimitiveDef = $hxEnums["stx.nano.PrimitiveDef"] = { __ename__:"stx.nano.PrimitiveDef",__constructs__:null
	,PNull: {_hx_name:"PNull",_hx_index:0,__enum__:"stx.nano.PrimitiveDef",toString:$estr}
	,PBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PBool",$_.__params__ = ["b"],$_)
	,PSprig: ($_=function(sprig) { return {_hx_index:2,sprig:sprig,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PSprig",$_.__params__ = ["sprig"],$_)
};
stx_nano_PrimitiveDef.__constructs__ = [stx_nano_PrimitiveDef.PNull,stx_nano_PrimitiveDef.PBool,stx_nano_PrimitiveDef.PSprig];
var stx_nano_Primitive = {};
stx_nano_Primitive.fromInt = function(i) {
	return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(i)));
};
stx_nano_Primitive.fromFloat = function(i) {
	return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(i)));
};
stx_nano_Primitive.fromBool = function(i) {
	return stx_nano_PrimitiveDef.PBool(i);
};
stx_nano_Primitive.fromString = function(i) {
	return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Textal(i));
};
stx_nano_Primitive.toAny = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var b = this1.b;
		return b;
	case 2:
		var _g = this1.sprig;
		switch(_g._hx_index) {
		case 0:
			var t = _g.str;
			return t;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				var n = _g1.int;
				return n;
			case 1:
				var n = _g1.int;
				return n;
			case 2:
				var n = _g1.f;
				return n;
			}
			break;
		}
		break;
	}
};
stx_nano_Primitive.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return "null";
	case 1:
		var b = this1.b;
		return "" + (b == null ? "null" : "" + b);
	case 2:
		var _g = this1.sprig;
		switch(_g._hx_index) {
		case 0:
			var t = _g.str;
			return t;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				var n = _g1.int;
				return "" + n;
			case 1:
				var n = _g1.int;
				return "" + (n == null ? "null" : haxe_Int64.toString(n));
			case 2:
				var n = _g1.f;
				return "" + n;
			}
			break;
		}
		break;
	}
};
stx_nano_Primitive.prj = function(this1) {
	return this1;
};
stx_nano_Primitive.lt = function(l,r) {
	switch(l._hx_index) {
	case 1:
		if(l.b == false) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
		} else if(r._hx_index == 1) {
			var _g = r.b;
			return false;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 2:
		var _g = l.sprig;
		switch(_g._hx_index) {
		case 0:
			if(r._hx_index == 2) {
				var _g1 = r.sprig;
				if(_g1._hx_index == 0) {
					var str0 = _g1.str;
					var str = _g.str;
					return str < str0;
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
			break;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 0) {
							var int0 = _g2.int;
							var int = _g1.int;
							return int < int0;
						} else {
							var x = l;
							var y = r;
							return x._hx_index < y._hx_index;
						}
					} else {
						var x = l;
						var y = r;
						return x._hx_index < y._hx_index;
					}
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
				break;
			case 1:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 1) {
							var int0 = _g2.int;
							var int = _g1.int;
							var v = int.high - int0.high | 0;
							if(v == 0) {
								v = haxe_Int32.ucompare(int.low,int0.low);
							}
							return (int.high < 0 ? int0.high < 0 ? v : -1 : int0.high >= 0 ? v : 1) < 0;
						} else {
							var x = l;
							var y = r;
							return x._hx_index < y._hx_index;
						}
					} else {
						var x = l;
						var y = r;
						return x._hx_index < y._hx_index;
					}
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
				break;
			case 2:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 2) {
							var fl0 = _g2.f;
							var fl = _g1.f;
							return fl < fl0;
						} else {
							var x = l;
							var y = r;
							return x._hx_index < y._hx_index;
						}
					} else {
						var x = l;
						var y = r;
						return x._hx_index < y._hx_index;
					}
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
				break;
			}
			break;
		}
		break;
	default:
		var x = l;
		var y = r;
		return x._hx_index < y._hx_index;
	}
};
stx_nano_Primitive.eq = function(l,r) {
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(l.b) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else if(r._hx_index == 1) {
			if(r.b == false) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 2:
		var _g = l.sprig;
		switch(_g._hx_index) {
		case 0:
			if(r._hx_index == 2) {
				var _g1 = r.sprig;
				if(_g1._hx_index == 0) {
					var str0 = _g1.str;
					var str = _g.str;
					return str == str0;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 0) {
							var int0 = _g2.int;
							var int = _g1.int;
							return int == int0;
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 1:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 1) {
							var int0 = _g2.int;
							var int = _g1.int;
							if(int.high == int0.high) {
								return int.low == int0.low;
							} else {
								return false;
							}
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 2:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 2) {
							var fl0 = _g2.f;
							var fl = _g1.f;
							return fl == fl0;
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			}
			break;
		}
		break;
	}
};
var stx_nano_ReceiptLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.ReceiptLift"] = stx_nano_ReceiptLift;
stx_nano_ReceiptLift.__name__ = "stx.nano.ReceiptLift";
stx_nano_ReceiptLift.make = function() {
	return new stx_nano_ReceiptLift();
};
stx_nano_ReceiptLift.lift = function(self) {
	return stx_nano_Receipt.lift(self);
};
stx_nano_ReceiptLift.errate = function(self,fn) {
	return stx_nano_ReceiptLift.errata(self,function(x) {
		return x.errate(fn);
	});
};
stx_nano_ReceiptLift.errata = function(self,fn) {
	return stx_nano_Receipt.make(self.value,stx_nano_ErrataLift.errata(self.get_error(),fn));
};
stx_nano_ReceiptLift.copy = function(self,value,error) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,value);
	var tmp;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp = v;
	} else {
		tmp = self.value;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var v = self.get_error();
	var tmp1;
	if(self1._hx_index == 0) {
		var v1 = self1.v;
		tmp1 = v1;
	} else {
		tmp1 = v;
	}
	return stx_nano_Receipt.make(tmp,tmp1);
};
stx_nano_ReceiptLift.map = function(self,fn) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self.value);
	var tmp;
	switch(self1._hx_index) {
	case 0:
		var t = self1.v;
		tmp = fn(t);
		break;
	case 1:
		tmp = null;
		break;
	}
	return stx_nano_Receipt.make(tmp,self.get_error());
};
stx_nano_ReceiptLift.is_defined = function(self) {
	return self.value != null;
};
stx_nano_ReceiptLift.has_errors = function(self) {
	return stx_nano_ErrataLift.is_defined(self.get_error());
};
stx_nano_ReceiptLift.toUpshot = function(self) {
	if(stx_nano_ReceiptLift.has_errors(self)) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.fromError(stx_nano_Defect.toError(self.toDefect())));
	} else {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,self.value);
	}
};
stx_nano_ReceiptLift.__super__ = stx_pico_Clazz;
stx_nano_ReceiptLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_ReceiptLift
});
var stx_nano_Receipt = {};
stx_nano_Receipt.__properties__ = {get_self:"get_self"};
stx_nano_Receipt._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Receipt.lift = function(self) {
	return stx_nano_Receipt._new(self);
};
stx_nano_Receipt.unit = function() {
	return stx_nano_Receipt.make(null,stx_nano_Iter.unit());
};
stx_nano_Receipt.make = function(value,error) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var v = stx_nano_Iter.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	return stx_nano_Receipt.lift(new stx_nano_ReceiptCls(tmp,value));
};
stx_nano_Receipt.prj = function(this1) {
	return this1;
};
stx_nano_Receipt.get_self = function(this1) {
	return stx_nano_Receipt.lift(this1);
};
stx_nano_Receipt.fromDefect = function(self) {
	return stx_nano_Receipt.make(null,self.get_error());
};
stx_nano_Receipt.pure = function(self) {
	return stx_nano_Receipt.make(self,stx_nano_Iter.unit());
};
stx_nano_Receipt.toError = function(this1) {
	return stx_nano_ErrataLift.toError(this1.get_error());
};
var stx_nano_Register = {};
stx_nano_Register.__properties__ = {get_self:"get_self"};
stx_nano_Register._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Register.lift = function(self) {
	return stx_nano_Register._new(self);
};
stx_nano_Register.get = function(this1,key) {
	return this1[key];
};
stx_nano_Register.prj = function(this1) {
	return this1;
};
stx_nano_Register.get_self = function(this1) {
	return stx_nano_Register.lift(this1);
};
var stx_nano_RejectionLift = function() { };
$hxClasses["stx.nano.RejectionLift"] = stx_nano_RejectionLift;
stx_nano_RejectionLift.__name__ = "stx.nano.RejectionLift";
stx_nano_RejectionLift.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_RejectionLift.concat = function(self,that) {
	var this1 = self.concat(stx_nano_Rejection.prj(that));
	return this1;
};
stx_nano_RejectionLift.errate = function(self,fn) {
	var this1 = self.errate(function(x) {
		return stx_nano_DeclinationLift.map(x,fn);
	});
	return this1;
};
stx_nano_RejectionLift.usher = function(self,fn) {
	var _g = self.get_val();
	if(_g._hx_index == 0) {
		var _g1 = _g.v;
		if(_g1._hx_index == 0) {
			var e = _g1.v;
			return fn(haxe_ds_Option.Some(e));
		} else {
			return fn(haxe_ds_Option.None);
		}
	} else {
		return fn(haxe_ds_Option.None);
	}
};
stx_nano_RejectionLift.fold = function(self,reject,explain,nothing) {
	var _g = self.get_val();
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.v;
		switch(_g1._hx_index) {
		case 0:
			var e = _g1.v;
			return reject(e);
		case 1:
			var e = _g1.digest;
			return explain(e);
		}
		break;
	case 1:
		return nothing();
	}
};
var stx_nano_Rejection = {};
stx_nano_Rejection.__properties__ = {get_lst:"get_lst",get_self:"get_self"};
stx_nano_Rejection._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Rejection.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Rejection.make = function(data,lst,pos) {
	var data1 = data;
	var lst1 = stx_pico_OptionLift.map(lst,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst1 == null) {
		lst1 = haxe_ds_Option.None;
	}
	var this1 = new stx_pico_ErrorBase(data1,lst1,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
	return this1;
};
stx_nano_Rejection.pure = function(data) {
	var pos = stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/nano/Rejection.hx", lineNumber : 14, className : "stx.nano._Rejection.Rejection_Impl_", methodName : "pure"});
	var data1 = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(data));
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this1 = new stx_pico_ErrorBase(data1,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
	return this1;
};
stx_nano_Rejection.prj = function(this1) {
	return this1;
};
stx_nano_Rejection.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
stx_nano_Rejection.concat = function(this1,that) {
	return stx_nano_Rejection._.concat(this1,that);
};
stx_nano_Rejection.get_lst = function(this1) {
	return stx_pico_OptionLift.map(this1.get_lst(),stx_nano_Rejection.lift);
};
stx_nano_Rejection.errate = function(this1,fn) {
	return stx_nano_Rejection._.errate(this1,fn);
};
stx_nano_Rejection.fromError = function(self) {
	var this1 = self.errate(stx_nano_DeclinationSum.REJECT);
	return this1;
};
stx_nano_Rejection.fromDefect = function(self) {
	return stx_nano_Rejection.fromError(stx_nano_Defect.toError(self));
};
stx_nano_Rejection.fromErrata = function(self) {
	return stx_nano_Rejection.fromError(stx_nano_ErrataLift.toError(self));
};
stx_nano_Rejection.iterator = function(this1) {
	return this1.iterator();
};
var stx_nano_ReportLift = function() { };
$hxClasses["stx.nano.ReportLift"] = stx_nano_ReportLift;
stx_nano_ReportLift.__name__ = "stx.nano.ReportLift";
stx_nano_ReportLift.lift = function(self) {
	return stx_nano_Report._new(self);
};
stx_nano_ReportLift.resolve = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v);
			break;
		case 1:
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.concat = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var r = that.v;
			var l = _g;
			return stx_nano_ReportSum.Reported(stx_nano_Rejection.concat(l,r));
		case 1:
			var l = _g;
			return stx_nano_ReportSum.Reported(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return stx_nano_ReportSum.Reported(r);
		} else {
			return stx_nano_ReportSum.Happened;
		}
		break;
	}
};
stx_nano_ReportLift.fold = function(self,val,nil) {
	if(self == null) {
		return nil();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return val(v);
		case 1:
			return nil();
		}
	}
};
stx_nano_ReportLift.def = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = fn();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = v;
			break;
		case 1:
			tmp = fn();
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.defv = function(self,v) {
	return stx_nano_ReportLift.def(self,function() {
		return v;
	});
};
stx_nano_ReportLift.is_defined = function(self) {
	if(self == null) {
		return false;
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return true;
		case 1:
			return false;
		}
	}
};
stx_nano_ReportLift.ignore = function(self,fn) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn);
	if(self1._hx_index == 0) {
		var v = self1.v;
	} else {
		fn = function(x) {
			return true;
		};
	}
	if(self == null) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 155, className : "stx.nano.ReportLift", methodName : "ignore"})));
		}
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			var err = v;
			var self = err.get_val();
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				return stx_nano_lift_LiftNano.if_else(fn(t),function() {
					var f = null;
					if(f == null) {
						return stx_nano_Report.unit();
					} else {
						return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 150, className : "stx.nano.ReportLift", methodName : "ignore"})));
					}
				},function() {
					return stx_nano_lift_LiftError.report(err);
				});
			case 1:
				var f = null;
				if(f == null) {
					return stx_nano_Report.unit();
				} else {
					return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 153, className : "stx.nano.ReportLift", methodName : "ignore"})));
				}
				break;
			}
			break;
		case 1:
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 155, className : "stx.nano.ReportLift", methodName : "ignore"})));
			}
			break;
		}
	}
};
stx_nano_ReportLift.so = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = fn();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = stx_nano_lift_LiftError.report(v);
			break;
		case 1:
			tmp = fn();
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.and = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = fn();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = stx_nano_lift_LiftError.report(v);
			break;
		case 1:
			tmp = fn();
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.usher = function(self,fn) {
	if(self._hx_index == 0) {
		var rejection = self.v;
		return stx_nano_RejectionLift.usher(rejection,fn);
	} else {
		return fn(haxe_ds_Option.None);
	}
};
stx_nano_ReportLift.raise = function(self) {
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			v.raise();
			break;
		case 1:
			break;
		}
	}
};
var stx_nano_Report = {};
stx_nano_Report._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Report.lift = function(self) {
	return stx_nano_Report._new(self);
};
stx_nano_Report.make = function(data,pos) {
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
	var data1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(data));
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data1,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	return stx_nano_Report.pure(this2);
};
stx_nano_Report.make0 = function(data,pos) {
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
	var data1 = haxe_ds_Option.Some(data);
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data1,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	return stx_nano_Report.pure(this2);
};
stx_nano_Report.unit = function() {
	return stx_nano_Report._new(stx_nano_ReportSum.Happened);
};
stx_nano_Report.conf = function(e) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e),stx_nano_ReportSum.Reported);
	var self1;
	if(self._hx_index == 0) {
		var v = self.v;
		self1 = v;
	} else {
		self1 = stx_nano_ReportSum.Happened;
	}
	return stx_nano_Report._new(self1);
};
stx_nano_Report.pure = function(e) {
	return stx_nano_Report._new(stx_nano_ReportSum.Reported(e));
};
stx_nano_Report.effects = function(this1,success,failure) {
	var tmp;
	if(this1 == null) {
		success();
		tmp = stx_nano_Report.unit();
	} else {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			failure();
			tmp = stx_nano_Report.pure(v);
			break;
		case 1:
			success();
			tmp = stx_nano_Report.unit();
			break;
		}
	}
	return tmp;
};
stx_nano_Report.crunch = function(this1) {
	if(this1._hx_index == 0) {
		var e = this1.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_Report.fromStdOption = function(opt) {
	var self;
	switch(opt._hx_index) {
	case 0:
		var t = opt.v;
		self = stx_nano_ReportSum.Reported(t);
		break;
	case 1:
		self = stx_nano_ReportSum.Happened;
		break;
	}
	return stx_nano_Report._new(self);
};
stx_nano_Report.fromOption = function(opt) {
	var self;
	switch(opt._hx_index) {
	case 0:
		var t = opt.v;
		self = stx_nano_ReportSum.Reported(t);
		break;
	case 1:
		self = stx_nano_ReportSum.Happened;
		break;
	}
	return stx_nano_Report._new(self);
};
stx_nano_Report.prj = function(this1) {
	return this1;
};
stx_nano_Report.value = function(this1) {
	var tmp;
	if(this1 == null) {
		tmp = haxe_ds_Option.None;
	} else {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			tmp = haxe_ds_Option.Some(v);
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
	}
	return tmp;
};
stx_nano_Report.defv = function(this1,error) {
	var v = error;
	return stx_nano_ReportLift.def(this1,function() {
		return v;
	});
};
stx_nano_Report.or = function(this1,that) {
	var tmp;
	if(this1 == null) {
		tmp = that();
	} else {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			tmp = stx_nano_Report.pure(v);
			break;
		case 1:
			tmp = that();
			break;
		}
	}
	return tmp;
};
stx_nano_Report.errata = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		tmp = stx_nano_ReportSum.Reported(fn(v));
		break;
	case 1:
		tmp = stx_nano_ReportSum.Happened;
		break;
	}
	return stx_nano_Report._new(tmp);
};
stx_nano_Report.is_ok = function(this1) {
	if(this1._hx_index == 1) {
		return true;
	} else {
		return false;
	}
};
stx_nano_Report.promote = function(this1) {
	return stx_nano_Report._.resolve(this1,function() {
		return null;
	});
};
stx_nano_Report.alert = function(this1) {
	return stx_nano_Alert.make(this1);
};
var stx_nano_ReportSum = $hxEnums["stx.nano.ReportSum"] = { __ename__:"stx.nano.ReportSum",__constructs__:null
	,Reported: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.ReportSum",toString:$estr}; },$_._hx_name="Reported",$_.__params__ = ["v"],$_)
	,Happened: {_hx_name:"Happened",_hx_index:1,__enum__:"stx.nano.ReportSum",toString:$estr}
};
stx_nano_ReportSum.__constructs__ = [stx_nano_ReportSum.Reported,stx_nano_ReportSum.Happened];
var stx_nano_ResSum = $hxEnums["stx.nano.ResSum"] = { __ename__:"stx.nano.ResSum",__constructs__:null
	,Accept: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.nano.ResSum",toString:$estr}; },$_._hx_name="Accept",$_.__params__ = ["t"],$_)
	,Reject: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.nano.ResSum",toString:$estr}; },$_._hx_name="Reject",$_.__params__ = ["e"],$_)
};
stx_nano_ResSum.__constructs__ = [stx_nano_ResSum.Accept,stx_nano_ResSum.Reject];
var stx_nano_ResSumLift = function() { };
$hxClasses["stx.nano.ResSumLift"] = stx_nano_ResSumLift;
stx_nano_ResSumLift.__name__ = "stx.nano.ResSumLift";
stx_nano_ResSumLift.toString = function(self) {
	return stx_nano_ResLift.toString(self);
};
var stx_nano_ResLift = function() { };
$hxClasses["stx.nano.ResLift"] = stx_nano_ResLift;
stx_nano_ResLift.__name__ = "stx.nano.ResLift";
stx_nano_ResLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return "Accept(" + Std.string(t) + ")";
	case 1:
		var e = self.e;
		return "Reject(" + e.toString() + ")";
	}
};
stx_nano_ResLift.errata = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_Res.accept(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_Res.reject(fn(e));
		break;
	}
	var this1 = self1;
	return this1;
};
stx_nano_ResLift.errate = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_Res.accept(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_Res.reject(stx_nano_Rejection.errate(e,fn));
		break;
	}
	var this1 = self1;
	return this1;
};
stx_nano_ResLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var tt = that.t;
			var t = _g;
			return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
		case 1:
			var e = that.e;
			return stx_nano_ResSum.Reject(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var ee = that.e;
			var e = _g;
			return stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
		} else {
			var e = _g;
			return stx_nano_ResSum.Reject(e);
		}
		break;
	}
};
stx_nano_ResLift.zip_with = function(self,that,$with) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var tt = that.t;
			var t = _g;
			return stx_nano_ResSum.Accept($with(t,tt));
		case 1:
			var e = that.e;
			return stx_nano_ResSum.Reject(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var ee = that.e;
			var e = _g;
			return stx_nano_ResSum.Reject(stx_nano_Rejection.concat(e,ee));
		} else {
			var e = _g;
			return stx_nano_ResSum.Reject(e);
		}
		break;
	}
};
stx_nano_ResLift.map = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_ResSum.Accept(fn(t));
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_ResSum.Reject(e);
		break;
	}
	var this1 = self1;
	return this1;
};
stx_nano_ResLift.flat_map = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = fn(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_ResSum.Reject(e);
		break;
	}
	var this1 = self1;
	return this1;
};
stx_nano_ResLift.adjust = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = fn(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_ResSum.Reject(e);
		break;
	}
	var this1 = self1;
	return this1;
};
stx_nano_ResLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_nano_ResLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_ResLift.elide = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_ResSum.Reject(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_ResSum.Accept(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.option = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = haxe_ds_Option.Some(t);
		break;
	case 1:
		var e = self.e;
		tmp = haxe_ds_Option.None;
		break;
	}
	return tmp;
};
stx_nano_ResLift.report = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Report.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_Report.pure(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.usher = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Report.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_Report.pure(e);
		break;
	}
	return stx_nano_ReportLift.usher(tmp,fn);
};
stx_nano_ResLift.rectify = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Res.accept(t);
		break;
	case 1:
		var e = self.e;
		tmp = fn(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.recover = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		return fn(e);
	}
};
stx_nano_ResLift.effects = function(self,success,failure) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		success(t);
		tmp = stx_nano_Res.accept(t);
		break;
	case 1:
		var e = self.e;
		failure(e);
		tmp = stx_nano_Res.reject(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.is_ok = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return true;
	case 1:
		var e = self.e;
		return false;
	}
};
stx_nano_ResLift.toPledge = function(self) {
	return stx_nano_Pledge.fromUpshot(self);
};
stx_nano_ResLift.point = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return stx_nano_lift_LiftError.report(e);
	}
};
var stx_nano_Upshot = {};
stx_nano_Res.__properties__ = {get_self:"get_self"};
stx_nano_Res._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Res.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
stx_nano_Res.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Res.accept = function(t) {
	var this1 = stx_nano_ResSum.Accept(t);
	return this1;
};
stx_nano_Res.reject = function(e) {
	var this1 = stx_nano_ResSum.Reject(e);
	return this1;
};
stx_nano_Res.fromReport = function(self) {
	var self1;
	if(self == null) {
		self1 = stx_nano_Res.accept(null);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			self1 = stx_nano_Res.reject(v);
			break;
		case 1:
			self1 = stx_nano_Res.accept(null);
			break;
		}
	}
	var this1 = self1;
	return this1;
};
stx_nano_Res.prj = function(this1) {
	return this1;
};
stx_nano_Res.fromOutcome = function(self) {
	var ocd;
	switch(self._hx_index) {
	case 0:
		var ok = self.t;
		ocd = stx_nano_ResSum.Accept(ok);
		break;
	case 1:
		var no = self.e;
		ocd = stx_nano_ResSum.Reject(no);
		break;
	}
	var this1 = ocd;
	return this1;
};
stx_nano_Res.toOutcome = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var ok = this1.t;
		return stx_pico_OutcomeSum.Success(ok);
	case 1:
		var no = this1.e;
		return stx_pico_OutcomeSum.Failure(no);
	}
};
stx_nano_Res.bind_fold = function(arr,fn,init) {
	return stx_nano_ClusterLift.lfold(arr,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var t = memo.t;
			return fn(next,t);
		case 1:
			var e = memo.e;
			return stx_nano_Res.reject(e);
		}
	},stx_nano_Res.accept(init));
};
stx_nano_Res.toStringable = function(this1) {
	var self = this1;
	return { toString : function() {
		return stx_nano_Res._.toString(self);
	}};
};
var stx_nano_Resource = {};
stx_nano_Resource.exists = function(str) {
	return stx_lift_ArrayLift.any(haxe_Resource.listNames(),function(x) {
		return x == str;
	});
};
stx_nano_Resource._new = function(str,pos) {
	if(!stx_nano_Resource.exists(str)) {
		if(pos == null) {
			throw haxe_Exception.thrown("E_ResourceNotFound(" + str + ")");
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_resource_not_found(stx_Nano.digests(stx_nano_Wildcard.__),str)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			var error = this2;
			var this1 = stx_Log.ZERO;
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(3);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("resource \"" + str + "\" not found.")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/nano/Resource.hx", lineNumber : 23, className : "stx.nano._Resource.Resource_Impl_", methodName : "_new"}));
			throw haxe_Exception.thrown(error);
		}
	}
	var this2 = str;
	return this2;
};
stx_nano_Resource.string = function(this1) {
	return haxe_Resource.getString(this1);
};
stx_nano_Resource.bytes = function(this1) {
	return haxe_Resource.getBytes(this1);
};
stx_nano_Resource.json = function(this1) {
	try {
		return JSON.parse(stx_nano_Resource.string(this1));
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		throw haxe_Exception.thrown("ERROR parsing " + this1 + ": " + Std.string(e));
	}
};
var stx_nano_Retry = function(attempts,born) {
	this.attempts = attempts;
	this.born = born;
};
$hxClasses["stx.nano.Retry"] = stx_nano_Retry;
stx_nano_Retry.__name__ = "stx.nano.Retry";
stx_nano_Retry.make = function(attempts,born) {
	return new stx_nano_Retry(attempts,born);
};
stx_nano_Retry.unit = function() {
	return stx_nano_Retry.make(0,HxOverrides.now() / 1000);
};
stx_nano_Retry.prototype = {
	attempts: null
	,born: null
	,copy: function(attempts,born) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,attempts);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.attempts;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,born);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.born;
		}
		return new stx_nano_Retry(tmp,tmp1);
	}
	,get_duration: function() {
		return HxOverrides.now() / 1000 - this.born;
	}
	,next: function() {
		return this.copy(this.attempts + 1);
	}
	,__class__: stx_nano_Retry
	,__properties__: {get_duration:"get_duration"}
};
var stx_nano_SignalLift = function() { };
$hxClasses["stx.nano.SignalLift"] = stx_nano_SignalLift;
stx_nano_SignalLift.__name__ = "stx.nano.SignalLift";
stx_nano_SignalLift.lift = function(self) {
	return stx_nano_Signal.lift(self);
};
stx_nano_SignalLift.flat_map = function(self,fn) {
	var this1 = new tink_core__$Signal_Suspendable(function(cb) {
		var cancelled = false;
		var links = [];
		links.push(self.listen(function(t) {
			if(!cancelled) {
				var sI = fn(t);
				links.push(sI.listen(function(tI) {
					cb(tI);
				}));
			} else {
				throw haxe_Exception.thrown("stream already cancelled");
			}
		}));
		var this1 = new tink_core_SimpleLink(function() {
			cancelled = true;
			var _g = 0;
			while(_g < links.length) {
				var link = links[_g];
				++_g;
				var fn = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,link));
				while(fn.hasNext()) {
					var fn1 = fn.next();
					if(fn1 != null) {
						fn1.cancel();
					}
				}
			}
		});
		return this1;
	},null);
	return stx_nano_SignalLift.lift(this1);
};
stx_nano_SignalLift.lscan = function(self,fn,unit) {
	return stx_nano_Signal.map(self,function(t) {
		unit = fn(t,unit);
		return unit;
	});
};
stx_nano_SignalLift.next = function(self) {
	return tink_core_Signal.nextTime(stx_nano_Signal.prj(self));
};
var stx_nano_Signal = {};
stx_nano_Signal._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Signal.lift = function(self) {
	return stx_nano_Signal._new(self);
};
stx_nano_Signal.make = function(f,init) {
	var this1 = new tink_core__$Signal_Suspendable(f,init);
	return stx_nano_Signal.lift(this1);
};
stx_nano_Signal.bind_fold = function(self,fn,init) {
	var this1 = new tink_core__$Signal_Suspendable(function(cb) {
		var self1 = self;
		var this1 = new tink_core__$Signal_Suspendable(function(cb) {
			cb(init);
			var this1 = new tink_core_SimpleLink(function() {
			});
			return this1;
		},null);
		return stx_nano_Signal._.flat_map(stx_nano_Signal._.lscan(self1,function(next,memo) {
			var _g = fn;
			var a1 = next;
			return stx_nano_Signal._.flat_map(memo,function(a2) {
				return _g(a1,a2);
			});
		},this1),function(z) {
			return z;
		}).listen(cb);
	},null);
	return stx_nano_Signal.lift(this1);
};
stx_nano_Signal.pure = function(v) {
	var this1 = new tink_core__$Signal_Suspendable(function(cb) {
		cb(v);
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	},null);
	return stx_nano_Signal.lift(this1);
};
stx_nano_Signal.join = function(this1,that) {
	return tink_core_Signal.join(this1,that);
};
stx_nano_Signal.fromArray = function(arr) {
	return stx_nano_Signal.make(function(cb) {
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			cb(v);
		}
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	});
};
stx_nano_Signal.fromFuture = function(ft) {
	return stx_nano_Signal.make(function(cb) {
		return ft.handle(function(x) {
			cb(x);
		});
	});
};
stx_nano_Signal.map_filter = function(this1,fn) {
	return stx_nano_Signal.map(stx_nano_Signal.filter(stx_nano_Signal.map(this1,fn),function(_) {
		return stx_pico_OptionLift.is_defined(_);
	}),function(_) {
		return stx_pico_OptionLift.fudge(_);
	});
};
stx_nano_Signal.filter = function(this1,fn) {
	return stx_nano_Signal.lift(tink_core_Signal.filter(this1,fn));
};
stx_nano_Signal.map = function(this1,fn) {
	return stx_nano_Signal.lift(tink_core_Signal.map(this1,fn));
};
stx_nano_Signal.tap = function(this1,fn) {
	return stx_nano_Signal.map(this1,function(x) {
		fn(x);
		return x;
	});
};
stx_nano_Signal.prj = function(this1) {
	return this1;
};
stx_nano_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
var stx_nano_SlotCls = function(data,guard,pos) {
	this.data = data;
	this.ready = true;
	this.pos = pos;
	if(guard != null) {
		this.ready = false;
		this.guard = guard;
		guard.handle($bind(this,this.handler));
	}
};
$hxClasses["stx.nano.SlotCls"] = stx_nano_SlotCls;
stx_nano_SlotCls.__name__ = "stx.nano.SlotCls";
stx_nano_SlotCls.prototype = {
	handler: function(data) {
		this.ready = true;
		this.data = data;
	}
	,data: null
	,guard: null
	,ready: null
	,pos: null
	,toString: function() {
		var p = stx_nano_PositionLift.to_vscode_clickable_link(stx_nano_Position.fromPos(this.pos));
		return "Slot(" + Std.string(this.ready) + " " + p + ")";
	}
	,step: function() {
		return -1;
	}
	,__class__: stx_nano_SlotCls
};
var stx_nano_SlotLift = function() { };
$hxClasses["stx.nano.SlotLift"] = stx_nano_SlotLift;
stx_nano_SlotLift.__name__ = "stx.nano.SlotLift";
stx_nano_SlotLift.map = function(self,fn) {
	if(self.ready) {
		return stx_nano_Slot.Ready(fn(self.data),self.pos);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
			return fn(t);
		}),self.pos);
	}
};
stx_nano_SlotLift.flat_map = function(self,fn) {
	if(self.ready) {
		return fn(self.data);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.flatMap(self.guard,function(t) {
			var val = fn(t);
			if(val.ready) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
					return val.data;
				}));
			} else {
				return val.guard;
			}
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 80, className : "stx.nano.SlotLift", methodName : "flat_map"});
	}
};
stx_nano_SlotLift.value = function(self) {
	if(self.ready == true) {
		return haxe_ds_Option.Some(self.data);
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_SlotLift.handle = function(self,fn) {
	if(self.ready) {
		fn(self.data);
	} else {
		self.guard.handle(fn);
	}
};
stx_nano_SlotLift.toFuture = function(self) {
	if(self.ready) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return self.data;
		}));
	} else {
		return self.guard;
	}
};
stx_nano_SlotLift.zip = function(self,that) {
	var _g = that.ready;
	if(self.ready) {
		if(_g) {
			return stx_nano_Slot.Ready(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,that.data),{ fileName : "stx/nano/Slot.hx", lineNumber : 113, className : "stx.nano.SlotLift", methodName : "zip"});
		} else {
			var fn = function(rhs) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,rhs);
			};
			if(that.ready) {
				return stx_nano_Slot.Ready(fn(that.data),that.pos);
			} else {
				return stx_nano_Slot.Guard(tink_core_Future.map(that.guard,function(t) {
					return fn(t);
				}),that.pos);
			}
		}
	} else if(_g) {
		var fn1 = function(lhs) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,that.data);
		};
		if(self.ready) {
			return stx_nano_Slot.Ready(fn1(self.data),self.pos);
		} else {
			return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
				return fn1(t);
			}),self.pos);
		}
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.merge(self.guard,that.guard,function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 116, className : "stx.nano.SlotLift", methodName : "zip"});
	}
};
var stx_nano_Slot = {};
stx_nano_Slot.__properties__ = {get_self:"get_self"};
stx_nano_Slot._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Slot.lift = function(self) {
	return stx_nano_Slot._new(self);
};
stx_nano_Slot.prj = function(this1) {
	return this1;
};
stx_nano_Slot.get_self = function(this1) {
	return stx_nano_Slot._new(this1);
};
stx_nano_Slot.Ready = function(v,pos) {
	return new stx_nano_SlotCls(v,null,pos);
};
stx_nano_Slot.Guard = function(v,pos) {
	return new stx_nano_SlotCls(null,v,pos);
};
stx_nano_Slot.toSlot = function(ft) {
	return new stx_nano_SlotCls(null,ft,{ fileName : "stx/nano/Slot.hx", lineNumber : 53, className : "stx.nano._Slot.Slot_Impl_", methodName : "toSlot"});
};
stx_nano_Slot.fromFunSinkVoid = function(fn) {
	var v = haxe_ds_Option.None;
	var handler = function(h) {
		v = haxe_ds_Option.Some(h);
	};
	fn(handler);
	switch(v._hx_index) {
	case 0:
		var v1 = v.v;
		return stx_nano_Slot.Ready(v1,{ fileName : "stx/nano/Slot.hx", lineNumber : 62, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	case 1:
		return stx_nano_Slot.Guard(tink_core_Future.irreversible(fn),{ fileName : "stx/nano/Slot.hx", lineNumber : 63, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	}
};
var stx_nano_SprigSum = $hxEnums["stx.nano.SprigSum"] = { __ename__:"stx.nano.SprigSum",__constructs__:null
	,Textal: ($_=function(str) { return {_hx_index:0,str:str,__enum__:"stx.nano.SprigSum",toString:$estr}; },$_._hx_name="Textal",$_.__params__ = ["str"],$_)
	,Byteal: ($_=function(byte) { return {_hx_index:1,byte:byte,__enum__:"stx.nano.SprigSum",toString:$estr}; },$_._hx_name="Byteal",$_.__params__ = ["byte"],$_)
};
stx_nano_SprigSum.__constructs__ = [stx_nano_SprigSum.Textal,stx_nano_SprigSum.Byteal];
var stx_nano_Sprig = {};
stx_nano_Sprig.__properties__ = {get_self:"get_self"};
stx_nano_Sprig._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Sprig.lift = function(self) {
	return stx_nano_Sprig._new(self);
};
stx_nano_Sprig.toPrimitive = function(this1) {
	return stx_nano_PrimitiveDef.PSprig(this1);
};
stx_nano_Sprig.prj = function(this1) {
	return this1;
};
stx_nano_Sprig.get_self = function(this1) {
	return stx_nano_Sprig.lift(this1);
};
stx_nano_Sprig.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var str = this1.str;
		return str;
	case 1:
		var b = this1.byte;
		return stx_nano_Numeric.toString(b);
	}
};
stx_nano_Sprig.fold = function(this1,textal,byteal) {
	switch(this1._hx_index) {
	case 0:
		var txt = this1.str;
		return textal(txt);
	case 1:
		var num = this1.byte;
		return byteal(num);
	}
};
var stx_nano_Stringable = {};
stx_nano_Stringable.lift = function(self) {
	return stx_nano_Stringable._new(self);
};
stx_nano_Stringable._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_nano_TimeStamp = {};
stx_nano_TimeStamp._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_TimeStamp.pure = function(v) {
	return stx_nano_TimeStamp._new(v);
};
stx_nano_TimeStamp.compare_to = function(this1,that) {
	if(this1.realm > that.realm) {
		return 1;
	} else if(this1.realm == that.realm) {
		if(this1.exact > that.exact) {
			return 1;
		} else {
			return -1;
		}
	} else {
		return -1;
	}
};
var stx_nano_Timer = {};
stx_nano_Timer._new = function(self) {
	var this1;
	if(self == null) {
		this1 = stx_nano_Timer.unit();
	} else {
		this1 = self;
	}
	return this1;
};
stx_nano_Timer.pure = function(v) {
	return { created : v};
};
stx_nano_Timer.unit = function() {
	return stx_nano_Timer.pure(stx_nano_Timer.mark());
};
stx_nano_Timer.mark = function() {
	return HxOverrides.now() / 1000;
};
stx_nano_Timer.copy = function(this1,created) {
	return stx_nano_Timer.pure(created == null ? this1.created : created);
};
stx_nano_Timer.start = function(this1) {
	return stx_nano_Timer.copy(this1,stx_nano_Timer.mark());
};
stx_nano_Timer.since = function(this1) {
	return stx_nano_Timer.mark() - this1.created;
};
stx_nano_Timer.prj = function(this1) {
	return this1;
};
var stx_nano_TripleLift = function() { };
$hxClasses["stx.nano.TripleLift"] = stx_nano_TripleLift;
stx_nano_TripleLift.__name__ = "stx.nano.TripleLift";
stx_nano_TripleLift.map = function(self,fn) {
	return function(tp) {
		self(function(tI,tII,tIII) {
			tp(tI,tII,fn(tIII));
		});
	};
};
stx_nano_TripleLift.fst = function(self) {
	return stx_nano_TripleLift.detriple(self,function(tI,_,_1) {
		return tI;
	});
};
stx_nano_TripleLift.snd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,tII,_1) {
		return tII;
	});
};
stx_nano_TripleLift.thd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,_1,tIII) {
		return tIII;
	});
};
stx_nano_TripleLift.equals = function(lhs,rhs) {
	return stx_nano_TripleLift.detriple(lhs,function(t0I,t0II,t0III) {
		return stx_nano_TripleLift.detriple(rhs,function(t1I,t1II,t1III) {
			if(t0I == t1I && t0II == t1II) {
				return t0III == t1III;
			} else {
				return false;
			}
		});
	});
};
stx_nano_TripleLift.reduce = function(self,f_a,f_b,f_c,plus) {
	return stx_nano_TripleLift.detriple(self,function(tI,tII,tIII) {
		return plus(plus(f_a(tI),f_b(tII)),f_c(tIII));
	});
};
stx_nano_TripleLift.detriple = function(self,fn) {
	var out = null;
	self(function(tI,tII,tIII) {
		out = fn(tI,tII,tIII);
	});
	return out;
};
stx_nano_TripleLift.tup = function(self) {
	return stx_nano_TripleLift.detriple(self,stx_Tup3.tuple3);
};
stx_nano_TripleLift.toString = function(self) {
	return stx_nano_TripleLift.detriple(self,function(a,b,c) {
		return "(" + Std.string(a) + " " + Std.string(b) + " " + Std.string(c) + ")";
	});
};
var stx_nano_Triple = {};
stx_nano_Triple.__properties__ = {get__2:"get__2",get__1:"get__1",get__0:"get__0"};
stx_nano_Triple.toString = function(this1) {
	return stx_nano_TripleLift.toString(this1);
};
stx_nano_Triple.get__0 = function(this1) {
	return stx_nano_Triple._.fst(this1);
};
stx_nano_Triple.get__1 = function(this1) {
	return stx_nano_Triple._.snd(this1);
};
stx_nano_Triple.get__2 = function(this1) {
	return stx_nano_Triple._.thd(this1);
};
var stx_nano_TrivalentSum = $hxEnums["stx.nano.TrivalentSum"] = { __ename__:"stx.nano.TrivalentSum",__constructs__:null
	,Yay: {_hx_name:"Yay",_hx_index:0,__enum__:"stx.nano.TrivalentSum",toString:$estr}
	,Nay: {_hx_name:"Nay",_hx_index:1,__enum__:"stx.nano.TrivalentSum",toString:$estr}
	,Maybe: {_hx_name:"Maybe",_hx_index:2,__enum__:"stx.nano.TrivalentSum",toString:$estr}
};
stx_nano_TrivalentSum.__constructs__ = [stx_nano_TrivalentSum.Yay,stx_nano_TrivalentSum.Nay,stx_nano_TrivalentSum.Maybe];
var stx_nano_Trivalent = {};
stx_nano_Trivalent.__properties__ = {get_self:"get_self"};
stx_nano_Trivalent._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Trivalent.lift = function(self) {
	return stx_nano_Trivalent._new(self);
};
stx_nano_Trivalent.prj = function(this1) {
	return this1;
};
stx_nano_Trivalent.get_self = function(this1) {
	return stx_nano_Trivalent.lift(this1);
};
var stx_nano_Unfold = {};
stx_nano_Unfold.fromFunction = function(fn) {
	var unfolder = fn;
	return function(initial) {
		var initial1 = initial;
		var unfolder1 = unfolder;
		return { iterator : function() {
			var _next = haxe_ds_Option.None;
			var _progress = initial1;
			var precomputeNext = function() {
				var _g = unfolder1(_progress);
				switch(_g._hx_index) {
				case 0:
					var tup = _g.v;
					_progress = stx_nano_CoupleLift.fst(tup);
					_next = haxe_ds_Option.Some(stx_nano_CoupleLift.snd(tup));
					break;
				case 1:
					_progress = null;
					_next = haxe_ds_Option.None;
					break;
				}
			};
			precomputeNext();
			return { hasNext : function() {
				if(_next._hx_index == 0) {
					var _g = _next.v;
					return true;
				} else {
					return false;
				}
			}, next : function() {
				var n;
				if(_next._hx_index == 0) {
					var v = _next.v;
					n = v;
				} else {
					n = null;
				}
				precomputeNext();
				return n;
			}};
		}};
	};
};
stx_nano_Unfold._new = function(v) {
	var this1 = v;
	return this1;
};
stx_nano_Unfold.unfold = function(initial,unfolder) {
	return { iterator : function() {
		var _next = haxe_ds_Option.None;
		var _progress = initial;
		var precomputeNext = function() {
			var _g = unfolder(_progress);
			switch(_g._hx_index) {
			case 0:
				var tup = _g.v;
				_progress = stx_nano_CoupleLift.fst(tup);
				_next = haxe_ds_Option.Some(stx_nano_CoupleLift.snd(tup));
				break;
			case 1:
				_progress = null;
				_next = haxe_ds_Option.None;
				break;
			}
		};
		precomputeNext();
		return { hasNext : function() {
			if(_next._hx_index == 0) {
				var _g = _next.v;
				return true;
			} else {
				return false;
			}
		}, next : function() {
			var n;
			if(_next._hx_index == 0) {
				var v = _next.v;
				n = v;
			} else {
				n = null;
			}
			precomputeNext();
			return n;
		}};
	}};
};
var stx_nano_Unique = {};
stx_nano_Unique.__properties__ = {get_self:"get_self"};
stx_nano_Unique._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Unique.lift = function(self) {
	return stx_nano_Unique._new(self);
};
stx_nano_Unique.pure = function(data) {
	return stx_nano_Unique.make(data,function() {
	});
};
stx_nano_Unique.make = function(data,rtid) {
	return stx_nano_Unique._new({ data : data, rtid : rtid});
};
stx_nano_Unique.prj = function(this1) {
	return this1;
};
stx_nano_Unique.get_self = function(this1) {
	return stx_nano_Unique._new(this1);
};
stx_nano_Unique.equals = function(this1,that) {
	return this1.rtid == that.rtid;
};
stx_nano_Unique.toT = function(this1) {
	return this1.data;
};
var stx_nano_VBlock = {};
stx_nano_VBlock.unit = function() {
	return function() {
	};
};
stx_nano_VBlock._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_nano_Way = {};
stx_nano_Way.__properties__ = {get_self:"get_self"};
stx_nano_Way._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Way.lift = function(self) {
	return stx_nano_Way._new(self);
};
stx_nano_Way.unit = function() {
	return stx_nano_Way.lift(stx_nano_Cluster.unit());
};
stx_nano_Way.fromArray = function(self) {
	return stx_nano_Way.lift(stx_nano_Cluster.lift(self));
};
stx_nano_Way.fromPath = function(path) {
	var dir = haxe_io_Path.directory(path.toString());
	var ext = path.ext;
	var file = path.file;
	var name = ext == null ? file : "" + file + "." + ext;
	var sep = path.backslash ? "\\" : "/";
	var data = dir.split(sep);
	data.push(name);
	return stx_nano_Way.lift(stx_nano_Cluster.lift(data));
};
stx_nano_Way.fromStringDotted = function(self) {
	return stx_nano_Way.lift(self.split("."));
};
stx_nano_Way.prj = function(this1) {
	return this1;
};
stx_nano_Way.get_self = function(this1) {
	return stx_nano_Way.lift(this1);
};
stx_nano_Way.snoc = function(this1,that) {
	return stx_nano_Way.lift(stx_nano_ClusterLift.snoc(this1,that));
};
stx_nano_Way.concat = function(this1,that) {
	return stx_nano_Way.lift(stx_nano_Cluster.concat(this1,that));
};
stx_nano_Way.toOsString = function(this1) {
	var value = stx_nano_Cluster.toIterable(this1);
	return (((value) instanceof Array) ? value : null).join(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
};
stx_nano_Way.into = function(this1,name) {
	return stx_nano_Ident.make(name,this1);
};
stx_nano_Way.get = function(this1,i) {
	return this1[i];
};
stx_nano_Way.toArray = function(this1) {
	var value = stx_nano_Cluster.toIterable(this1);
	if(((value) instanceof Array)) {
		return value;
	} else {
		return null;
	}
};
var stx_nano_digest_term_EDigestUUIDReserved = function(uuid) {
	stx_nano_Digest.call(this,"01FRQ557XM5KFRCSZ2Q0FFY069","Uuid \"" + uuid + "\" already registered.");
};
$hxClasses["stx.nano.digest.term.EDigestUUIDReserved"] = stx_nano_digest_term_EDigestUUIDReserved;
stx_nano_digest_term_EDigestUUIDReserved.__name__ = "stx.nano.digest.term.EDigestUUIDReserved";
stx_nano_digest_term_EDigestUUIDReserved.__super__ = stx_nano_Digest;
stx_nano_digest_term_EDigestUUIDReserved.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_EDigestUUIDReserved
});
var stx_nano_digest_term_EJsError = function(error) {
	stx_nano_Digest.call(this,error.name,error.message);
};
$hxClasses["stx.nano.digest.term.EJsError"] = stx_nano_digest_term_EJsError;
stx_nano_digest_term_EJsError.__name__ = "stx.nano.digest.term.EJsError";
stx_nano_digest_term_EJsError.__super__ = stx_nano_Digest;
stx_nano_digest_term_EJsError.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_EJsError
});
var stx_nano_digest_term_ENoField = function(field_name) {
	stx_nano_Digest.call(this,"01FRQ55MMVX2D7JEHJ6CE4X1NY","No field \"" + field_name + "\".");
};
$hxClasses["stx.nano.digest.term.ENoField"] = stx_nano_digest_term_ENoField;
stx_nano_digest_term_ENoField.__name__ = "stx.nano.digest.term.ENoField";
stx_nano_digest_term_ENoField.__super__ = stx_nano_Digest;
stx_nano_digest_term_ENoField.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_ENoField
});
var stx_nano_digest_term_EResourceNotFound = function(resource_name) {
	stx_nano_Digest.call(this,"01FRQ55MMVX2D7JEHJ6CE4X1NY","Resource \"" + resource_name + "\" not found.");
};
$hxClasses["stx.nano.digest.term.EResourceNotFound"] = stx_nano_digest_term_EResourceNotFound;
stx_nano_digest_term_EResourceNotFound.__name__ = "stx.nano.digest.term.EResourceNotFound";
stx_nano_digest_term_EResourceNotFound.__super__ = stx_nano_Digest;
stx_nano_digest_term_EResourceNotFound.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_EResourceNotFound
});
var stx_nano_digest_term_ETinkError = function(msg,code) {
	stx_nano_Digest.call(this,"01FRQ5TP22YD13E22X767DTHJC",msg,code);
};
$hxClasses["stx.nano.digest.term.ETinkError"] = stx_nano_digest_term_ETinkError;
stx_nano_digest_term_ETinkError.__name__ = "stx.nano.digest.term.ETinkError";
stx_nano_digest_term_ETinkError.__super__ = stx_nano_Digest;
stx_nano_digest_term_ETinkError.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_ETinkError
});
var stx_nano_digest_term_EUndefined = function() {
	stx_nano_Digest.call(this,"01FRQ56BJH83N0QXF6ZFJ9Y4MN","Encountered Undefined.");
};
$hxClasses["stx.nano.digest.term.EUndefined"] = stx_nano_digest_term_EUndefined;
stx_nano_digest_term_EUndefined.__name__ = "stx.nano.digest.term.EUndefined";
stx_nano_digest_term_EUndefined.__super__ = stx_nano_Digest;
stx_nano_digest_term_EUndefined.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_EUndefined
});
var stx_nano_digest_term_EUnimplemented = function() {
	stx_nano_Digest.call(this,"01FRQ86121X4G17EEQ7DDNVEHH","Unimplemented");
};
$hxClasses["stx.nano.digest.term.EUnimplemented"] = stx_nano_digest_term_EUnimplemented;
stx_nano_digest_term_EUnimplemented.__name__ = "stx.nano.digest.term.EUnimplemented";
stx_nano_digest_term_EUnimplemented.__super__ = stx_nano_Digest;
stx_nano_digest_term_EUnimplemented.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_digest_term_EUnimplemented
});
var stx_nano_lift_LiftArrayNano = function() { };
$hxClasses["stx.nano.lift.LiftArrayNano"] = stx_nano_lift_LiftArrayNano;
stx_nano_lift_LiftArrayNano.__name__ = "stx.nano.lift.LiftArrayNano";
stx_nano_lift_LiftArrayNano.cross = function(self,that) {
	return stx_lift_ArrayLift.cross_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
stx_nano_lift_LiftArrayNano.zip = function(self,that) {
	return stx_lift_ArrayLift.zip_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
var stx_nano_lift_LiftArrayToIter = function() { };
$hxClasses["stx.nano.lift.LiftArrayToIter"] = stx_nano_lift_LiftArrayToIter;
stx_nano_lift_LiftArrayToIter.__name__ = "stx.nano.lift.LiftArrayToIter";
stx_nano_lift_LiftArrayToIter.toIter = function(arr) {
	return arr;
};
var stx_nano_lift_LiftBytes = function() { };
$hxClasses["stx.nano.lift.LiftBytes"] = stx_nano_lift_LiftBytes;
stx_nano_lift_LiftBytes.__name__ = "stx.nano.lift.LiftBytes";
stx_nano_lift_LiftBytes.get = function(self,pos,quantity) {
	switch(quantity) {
	case "dbe":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var d = self.b[pos + 3];
		var e = self.b[pos + 4];
		var f = self.b[pos + 5];
		var g = self.b[pos + 6];
		var h = self.b[pos + 7];
		var r = new haxe_io_Bytes(new ArrayBuffer(8));
		r.b[0] = h;
		r.b[1] = g;
		r.b[2] = f;
		r.b[3] = e;
		r.b[0] = d;
		r.b[1] = c;
		r.b[2] = b;
		r.b[3] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(r.getDouble(0)));
	case "dle":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(self.getDouble(0)));
	case "fbe":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var d = self.b[pos + 3];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = d;
		r.b[1] = c;
		r.b[2] = b;
		r.b[3] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(r.getFloat(0)));
	case "fle":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(self.getFloat(0)));
	case "i16+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = b;
		r.b[1] = a;
		r.b[2] = 0;
		r.b[3] = 0;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i16-":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = 0;
		r.b[1] = 0;
		r.b[2] = a;
		r.b[3] = b;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i24+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = c;
		r.b[1] = b;
		r.b[2] = a;
		r.b[3] = 0;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i24-":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = 0;
		r.b[1] = a;
		r.b[2] = b;
		r.b[3] = c;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i32+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var d = self.b[pos + 3];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = d;
		r.b[1] = c;
		r.b[2] = b;
		r.b[3] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i32-":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(self.getInt32(0)));
	case "i8":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(self.b[pos]));
	case "ln":
		return stx_nano_SprigSum.Textal(self.toString());
	case "ui16+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = b;
		r.b[1] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getUInt16(0)));
	case "ui16-":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(self.getUInt16(0)));
	case "ui24+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = c;
		r.b[1] = b;
		r.b[2] = a;
		r.b[3] = 0;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "ui24-":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = 0;
		r.b[1] = a;
		r.b[2] = b;
		r.b[3] = c;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	}
};
var stx_nano_lift_LiftContractToJsPromise = function() { };
$hxClasses["stx.nano.lift.LiftContractToJsPromise"] = stx_nano_lift_LiftContractToJsPromise;
stx_nano_lift_LiftContractToJsPromise.__name__ = "stx.nano.lift.LiftContractToJsPromise";
stx_nano_lift_LiftContractToJsPromise.toJsPromise = function(self) {
	return stx_nano_Contract._.toJsPromise(self);
};
var stx_nano_lift_LiftErrToChunk = function() { };
$hxClasses["stx.nano.lift.LiftErrToChunk"] = stx_nano_lift_LiftErrToChunk;
stx_nano_lift_LiftErrToChunk.__name__ = "stx.nano.lift.LiftErrToChunk";
stx_nano_lift_LiftErrToChunk.toChunk = function(err) {
	return stx_nano_Chunk.fromError(err);
};
var stx_nano_lift_LiftError = function() { };
$hxClasses["stx.nano.lift.LiftError"] = stx_nano_lift_LiftError;
stx_nano_lift_LiftError.__name__ = "stx.nano.lift.LiftError";
stx_nano_lift_LiftError.fault = function(self) {
	var self1 = self.get_pos();
	var tmp;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp = v;
	} else {
		tmp = null;
	}
	return stx_nano_Fault.lift(tmp);
};
stx_nano_lift_LiftError.report = function(error) {
	return stx_nano_ReportSum.Reported(error);
};
stx_nano_lift_LiftError.toTinkError = function(self,code) {
	if(code == null) {
		code = 500;
	}
	var tmp = stx_nano_Iter.lift(self);
	var self1 = self.get_pos();
	var tmp1;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp1 = v;
	} else {
		tmp1 = null;
	}
	return tink_core_TypedError.withData(code,"TINK_ERROR",tmp,tmp1);
};
var stx_nano_lift_LiftErrorDigestToRejection = function() { };
$hxClasses["stx.nano.lift.LiftErrorDigestToRejection"] = stx_nano_lift_LiftErrorDigestToRejection;
stx_nano_lift_LiftErrorDigestToRejection.__name__ = "stx.nano.lift.LiftErrorDigestToRejection";
stx_nano_lift_LiftErrorDigestToRejection.toRejection = function(self) {
	return self.errate(stx_nano_DeclinationSum.DIGEST);
};
var stx_nano_lift_LiftErrorStringToRejection = function() { };
$hxClasses["stx.nano.lift.LiftErrorStringToRejection"] = stx_nano_lift_LiftErrorStringToRejection;
stx_nano_lift_LiftErrorStringToRejection.__name__ = "stx.nano.lift.LiftErrorStringToRejection";
stx_nano_lift_LiftErrorStringToRejection.toRejection = function(self) {
	var this1 = self.errate(function(x) {
		return stx_nano_DeclinationSum.DIGEST(new stx_nano_lift_ESubsumed(x));
	});
	return this1;
};
var stx_nano_lift_ESubsumed = function(string) {
	stx_nano_Digest.call(this,"01FT8HA5MKCMG7X3VW2DQ1YAN2",string);
};
$hxClasses["stx.nano.lift.ESubsumed"] = stx_nano_lift_ESubsumed;
stx_nano_lift_ESubsumed.__name__ = "stx.nano.lift.ESubsumed";
stx_nano_lift_ESubsumed.__super__ = stx_nano_Digest;
stx_nano_lift_ESubsumed.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_nano_lift_ESubsumed
});
var stx_nano_lift_LiftErrorToAlert = function() { };
$hxClasses["stx.nano.lift.LiftErrorToAlert"] = stx_nano_lift_LiftErrorToAlert;
stx_nano_lift_LiftErrorToAlert.__name__ = "stx.nano.lift.LiftErrorToAlert";
stx_nano_lift_LiftErrorToAlert.alert = function(self) {
	return stx_nano_Report.alert(stx_nano_lift_LiftError.report(self.errate(function(except) {
		return stx_nano_lift_LiftNano.decline(stx_nano_Wildcard.__,except);
	})));
};
var stx_nano_lift_LiftErrorToRejection = function() { };
$hxClasses["stx.nano.lift.LiftErrorToRejection"] = stx_nano_lift_LiftErrorToRejection;
stx_nano_lift_LiftErrorToRejection.__name__ = "stx.nano.lift.LiftErrorToRejection";
stx_nano_lift_LiftErrorToRejection.except = function(self) {
	var this1 = self.errate(stx_nano_DeclinationSum.REJECT);
	return this1;
};
var stx_nano_lift_LiftErrorToReport = function() { };
$hxClasses["stx.nano.lift.LiftErrorToReport"] = stx_nano_lift_LiftErrorToReport;
stx_nano_lift_LiftErrorToReport.__name__ = "stx.nano.lift.LiftErrorToReport";
var stx_nano_lift_LiftFuture = function() { };
$hxClasses["stx.nano.lift.LiftFuture"] = stx_nano_lift_LiftFuture;
stx_nano_lift_LiftFuture.__name__ = "stx.nano.lift.LiftFuture";
stx_nano_lift_LiftFuture.fudge = function(self) {
	var val = null;
	self.handle(function(x) {
		val = x;
	});
	return val;
};
var stx_nano_lift_LiftFutureResToPledge = function() { };
$hxClasses["stx.nano.lift.LiftFutureResToPledge"] = stx_nano_lift_LiftFutureResToPledge;
stx_nano_lift_LiftFutureResToPledge.__name__ = "stx.nano.lift.LiftFutureResToPledge";
stx_nano_lift_LiftFutureResToPledge.toPledge = function(self) {
	return stx_nano_Pledge.lift(self);
};
var stx_nano_lift_LiftIMapToArrayKV = function() { };
$hxClasses["stx.nano.lift.LiftIMapToArrayKV"] = stx_nano_lift_LiftIMapToArrayKV;
stx_nano_lift_LiftIMapToArrayKV.__name__ = "stx.nano.lift.LiftIMapToArrayKV";
stx_nano_lift_LiftIMapToArrayKV.toArrayKV = function(map) {
	var out = [];
	var _g = map.keyValueIterator();
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		out.push(stx_nano_KV.fromTup(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,key,val)));
	}
	return out;
};
var stx_nano_lift_LiftIterableToIter = function() { };
$hxClasses["stx.nano.lift.LiftIterableToIter"] = stx_nano_lift_LiftIterableToIter;
stx_nano_lift_LiftIterableToIter.__name__ = "stx.nano.lift.LiftIterableToIter";
stx_nano_lift_LiftIterableToIter.toIter = function(it) {
	return it;
};
var stx_nano_lift_LiftIteratorToIter = function() { };
$hxClasses["stx.nano.lift.LiftIteratorToIter"] = stx_nano_lift_LiftIteratorToIter;
stx_nano_lift_LiftIteratorToIter.__name__ = "stx.nano.lift.LiftIteratorToIter";
stx_nano_lift_LiftIteratorToIter.toIter = function(it) {
	return { iterator : function() {
		return it;
	}};
};
var stx_nano_lift_LiftJsPromiseToContract = function() { };
$hxClasses["stx.nano.lift.LiftJsPromiseToContract"] = stx_nano_lift_LiftJsPromiseToContract;
stx_nano_lift_LiftJsPromiseToContract.__name__ = "stx.nano.lift.LiftJsPromiseToContract";
stx_nano_lift_LiftJsPromiseToContract.toContract = function(self,pos) {
	return stx_nano_Contract.fromJsPromise(self,pos);
};
var stx_nano_lift_LiftJsPromiseToPledge = function() { };
$hxClasses["stx.nano.lift.LiftJsPromiseToPledge"] = stx_nano_lift_LiftJsPromiseToPledge;
stx_nano_lift_LiftJsPromiseToPledge.__name__ = "stx.nano.lift.LiftJsPromiseToPledge";
stx_nano_lift_LiftJsPromiseToPledge.toPledge = function(self,pos) {
	return stx_nano_Pledge.fromJsPromise(self,pos);
};
var stx_nano_lift_LiftMapToIter = function() { };
$hxClasses["stx.nano.lift.LiftMapToIter"] = stx_nano_lift_LiftMapToIter;
stx_nano_lift_LiftMapToIter.__name__ = "stx.nano.lift.LiftMapToIter";
stx_nano_lift_LiftMapToIter.toIter = function(map) {
	return { iterator : function() {
		var source = map.keyValueIterator();
		return { next : function() {
			var out = source.next();
			return { key : out.key, val : out.value};
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_nano_lift_StringToIdentifier = function() { };
$hxClasses["stx.nano.lift.StringToIdentifier"] = stx_nano_lift_StringToIdentifier;
stx_nano_lift_StringToIdentifier.__name__ = "stx.nano.lift.StringToIdentifier";
stx_nano_lift_StringToIdentifier.identifier = function(wildcard,str) {
	return stx_pico_Identifier._new(str);
};
var stx_nano_lift_LiftIdentifierToIdent = function() { };
$hxClasses["stx.nano.lift.LiftIdentifierToIdent"] = stx_nano_lift_LiftIdentifierToIdent;
stx_nano_lift_LiftIdentifierToIdent.__name__ = "stx.nano.lift.LiftIdentifierToIdent";
var stx_nano_lift_LiftOptionNano = function() { };
$hxClasses["stx.nano.lift.LiftOptionNano"] = stx_nano_lift_LiftOptionNano;
stx_nano_lift_LiftOptionNano.__name__ = "stx.nano.lift.LiftOptionNano";
stx_nano_lift_LiftOptionNano.zip = function(self,that) {
	if(self._hx_index == 0) {
		if(that._hx_index == 0) {
			var r = that.v;
			var l = self.v;
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_lift_LiftOptionNano.fudge = function(self,err) {
	var this1 = err.errate(stx_nano_DeclinationSum.REJECT);
	var self1 = stx_pico_Option.make(this1);
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/lift/LiftOptionNano.hx", lineNumber : 11, className : "stx.nano.lift.LiftOptionNano", methodName : "fudge"});
	var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_undefined(stx_Nano.digests(stx_nano_Wildcard.__))));
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
	var exception;
	if(self1._hx_index == 0) {
		var v = self1.v;
		exception = v;
	} else {
		exception = this2;
	}
	if(self == null) {
		throw haxe_Exception.thrown(exception);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown(exception);
		}
	}
};
stx_nano_lift_LiftOptionNano.resolve = function(self,fn,pos) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fn(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos)));
		break;
	}
	return tmp;
};
var stx_nano_lift_LiftOptionToChunk = function() { };
$hxClasses["stx.nano.lift.LiftOptionToChunk"] = stx_nano_lift_LiftOptionToChunk;
stx_nano_lift_LiftOptionToChunk.__name__ = "stx.nano.lift.LiftOptionToChunk";
stx_nano_lift_LiftOptionToChunk.toChunk = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_nano_ChunkSum.Val(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	}
};
var stx_nano_lift_LiftOutcomeTDefect = function() { };
$hxClasses["stx.nano.lift.LiftOutcomeTDefect"] = stx_nano_lift_LiftOutcomeTDefect;
stx_nano_lift_LiftOutcomeTDefect.__name__ = "stx.nano.lift.LiftOutcomeTDefect";
stx_nano_lift_LiftOutcomeTDefect.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var r = that.t;
			var l = _g;
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
		case 1:
			var r = that.e;
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,r);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var r = that.e;
			var l = _g;
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_DefectLift.concat(l,r));
		} else {
			var l = _g;
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,l);
		}
		break;
	}
};
var stx_nano_lift_LiftPath = function() { };
$hxClasses["stx.nano.lift.LiftPath"] = stx_nano_lift_LiftPath;
stx_nano_lift_LiftPath.__name__ = "stx.nano.lift.LiftPath";
stx_nano_lift_LiftPath.into = function(path,v) {
	var base = haxe_io_Path.addTrailingSlash(path.toString());
	var rest = stx_nano_OneOrMany.toArray(v).join(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
	var next = "" + base + rest;
	return new haxe_io_Path(next);
};
stx_nano_lift_LiftPath.toArray = function(path) {
	var base = path.toString();
	if(StringTools.startsWith(base,stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__))) {
		base = HxOverrides.substr(base,1,null);
	}
	var next = base.split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
	return next;
};
var stx_nano_lift_LiftRejectionToUpshot = function() { };
$hxClasses["stx.nano.lift.LiftRejectionToRes"] = stx_nano_lift_LiftRejectionToRes;
stx_nano_lift_LiftRejectionToRes.__name__ = "stx.nano.lift.LiftRejectionToRes";
stx_nano_lift_LiftRejectionToRes.toUpshot = function(self) {
	return stx_nano_ResSum.Reject(self);
};
stx_nano_lift_LiftRejectionToRes.reject = function(self) {
	return stx_nano_ResSum.Reject(self);
};
var stx_nano_lift_LiftResToChunk = function() { };
$hxClasses["stx.nano.lift.LiftResToChunk"] = stx_nano_lift_LiftResToChunk;
stx_nano_lift_LiftResToChunk.__name__ = "stx.nano.lift.LiftResToChunk";
stx_nano_lift_LiftResToChunk.toChunk = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return tmp;
};
var stx_nano_lift_LiftStringMapToIter = function() { };
$hxClasses["stx.nano.lift.LiftStringMapToIter"] = stx_nano_lift_LiftStringMapToIter;
stx_nano_lift_LiftStringMapToIter.__name__ = "stx.nano.lift.LiftStringMapToIter";
stx_nano_lift_LiftStringMapToIter.toIter = function(map) {
	return stx_nano_IterLift.map(stx_nano_lift_LiftMapToIter.toIter(map),function(x) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_KVLift.fst(x),stx_nano_KVLift.snd(x));
	});
};
var stx_nano_lift_LiftStringToResource = function() { };
$hxClasses["stx.nano.lift.LiftStringToResource"] = stx_nano_lift_LiftStringToResource;
stx_nano_lift_LiftStringToResource.__name__ = "stx.nano.lift.LiftStringToResource";
stx_nano_lift_LiftStringToResource.resource = function(stx,str,pos) {
	var str1 = str;
	if(!stx_nano_Resource.exists(str1)) {
		if(pos == null) {
			throw haxe_Exception.thrown("E_ResourceNotFound(" + str1 + ")");
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_resource_not_found(stx_Nano.digests(stx_nano_Wildcard.__),str1)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			var error = this2;
			var this1 = stx_Log.ZERO;
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(3);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("resource \"" + str1 + "\" not found.")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/nano/Resource.hx", lineNumber : 23, className : "stx.nano._Resource.Resource_Impl_", methodName : "_new"}));
			throw haxe_Exception.thrown(error);
		}
	}
	var this2 = str1;
	return this2;
};
var stx_nano_lift_LiftTinkErrorToRejection = function() { };
$hxClasses["stx.nano.lift.LiftTinkErrorToRejection"] = stx_nano_lift_LiftTinkErrorToRejection;
stx_nano_lift_LiftTinkErrorToRejection.__name__ = "stx.nano.lift.LiftTinkErrorToRejection";
stx_nano_lift_LiftTinkErrorToRejection.toRejection = function(self) {
	var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_tink_error(stx_Nano.digests(stx_nano_Wildcard.__),self.message,self.code)));
	var pos = self.pos;
	var data1 = data;
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this1 = new stx_pico_ErrorBase(data1,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
	return this1;
};
stx_nano_lift_LiftTinkErrorToRejection.except = function(self) {
	var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_nano_Digest.e_tink_error(stx_Nano.digests(stx_nano_Wildcard.__),self.message,self.code)));
	var pos = self.pos;
	var data1 = data;
	var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
		return stx_nano_Rejection.prj(x);
	});
	if(data1 == null) {
		data1 = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	var this1 = new stx_pico_ErrorBase(data1,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
	return this1;
};
var stx_nano_lift_LiftTinkOutcomeToChunk = function() { };
$hxClasses["stx.nano.lift.LiftTinkOutcomeToChunk"] = stx_nano_lift_LiftTinkOutcomeToChunk;
stx_nano_lift_LiftTinkOutcomeToChunk.__name__ = "stx.nano.lift.LiftTinkOutcomeToChunk";
stx_nano_lift_LiftTinkOutcomeToChunk.core = function(oc) {
	return stx_nano_Chunk.fromTinkOutcome(oc);
};
var stx_pico_ApplyLift = function() { };
$hxClasses["stx.pico.ApplyLift"] = stx_pico_ApplyLift;
stx_pico_ApplyLift.__name__ = "stx.pico.ApplyLift";
stx_pico_ApplyLift.lift = function(self) {
	return stx_pico_Apply._new(self);
};
stx_pico_ApplyLift.map = function(self,fn) {
	return stx_pico_Apply.Map(self,fn);
};
var stx_pico_Apply = {};
stx_pico_Apply.__properties__ = {get_self:"get_self"};
stx_pico_Apply._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Apply.lift = function(self) {
	return stx_pico_Apply._new(self);
};
stx_pico_Apply.Anon = function(self) {
	return stx_pico_Apply._new(new stx_pico_apply_term_Anon(self));
};
stx_pico_Apply.prj = function(this1) {
	return this1;
};
stx_pico_Apply.get_self = function(this1) {
	return stx_pico_Apply._new(this1);
};
stx_pico_Apply.Map = function(self,fn) {
	return stx_pico_Apply._new(new stx_pico_apply_term_AnonMap(self,fn));
};
var stx_pico_EitherLift = function() { };
$hxClasses["stx.pico.EitherLift"] = stx_pico_EitherLift;
stx_pico_EitherLift.__name__ = "stx.pico.EitherLift";
stx_pico_EitherLift.fold = function(self,lhs,rhs) {
	switch(self._hx_index) {
	case 0:
		var l = self.v;
		return lhs(l);
	case 1:
		var r = self.v;
		return rhs(r);
	}
};
stx_pico_EitherLift.map = function(self,fn) {
	return stx_pico_EitherLift.flat_map(self,function(x) {
		return haxe_ds_Either.Right(fn(x));
	});
};
stx_pico_EitherLift.flat_map = function(self,fn) {
	return stx_pico_EitherLift.fold(self,haxe_ds_Either.Left,function(r) {
		return fn(r);
	});
};
stx_pico_EitherLift.flip = function(self) {
	return stx_pico_EitherLift.fold(self,function(l) {
		return haxe_ds_Either.Right(l);
	},function(r) {
		return haxe_ds_Either.Left(r);
	});
};
stx_pico_EitherLift.get_data = function(self) {
	return stx_pico_EitherLift.fold(self,function(x) {
		return x;
	},function(x) {
		return x;
	});
};
stx_pico_EitherLift.is_left = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	});
};
stx_pico_EitherLift.is_right = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return false;
	},function(_) {
		return true;
	});
};
var stx_pico_Either = {};
stx_pico_Either._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Either.lift = function(self) {
	return stx_pico_Either._new(self);
};
stx_pico_Either.left = function(tI) {
	return haxe_ds_Either.Left(tI);
};
stx_pico_Either.right = function(tII) {
	return haxe_ds_Either.Right(tII);
};
stx_pico_Either.prj = function(this1) {
	return this1;
};
var stx_pico_ErrorApi = function() { };
$hxClasses["stx.pico.ErrorApi"] = stx_pico_ErrorApi;
stx_pico_ErrorApi.__name__ = "stx.pico.ErrorApi";
stx_pico_ErrorApi.__isInterface__ = true;
stx_pico_ErrorApi.__interfaces__ = [stx_ExceptionApi];
stx_pico_ErrorApi.prototype = {
	pos: null
	,get_pos: null
	,val: null
	,get_val: null
	,lst: null
	,get_lst: null
	,exception: null
	,get_exception: null
	,toError: null
	,concat: null
	,copy: null
	,toString: null
	,toIterable: null
	,raise: null
	,__class__: stx_pico_ErrorApi
	,__properties__: {get_exception:"get_exception",get_lst:"get_lst",get_val:"get_val",get_pos:"get_pos"}
};
var stx_pico_Error = function(exception) {
	this.exception = exception;
};
$hxClasses["stx.pico.Error"] = stx_pico_Error;
stx_pico_Error.__name__ = "stx.pico.Error";
stx_pico_Error.__interfaces__ = [stx_pico_ErrorApi];
stx_pico_Error.make = function(data,lst,pos) {
	if(data == null) {
		data = haxe_ds_Option.None;
	}
	if(lst == null) {
		lst = haxe_ds_Option.None;
	}
	return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
};
stx_pico_Error.iterable = function(self) {
	return { iterator : function() {
		return { hasNext : function() {
			return self != null;
		}, next : function() {
			var val = self;
			var self1 = self.get_lst();
			if(self1._hx_index == 0) {
				var v = self1.v;
				self = v;
			} else {
				self = null;
			}
			return val;
		}};
	}};
};
stx_pico_Error.prototype = {
	exception: null
	,details: null
	,get_exception: function() {
		if(this.exception == null) {
			return this.exception = new haxe_Exception("STX_ERROR");
		} else {
			return this.exception;
		}
	}
	,pos: null
	,get_pos: null
	,val: null
	,get_val: null
	,lst: null
	,get_lst: null
	,concat: null
	,copy: null
	,iterator: function() {
		var self = this;
		return { hasNext : function() {
			return self != null;
		}, next : function() {
			var self1 = self.get_val();
			var val;
			if(self1._hx_index == 0) {
				var v = self1.v;
				val = v;
			} else {
				val = null;
			}
			var self1 = self.get_lst();
			if(self1._hx_index == 0) {
				var v = self1.v;
				self = v;
			} else {
				self = null;
			}
			return val;
		}};
	}
	,errate: function(fn) {
		var data = stx_pico_OptionLift.map(this.get_val(),fn);
		var lst = stx_pico_OptionLift.map(this.get_lst(),function(x) {
			return x.errate(fn);
		});
		var self = this.get_pos();
		var pos;
		if(self._hx_index == 0) {
			var v = self.v;
			pos = v;
		} else {
			pos = null;
		}
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError().toError();
	}
	,toIterable: function() {
		return { iterator : $bind(this,this.iterator)};
	}
	,toError: function() {
		return this;
	}
	,toString: function() {
		var tmp = this.get_val();
		var tmp1 = tmp == null ? "null" : stx_pico_Option.toString(tmp);
		var tmp = this.get_pos();
		var tmp2 = tmp == null ? "null" : stx_pico_Option.toString(tmp);
		var tmp = this.get_exception().get_stack();
		return "Error(" + tmp1 + ") at " + tmp2 + "\n" + (tmp == null ? "null" : haxe_CallStack.toString(tmp));
	}
	,get_stack: function() {
		return this.get_exception().get_stack();
	}
	,get_message: function() {
		return this.get_exception().get_message();
	}
	,get_native: function() {
		return this.get_exception().get_native();
	}
	,raise: function() {
		throw haxe_Exception.thrown(this.get_exception());
	}
	,__class__: stx_pico_Error
	,__properties__: {get_lst:"get_lst",get_val:"get_val",get_pos:"get_pos",get_message:"get_message",get_native:"get_native",get_stack:"get_stack",get_exception:"get_exception"}
};
var stx_pico_ErrorBase = function(val,lst,pos) {
	stx_pico_Error.call(this);
	this.val = val;
	this.lst = lst;
	this.pos = pos;
};
$hxClasses["stx.pico.ErrorBase"] = stx_pico_ErrorBase;
stx_pico_ErrorBase.__name__ = "stx.pico.ErrorBase";
stx_pico_ErrorBase.rebuild = function(arr) {
	var head = stx_lift_ArrayLift.head(arr);
	var tail = stx_lift_ArrayLift.tail(arr);
	var _g = tail.length > 0;
	switch(head._hx_index) {
	case 0:
		var _g1 = head.v;
		if(_g) {
			var h = _g1;
			var data = h.get_val();
			var lst = stx_pico_Option.fromNullT(stx_pico_ErrorBase.rebuild(tail));
			var self = h.get_pos();
			var pos;
			if(self._hx_index == 0) {
				var v = self.v;
				pos = v;
			} else {
				pos = null;
			}
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
		} else {
			var h = _g1;
			var data = h.get_val();
			var lst = haxe_ds_Option.None;
			var self = h.get_pos();
			var pos;
			if(self._hx_index == 0) {
				var v = self.v;
				pos = v;
			} else {
				pos = null;
			}
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
		}
		break;
	case 1:
		var data = haxe_ds_Option.None;
		var lst = haxe_ds_Option.None;
		var pos = null;
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		return new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
	}
};
stx_pico_ErrorBase.__super__ = stx_pico_Error;
stx_pico_ErrorBase.prototype = $extend(stx_pico_Error.prototype,{
	get_pos: function() {
		return this.pos;
	}
	,get_lst: function() {
		return this.lst;
	}
	,get_val: function() {
		return this.val;
	}
	,copy: function() {
		var nxt = Lambda.array(stx_pico_Error.iterable(this));
		nxt.reverse();
		return stx_pico_ErrorBase.rebuild(nxt);
	}
	,concat: function(that) {
		var lhs = stx_pico_Error.iterable(this);
		var rhs = stx_pico_Error.iterable(this);
		var nxt = Lambda.array(stx_lift_IterableLift.concat(lhs,rhs));
		nxt.reverse();
		return stx_pico_ErrorBase.rebuild(nxt);
	}
	,details: function() {
		return this.get_exception().details();
	}
	,toTinkError: function(code) {
		if(code == null) {
			code = 500;
		}
		var tmp = this.get_val();
		var self = this.get_pos();
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = null;
		}
		return tink_core_TypedError.withData(code,"TINK_ERROR",tmp,tmp1);
	}
	,__class__: stx_pico_ErrorBase
});
var stx_pico_ErrorException = function(exception,lst,pos) {
	stx_pico_Error.call(this,exception);
	this.lst = lst;
	this.pos = pos;
};
$hxClasses["stx.pico.ErrorException"] = stx_pico_ErrorException;
stx_pico_ErrorException.__name__ = "stx.pico.ErrorException";
stx_pico_ErrorException.make = function(exception,lst,pos) {
	return new stx_pico_ErrorException(exception,lst,pos);
};
stx_pico_ErrorException.__super__ = stx_pico_Error;
stx_pico_ErrorException.prototype = $extend(stx_pico_Error.prototype,{
	get_pos: function() {
		return this.pos;
	}
	,get_val: function() {
		return stx_pico_Option.fromNullT(this.get_exception().details());
	}
	,get_lst: function() {
		return this.lst;
	}
	,concat: function(e) {
		var self = this.get_lst();
		var stack;
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			stack = haxe_ds_Option.Some(t.concat(e));
			break;
		case 1:
			stack = haxe_ds_Option.Some(e);
			break;
		}
		return new stx_pico_ErrorException(this.get_exception(),stack,this.get_pos());
	}
	,copy: function() {
		return stx_pico_ErrorException.make(this.get_exception(),this.get_lst(),this.get_pos());
	}
	,details: function() {
		return this.get_exception().details();
	}
	,__class__: stx_pico_ErrorException
});
var stx_pico_IFaze = function() { };
$hxClasses["stx.pico.IFaze"] = stx_pico_IFaze;
stx_pico_IFaze.__name__ = "stx.pico.IFaze";
stx_pico_IFaze.__isInterface__ = true;
stx_pico_IFaze.prototype = {
	definition: null
	,identifier: null
	,__class__: stx_pico_IFaze
};
var stx_pico_Identifier = {};
stx_pico_Identifier.__properties__ = {get_pack:"get_pack",get_name:"get_name"};
stx_pico_Identifier.fromPath = function(path) {
	var dir = haxe_io_Path.directory(path.toString());
	var ext = path.ext;
	var file = path.file;
	var name = ext == null ? file : "" + file + "." + ext;
	var sep = path.backslash ? "\\" : "/";
	var data = dir.split(sep);
	data.push(name);
	return stx_pico_Identifier.lift(data.join("."));
};
stx_pico_Identifier.lift = function(data) {
	return stx_pico_Identifier._new(data);
};
stx_pico_Identifier._new = function(data) {
	var this1 = data;
	return this1;
};
stx_pico_Identifier.get_name = function(this1) {
	var self = stx_lift_ArrayLift.last(this1.split("."));
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return "?";
	}
};
stx_pico_Identifier.get_pack = function(this1) {
	return stx_lift_ArrayLift.rdropn(this1.split("."),1);
};
stx_pico_Identifier.toString = function(this1) {
	return this1;
};
stx_pico_Identifier.toArray = function(this1) {
	var p = stx_pico_Identifier.get_pack(this1).slice();
	p.push(stx_pico_Identifier.get_name(this1));
	return p;
};
var stx_pico_Option = $hx_exports["stx"]["pico"]["Option"] = {};
stx_pico_Option._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Option.fromNullT = function(v) {
	return stx_pico_Option.make(v);
};
stx_pico_Option.unit = function() {
	return stx_pico_Option._new(haxe_ds_Option.None);
};
stx_pico_Option.pure = function(t) {
	return stx_pico_Option._new(haxe_ds_Option.Some(t));
};
stx_pico_Option.make = function(t) {
	if(t == null) {
		return stx_pico_Option.unit();
	} else {
		return stx_pico_Option.pure(t);
	}
};
stx_pico_Option.flatten = function(self) {
	var _g = stx_pico_OptionLift.prj(self);
	switch(_g._hx_index) {
	case 0:
		var next = _g.v;
		return next;
	case 1:
		return haxe_ds_Option.None;
	}
};
stx_pico_Option.toString = function(this1) {
	return stx_pico_Option.__.toString(this1);
};
var stx_pico_OutcomeSum = $hxEnums["stx.pico.OutcomeSum"] = { __ename__:"stx.pico.OutcomeSum",__constructs__:null
	,Success: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["t"],$_)
	,Failure: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["e"],$_)
};
stx_pico_OutcomeSum.__constructs__ = [stx_pico_OutcomeSum.Success,stx_pico_OutcomeSum.Failure];
var stx_pico_OutcomeLift = function() { };
$hxClasses["stx.pico.OutcomeLift"] = stx_pico_OutcomeLift;
stx_pico_OutcomeLift.__name__ = "stx.pico.OutcomeLift";
stx_pico_OutcomeLift.map = function(self,fn) {
	return stx_pico_OutcomeLift.flat_map(self,function(x) {
		return stx_pico_OutcomeSum.Success(fn(x));
	});
};
stx_pico_OutcomeLift.flat_map = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = fn(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_OutcomeSum.Failure(e);
		break;
	}
	return stx_pico_Outcome.lift(tmp);
};
stx_pico_OutcomeLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_pico_OutcomeLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
stx_pico_OutcomeLift.elide = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_OutcomeSum.Failure(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_OutcomeSum.Success(e);
		break;
	}
	return tmp;
};
stx_pico_OutcomeLift.value = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_Option.pure(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_Option.unit();
		break;
	}
	return tmp;
};
stx_pico_OutcomeLift.error = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_Option.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_Option.pure(e);
		break;
	}
	return tmp;
};
var stx_pico_Outcome = {};
stx_pico_Outcome.__properties__ = {get_self:"get_self"};
stx_pico_Outcome._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Outcome.lift = function(self) {
	return stx_pico_Outcome._new(self);
};
stx_pico_Outcome.success = function(t) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Success(t));
};
stx_pico_Outcome.failure = function(e) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Failure(e));
};
stx_pico_Outcome.prj = function(this1) {
	return this1;
};
stx_pico_Outcome.get_self = function(this1) {
	return stx_pico_Outcome.lift(this1);
};
var stx_pico_ReactApi = function() { };
$hxClasses["stx.pico.ReactApi"] = stx_pico_ReactApi;
stx_pico_ReactApi.__name__ = "stx.pico.ReactApi";
stx_pico_ReactApi.__isInterface__ = true;
stx_pico_ReactApi.prototype = {
	react: null
	,__class__: stx_pico_ReactApi
};
var stx_pico_ReactCls = function() { };
$hxClasses["stx.pico.ReactCls"] = stx_pico_ReactCls;
stx_pico_ReactCls.__name__ = "stx.pico.ReactCls";
stx_pico_ReactCls.__interfaces__ = [stx_pico_ReactApi];
stx_pico_ReactCls.prototype = {
	react: null
	,__class__: stx_pico_ReactCls
};
var stx_pico_React = {};
stx_pico_React.__properties__ = {get_self:"get_self"};
stx_pico_React._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_React.lift = function(self) {
	return stx_pico_React._new(self);
};
stx_pico_React.prj = function(this1) {
	return this1;
};
stx_pico_React.get_self = function(this1) {
	return stx_pico_React.lift(this1);
};
var stx_pico_apply_term_Anon = function(_apply) {
	this._apply = _apply;
};
$hxClasses["stx.pico.apply.term.Anon"] = stx_pico_apply_term_Anon;
stx_pico_apply_term_Anon.__name__ = "stx.pico.apply.term.Anon";
stx_pico_apply_term_Anon.__super__ = stx_pico_ApplyCls;
stx_pico_apply_term_Anon.prototype = $extend(stx_pico_ApplyCls.prototype,{
	_apply: null
	,apply: function(p) {
		return this._apply(p);
	}
	,__class__: stx_pico_apply_term_Anon
});
var stx_pico_apply_term_Delegate = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.pico.apply.term.Delegate"] = stx_pico_apply_term_Delegate;
stx_pico_apply_term_Delegate.__name__ = "stx.pico.apply.term.Delegate";
stx_pico_apply_term_Delegate.__super__ = stx_pico_ApplyCls;
stx_pico_apply_term_Delegate.prototype = $extend(stx_pico_ApplyCls.prototype,{
	delegate: null
	,__class__: stx_pico_apply_term_Delegate
});
var stx_pico_apply_term_Map = function(delegate) {
	stx_pico_apply_term_Delegate.call(this,delegate);
};
$hxClasses["stx.pico.apply.term.Map"] = stx_pico_apply_term_Map;
stx_pico_apply_term_Map.__name__ = "stx.pico.apply.term.Map";
stx_pico_apply_term_Map.__super__ = stx_pico_apply_term_Delegate;
stx_pico_apply_term_Map.prototype = $extend(stx_pico_apply_term_Delegate.prototype,{
	map: null
	,apply: function(p) {
		return this.map(this.delegate.apply(p));
	}
	,__class__: stx_pico_apply_term_Map
});
var stx_pico_apply_term_AnonMap = function(delegate,_map) {
	stx_pico_apply_term_Map.call(this,delegate);
	this._map = _map;
};
$hxClasses["stx.pico.apply.term.AnonMap"] = stx_pico_apply_term_AnonMap;
stx_pico_apply_term_AnonMap.__name__ = "stx.pico.apply.term.AnonMap";
stx_pico_apply_term_AnonMap.__super__ = stx_pico_apply_term_Map;
stx_pico_apply_term_AnonMap.prototype = $extend(stx_pico_apply_term_Map.prototype,{
	_map: null
	,map: function(p) {
		return this._map(p);
	}
	,__class__: stx_pico_apply_term_AnonMap
});
var stx_pkg_Packed = function(pos) {
	this.pkg = stx_PkgLift.pkg(stx_nano_Wildcard.__,pos);
};
$hxClasses["stx.pkg.Packed"] = stx_pkg_Packed;
stx_pkg_Packed.__name__ = "stx.pkg.Packed";
stx_pkg_Packed.prototype = {
	pkg: null
	,__class__: stx_pkg_Packed
};
var stx_pkg_Pkg = {};
stx_pkg_Pkg._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pkg_Pkg.fromScope = function(p) {
	return stx_pkg_Pkg._new(stx_pkg__$Pkg_Registry.instance.get(p));
};
stx_pkg_Pkg.source = function(this1) {
	return stx_pkg__$Pkg_Registry.instance.embed.unpack(this1);
};
stx_pkg_Pkg.toString = function(this1) {
	return stx_pico_Option.toString(stx_pkg_Pkg.source(this1));
};
var stx_pkg__$Pkg_Registry = function() {
	this.embed = stx_nano_Embed._new();
	this.register = new haxe_ds_StringMap();
};
$hxClasses["stx.pkg._Pkg.Registry"] = stx_pkg__$Pkg_Registry;
stx_pkg__$Pkg_Registry.__name__ = "stx.pkg._Pkg.Registry";
stx_pkg__$Pkg_Registry.prototype = {
	embed: null
	,register: null
	,get: function(p) {
		var key = stx_pkg_Scope.identifier(p);
		if(!Object.prototype.hasOwnProperty.call(this.register.h,key)) {
			var _this = this.register;
			var value = this.embed.pack(p);
			_this.h[key] = value;
		}
		return this.register.h[key];
	}
	,__class__: stx_pkg__$Pkg_Registry
};
var stx_pkg_Scope = {};
stx_pkg_Scope._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pkg_Scope.fromPosInfos = function(pos) {
	var $module = stx_nano_lift_LiftNano.toIdentifier(stx_nano_Position.fromPos(pos));
	var out = { name : stx_pico_Identifier.get_name($module), pack : stx_nano_Way.lift(stx_pico_Identifier.get_pack($module))};
	return stx_pkg_Scope._new(out);
};
stx_pkg_Scope.fromPosition = function(pos) {
	var $module = stx_nano_lift_LiftNano.toIdentifier(stx_nano_Position.toPos(pos));
	var out = { name : stx_pico_Identifier.get_name($module), pack : stx_nano_Way.lift(stx_pico_Identifier.get_pack($module))};
	return stx_pkg_Scope._new(out);
};
stx_pkg_Scope.equals = function(this1,that) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this1.pack);
	var packl;
	if(self._hx_index == 0) {
		var v = self.v;
		packl = v;
	} else {
		packl = stx_nano_Way.unit();
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,that.pack);
	var packr;
	if(self._hx_index == 0) {
		var v = self.v;
		packr = v;
	} else {
		packr = stx_nano_Way.unit();
	}
	var pack_ok = stx_nano_Cluster.get_length(packl) == stx_nano_Cluster.get_length(packr);
	if(pack_ok) {
		var _g = 0;
		var _g1 = stx_nano_Cluster.get_length(packl);
		while(_g < _g1) {
			var i = _g++;
			pack_ok = packl[i] == packr[i];
			if(!pack_ok) {
				break;
			}
		}
	}
	if(this1.name == that.name) {
		return pack_ok;
	} else {
		return false;
	}
};
stx_pkg_Scope.identifier = function(this1) {
	if(stx_nano_Cluster.get_length(this1.pack) == 0) {
		return this1.name;
	} else {
		return stx_nano_Way.snoc(this1.pack,this1.name).join(".");
	}
};
var stx_pkg_core_WhereApi = function() { };
$hxClasses["stx.pkg.core.WhereApi"] = stx_pkg_core_WhereApi;
stx_pkg_core_WhereApi.__name__ = "stx.pkg.core.WhereApi";
stx_pkg_core_WhereApi.__isInterface__ = true;
stx_pkg_core_WhereApi.prototype = {
	where: null
	,__class__: stx_pkg_core_WhereApi
};
var stx_pkg_core_WhereCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.pkg.core.WhereCls"] = stx_pkg_core_WhereCls;
stx_pkg_core_WhereCls.__name__ = "stx.pkg.core.WhereCls";
stx_pkg_core_WhereCls.__interfaces__ = [stx_pkg_core_WhereApi];
stx_pkg_core_WhereCls.__super__ = stx_pico_Clazz;
stx_pkg_core_WhereCls.prototype = $extend(stx_pico_Clazz.prototype,{
	where: function(pos) {
		return stx_PkgLift.pkg(stx_nano_Wildcard.__,stx_nano_Position.fromPos(pos));
	}
	,__class__: stx_pkg_core_WhereCls
});
var stx_schema_AttributeDeclaration = {};
stx_schema_AttributeDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_AttributeDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_AttributeDeclaration.lift = function(self) {
	return stx_schema_AttributeDeclaration._new(self);
};
stx_schema_AttributeDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_AttributeDeclaration.get_self = function(this1) {
	return stx_schema_AttributeDeclaration.lift(this1);
};
stx_schema_AttributeDeclaration.with_type = function(this1,ref) {
	return stx_schema_AttributeDeclaration.lift({ validation : this1.validation, relation : this1.relation, inverse : this1.inverse, type : ref});
};
var stx_schema_Logging = function() { };
$hxClasses["stx.schema.Logging"] = stx_schema_Logging;
stx_schema_Logging.__name__ = "stx.schema.Logging";
stx_schema_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/Logging.hx", lineNumber : 9, className : "stx.schema.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_Log.unit();
		var tag = scope.pack.join("/");
		var this2 = this1;
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		};
		return function(value,pos) {
			this2(value,fn(pos));
		};
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_Log.unit();
	}
};
var stx_schema_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.schema.Module"] = stx_schema_Module;
stx_schema_Module.__name__ = "stx.schema.Module";
stx_schema_Module.__super__ = stx_pico_Clazz;
stx_schema_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	scalar: function(name,pack,validation) {
		return stx_schema_SchemaSum.SchScalar(stx_schema_SchemaDeclaration.make(name,pack,haxe_ds_Option.None,haxe_ds_Option.None,validation));
	}
	,record: function(self) {
		return stx_schema_SchemaSum.SchRecord(stx_schema_SchemaRecordDeclaration.make0(self.name,self.pack,self.fields,self.validation));
	}
	,enumeration: function(name,pack,consructors,procurements,validation) {
		return stx_schema_SchemaSum.SchEnum(stx_schema_SchemaEnumDeclaration.make0(name,pack,procurements,validation));
	}
	,generic: function(name,pack,type,validation) {
		return stx_schema_SchemaSum.SchGeneric(stx_schema_SchemaGenericDeclaration.make(name,pack,type,validation));
	}
	,union: function(name,pack,type,lhs,rhs,validation) {
		return stx_schema_SchemaSum.SchUnion(stx_schema_SchemaUnionDeclaration.make0(name,pack,lhs,rhs,validation));
	}
	,type: function(type) {
		return stx_schema_SchemaSum.SchType(type);
	}
	,__class__: stx_schema_Module
});
var stx_schema__$Module_Type = function() { };
$hxClasses["stx.schema._Module.Type"] = stx_schema__$Module_Type;
stx_schema__$Module_Type.__name__ = "stx.schema._Module.Type";
var stx_schema_ProcurementSum = $hxEnums["stx.schema.ProcurementSum"] = { __ename__:"stx.schema.ProcurementSum",__constructs__:null
	,Property: ($_=function(def) { return {_hx_index:0,def:def,__enum__:"stx.schema.ProcurementSum",toString:$estr}; },$_._hx_name="Property",$_.__params__ = ["def"],$_)
	,Attribute: ($_=function(def) { return {_hx_index:1,def:def,__enum__:"stx.schema.ProcurementSum",toString:$estr}; },$_._hx_name="Attribute",$_.__params__ = ["def"],$_)
};
stx_schema_ProcurementSum.__constructs__ = [stx_schema_ProcurementSum.Property,stx_schema_ProcurementSum.Attribute];
var stx_schema_ProcurementLift = function() { };
$hxClasses["stx.schema.ProcurementLift"] = stx_schema_ProcurementLift;
stx_schema_ProcurementLift.__name__ = "stx.schema.ProcurementLift";
stx_schema_ProcurementLift.fold = function(self,property,attribute) {
	switch(self._hx_index) {
	case 0:
		var def = self.def;
		return property(def);
	case 1:
		var def = self.def;
		return attribute(def);
	}
};
stx_schema_ProcurementLift.with_type = function(self,type) {
	return stx_schema_ProcurementLift.fold(self,function(t) {
		return stx_schema_ProcurementSum.Property(stx_schema_ProcurementPropertyDeclaration.with_type(t,type));
	},function(t) {
		return stx_schema_ProcurementSum.Attribute(stx_schema_ProcurementAttributeDeclaration.with_type(t,type));
	});
};
var stx_schema_Procurement = {};
stx_schema_Procurement.__properties__ = {get_type:"get_type",get_self:"get_self"};
stx_schema_Procurement._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_Procurement.lift = function(self) {
	return stx_schema_Procurement._new(self);
};
stx_schema_Procurement.prj = function(this1) {
	return this1;
};
stx_schema_Procurement.get_self = function(this1) {
	return stx_schema_Procurement.lift(this1);
};
stx_schema_Procurement.fromProcurementPropertyDeclaration = function(self) {
	return stx_schema_Procurement.lift(stx_schema_ProcurementSum.Property(self));
};
stx_schema_Procurement.fromProcurementAttributeDeclaration = function(self) {
	return stx_schema_Procurement.lift(stx_schema_ProcurementSum.Attribute(self));
};
stx_schema_Procurement.get_type = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var def = this1.def;
		return def.type;
	case 1:
		var def = this1.def;
		return def.type;
	}
};
stx_schema_Procurement.identity = function(this1) {
	return stx_schema_SchemaRef.identity(stx_schema_Procurement.get_type(this1));
};
var stx_schema_ProcurementAttributeDeclaration = {};
stx_schema_ProcurementAttributeDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_ProcurementAttributeDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_ProcurementAttributeDeclaration.lift = function(self) {
	return stx_schema_ProcurementAttributeDeclaration._new(self);
};
stx_schema_ProcurementAttributeDeclaration.make = function(name,type,relation,inverse,validation) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,validation);
	var v = stx_nano_Cluster.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	return stx_schema_ProcurementAttributeDeclaration.lift({ name : name, type : type, relation : relation, inverse : inverse, validation : tmp});
};
stx_schema_ProcurementAttributeDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_ProcurementAttributeDeclaration.get_self = function(this1) {
	return stx_schema_ProcurementAttributeDeclaration.lift(this1);
};
stx_schema_ProcurementAttributeDeclaration.with_type = function(this1,type) {
	return stx_schema_ProcurementAttributeDeclaration.make(this1.name,type,this1.relation,this1.inverse,this1.validation);
};
var stx_schema_ProcurementPropertyDeclaration = {};
stx_schema_ProcurementPropertyDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_ProcurementPropertyDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_ProcurementPropertyDeclaration.lift = function(self) {
	return stx_schema_ProcurementPropertyDeclaration._new(self);
};
stx_schema_ProcurementPropertyDeclaration.make = function(name,type,validation) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,validation);
	var v = stx_nano_Cluster.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	return stx_schema_ProcurementPropertyDeclaration.lift({ name : name, type : type, validation : tmp});
};
stx_schema_ProcurementPropertyDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_ProcurementPropertyDeclaration.get_self = function(this1) {
	return stx_schema_ProcurementPropertyDeclaration.lift(this1);
};
stx_schema_ProcurementPropertyDeclaration.with_type = function(this1,type) {
	return stx_schema_ProcurementPropertyDeclaration.make(this1.name,type,this1.validation);
};
var stx_schema_Procurements = {};
stx_schema_Procurements.__properties__ = {get_self:"get_self"};
stx_schema_Procurements._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_Procurements.lift = function(self) {
	return stx_schema_Procurements._new(self);
};
stx_schema_Procurements.prj = function(this1) {
	return this1;
};
stx_schema_Procurements.get_self = function(this1) {
	return stx_schema_Procurements.lift(this1);
};
stx_schema_Procurements.fromObject = function(self) {
	var out = [];
	var h = self.properties.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g1_key = key;
		var _g1_value = _g_h[key];
		var k = _g1_key;
		var v = _g1_value;
		var next = { name : k, type : v.type};
		out.push(stx_schema_ProcurementSum.Property(next));
	}
	return null;
};
var stx_schema_ProcurementsLift = function() { };
$hxClasses["stx.schema.ProcurementsLift"] = stx_schema_ProcurementsLift;
stx_schema_ProcurementsLift.__name__ = "stx.schema.ProcurementsLift";
var stx_schema_PropertyDeclaration = {};
stx_schema_PropertyDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_PropertyDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_PropertyDeclaration.lift = function(self) {
	return stx_schema_PropertyDeclaration._new(self);
};
stx_schema_PropertyDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_PropertyDeclaration.get_self = function(this1) {
	return stx_schema_PropertyDeclaration.lift(this1);
};
stx_schema_PropertyDeclaration.fromSchemaDeclarationDef = function(self) {
	var that = stx_schema_Schema.lift(stx_schema_Schema.fromSchemaDeclaration(self));
	return stx_schema_PropertyDeclaration.lift({ type : stx_schema_SchemaRef.lift({ name : stx_schema_Schema.get_name(that), pack : stx_schema_Schema.get_pack(that), pop : function() {
		return that;
	}, lhs : haxe_ds_Option.None, rhs : haxe_ds_Option.None})});
};
stx_schema_PropertyDeclaration.fromSchema = function(self) {
	var self1 = self;
	var identity = stx_schema_Schema.identity(self1);
	return stx_schema_PropertyDeclaration.lift({ type : stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
		return self1;
	}, lhs : identity.lhs, rhs : identity.rhs})});
};
stx_schema_PropertyDeclaration.with_type = function(this1,ref) {
	return stx_schema_PropertyDeclaration.lift({ validation : this1.validation, type : ref});
};
var stx_schema_SchemaSum = $hxEnums["stx.schema.SchemaSum"] = { __ename__:"stx.schema.SchemaSum",__constructs__:null
	,SchScalar: ($_=function(def) { return {_hx_index:0,def:def,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchScalar",$_.__params__ = ["def"],$_)
	,SchRecord: ($_=function(def) { return {_hx_index:1,def:def,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchRecord",$_.__params__ = ["def"],$_)
	,SchEnum: ($_=function(def) { return {_hx_index:2,def:def,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchEnum",$_.__params__ = ["def"],$_)
	,SchGeneric: ($_=function(def) { return {_hx_index:3,def:def,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchGeneric",$_.__params__ = ["def"],$_)
	,SchUnion: ($_=function(def) { return {_hx_index:4,def:def,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchUnion",$_.__params__ = ["def"],$_)
	,SchLazy: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchLazy",$_.__params__ = ["fn"],$_)
	,SchType: ($_=function(type) { return {_hx_index:6,type:type,__enum__:"stx.schema.SchemaSum",toString:$estr}; },$_._hx_name="SchType",$_.__params__ = ["type"],$_)
};
stx_schema_SchemaSum.__constructs__ = [stx_schema_SchemaSum.SchScalar,stx_schema_SchemaSum.SchRecord,stx_schema_SchemaSum.SchEnum,stx_schema_SchemaSum.SchGeneric,stx_schema_SchemaSum.SchUnion,stx_schema_SchemaSum.SchLazy,stx_schema_SchemaSum.SchType];
var stx_schema_SchemaLift = function() { };
$hxClasses["stx.schema.SchemaLift"] = stx_schema_SchemaLift;
stx_schema_SchemaLift.__name__ = "stx.schema.SchemaLift";
stx_schema_SchemaLift.fold = function(self,scalar,record,enm,generic,union,type) {
	switch(self._hx_index) {
	case 0:
		var def = self.def;
		return scalar(def);
	case 1:
		var def = self.def;
		return record(def);
	case 2:
		var def = self.def;
		return enm(def);
	case 3:
		var def = self.def;
		return generic(def);
	case 4:
		var def = self.def;
		return union(def);
	case 5:
		var f = self.fn;
		return stx_schema_SchemaLift.fold(f(),scalar,record,enm,generic,union,type);
	case 6:
		var def = self.type;
		return type(def);
	}
};
var stx_schema_Schema = {};
stx_schema_Schema.__properties__ = {get_pack:"get_pack",get_name:"get_name",get_validation:"get_validation",get_self:"get_self"};
stx_schema_Schema._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_Schema.lift = function(self) {
	return stx_schema_Schema._new(self);
};
stx_schema_Schema.prj = function(this1) {
	return this1;
};
stx_schema_Schema.get_self = function(this1) {
	return stx_schema_Schema.lift(this1);
};
stx_schema_Schema.get_validation = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var def = this1.def;
		return def.validation;
	case 1:
		var def = this1.def;
		return def.validation;
	case 2:
		var def = this1.def;
		return def.validation;
	case 3:
		var def = this1.def;
		return def.validation;
	case 4:
		var def = this1.def;
		return def.validation;
	case 5:
		var f = this1.fn;
		var self = f();
		switch(self._hx_index) {
		case 0:
			var def = self.def;
			return def.validation;
		case 1:
			var def = self.def;
			return def.validation;
		case 2:
			var def = self.def;
			return def.validation;
		case 3:
			var def = self.def;
			return def.validation;
		case 4:
			var def = self.def;
			return def.validation;
		case 5:
			var f = self.fn;
			return stx_schema_SchemaLift.fold(f(),function(x) {
				return x.validation;
			},function(x) {
				return x.validation;
			},function(x) {
				return x.validation;
			},function(x) {
				return x.validation;
			},function(x) {
				return x.validation;
			},function(x) {
				return x.get_validation();
			});
		case 6:
			var def = self.type;
			return def.get_validation();
		}
		break;
	case 6:
		var def = this1.type;
		return def.get_validation();
	}
};
stx_schema_Schema.get_name = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var def = this1.def;
		return def.id.name;
	case 1:
		var def = this1.def;
		return def.id.name;
	case 2:
		var def = this1.def;
		return def.id.name;
	case 3:
		var def = this1.def;
		return def.id.name;
	case 4:
		var def = this1.def;
		return def.id.name;
	case 5:
		var f = this1.fn;
		var self = f();
		switch(self._hx_index) {
		case 0:
			var def = self.def;
			return def.id.name;
		case 1:
			var def = self.def;
			return def.id.name;
		case 2:
			var def = self.def;
			return def.id.name;
		case 3:
			var def = self.def;
			return def.id.name;
		case 4:
			var def = self.def;
			return def.id.name;
		case 5:
			var f = self.fn;
			return stx_schema_SchemaLift.fold(f(),function(x) {
				return x.id.name;
			},function(x) {
				return x.id.name;
			},function(x) {
				return x.id.name;
			},function(x) {
				return x.id.name;
			},function(x) {
				return x.id.name;
			},function(x) {
				return x.identity().name;
			});
		case 6:
			var def = self.type;
			return def.identity().name;
		}
		break;
	case 6:
		var def = this1.type;
		return def.identity().name;
	}
};
stx_schema_Schema.get_pack = function(this1) {
	var self;
	switch(this1._hx_index) {
	case 0:
		var def = this1.def;
		self = def.id.pack;
		break;
	case 1:
		var def = this1.def;
		self = def.id.pack;
		break;
	case 2:
		var def = this1.def;
		self = def.id.pack;
		break;
	case 3:
		var def = this1.def;
		self = def.id.pack;
		break;
	case 4:
		var def = this1.def;
		self = def.id.pack;
		break;
	case 5:
		var f = this1.fn;
		var self1 = f();
		switch(self1._hx_index) {
		case 0:
			var def = self1.def;
			self = def.id.pack;
			break;
		case 1:
			var def = self1.def;
			self = def.id.pack;
			break;
		case 2:
			var def = self1.def;
			self = def.id.pack;
			break;
		case 3:
			var def = self1.def;
			self = def.id.pack;
			break;
		case 4:
			var def = self1.def;
			self = def.id.pack;
			break;
		case 5:
			var f = self1.fn;
			var self2 = f();
			switch(self2._hx_index) {
			case 0:
				var def = self2.def;
				self = def.id.pack;
				break;
			case 1:
				var def = self2.def;
				self = def.id.pack;
				break;
			case 2:
				var def = self2.def;
				self = def.id.pack;
				break;
			case 3:
				var def = self2.def;
				self = def.id.pack;
				break;
			case 4:
				var def = self2.def;
				self = def.id.pack;
				break;
			case 5:
				var f = self2.fn;
				self = stx_schema_SchemaLift.fold(f(),function(x) {
					return x.id.pack;
				},function(x) {
					return x.id.pack;
				},function(x) {
					return x.id.pack;
				},function(x) {
					return x.id.pack;
				},function(x) {
					return x.id.pack;
				},function(x) {
					return x.identity().pack;
				});
				break;
			case 6:
				var def = self2.type;
				self = def.identity().pack;
				break;
			}
			break;
		case 6:
			var def = self1.type;
			self = def.identity().pack;
			break;
		}
		break;
	case 6:
		var def = this1.type;
		self = def.identity().pack;
		break;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self);
	if(self1._hx_index == 0) {
		var v = self1.v;
		return v;
	} else {
		return stx_nano_Cluster.unit();
	}
};
stx_schema_Schema.identity = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var def = this1.def;
		return stx_schema_SchemaDeclaration.identity(def);
	case 1:
		var def = this1.def;
		return stx_schema_SchemaRecordDeclaration.identity(def);
	case 2:
		var def = this1.def;
		return stx_schema_SchemaEnumDeclaration.identity(def);
	case 3:
		var def = this1.def;
		return stx_schema_SchemaGenericDeclaration.identity(def);
	case 4:
		var def = this1.def;
		return stx_schema_SchemaUnionDeclaration.identity(def);
	case 5:
		var f = this1.fn;
		var self = f();
		switch(self._hx_index) {
		case 0:
			var def = self.def;
			return stx_schema_SchemaDeclaration.identity(def);
		case 1:
			var def = self.def;
			return stx_schema_SchemaRecordDeclaration.identity(def);
		case 2:
			var def = self.def;
			return stx_schema_SchemaEnumDeclaration.identity(def);
		case 3:
			var def = self.def;
			return stx_schema_SchemaGenericDeclaration.identity(def);
		case 4:
			var def = self.def;
			return stx_schema_SchemaUnionDeclaration.identity(def);
		case 5:
			var f = self.fn;
			return stx_schema_SchemaLift.fold(f(),function(x) {
				return stx_schema_SchemaDeclaration.identity(x);
			},function(x) {
				return stx_schema_SchemaRecordDeclaration.identity(x);
			},function(x) {
				return stx_schema_SchemaEnumDeclaration.identity(x);
			},function(x) {
				return stx_schema_SchemaGenericDeclaration.identity(x);
			},function(x) {
				return stx_schema_SchemaUnionDeclaration.identity(x);
			},function(x) {
				return x.identity();
			});
		case 6:
			var def = self.type;
			return def.identity();
		}
		break;
	case 6:
		var def = this1.type;
		return def.identity();
	}
};
stx_schema_Schema.resolve = function(this1,state) {
	switch(this1._hx_index) {
	case 0:
		var def = this1.def;
		return stx_schema_SchemaDeclaration.resolve(def,state);
	case 1:
		var def = this1.def;
		return stx_schema_SchemaRecordDeclaration.resolve(def,state);
	case 2:
		var def = this1.def;
		return stx_schema_SchemaEnumDeclaration.resolve(def,state);
	case 3:
		var def = this1.def;
		return stx_schema_SchemaGenericDeclaration.resolve(def,state);
	case 4:
		var def = this1.def;
		return stx_schema_SchemaUnionDeclaration.resolve(def,state);
	case 5:
		var f = this1.fn;
		var self = f();
		switch(self._hx_index) {
		case 0:
			var def = self.def;
			return stx_schema_SchemaDeclaration.resolve(def,state);
		case 1:
			var def = self.def;
			return stx_schema_SchemaRecordDeclaration.resolve(def,state);
		case 2:
			var def = self.def;
			return stx_schema_SchemaEnumDeclaration.resolve(def,state);
		case 3:
			var def = self.def;
			return stx_schema_SchemaGenericDeclaration.resolve(def,state);
		case 4:
			var def = self.def;
			return stx_schema_SchemaUnionDeclaration.resolve(def,state);
		case 5:
			var f = self.fn;
			return stx_schema_SchemaLift.fold(f(),function(x) {
				return stx_schema_SchemaDeclaration.resolve(x,state);
			},function(x) {
				return stx_schema_SchemaRecordDeclaration.resolve(x,state);
			},function(x) {
				return stx_schema_SchemaEnumDeclaration.resolve(x,state);
			},function(x) {
				return stx_schema_SchemaGenericDeclaration.resolve(x,state);
			},function(x) {
				return stx_schema_SchemaUnionDeclaration.resolve(x,state);
			},function(x) {
				return stx_schema_SchemaSum.SchType(x);
			});
		case 6:
			var def = self.type;
			return stx_schema_SchemaSum.SchType(def);
		}
		break;
	case 6:
		var def = this1.type;
		return stx_schema_SchemaSum.SchType(def);
	}
};
stx_schema_Schema.fromSchemaDeclaration = function(self) {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchScalar(self));
};
stx_schema_Schema.fromSchemaGenericDeclaration = function(self) {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchGeneric(self));
};
stx_schema_Schema.Array = function(ref) {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchGeneric(stx_schema_term_SchemaArray.toSchemaGenericDeclaration(stx_schema_term_SchemaArray.make(ref))));
};
stx_schema_Schema.Bool = function() {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchScalar(stx_schema_term_SchemaBool.toSchemaDeclaration(stx_schema_term_SchemaBool.make())));
};
stx_schema_Schema.Float = function() {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchScalar(stx_schema_term_SchemaFloat.toSchemaDeclaration(stx_schema_term_SchemaFloat.make())));
};
stx_schema_Schema.Int = function() {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchScalar(stx_schema_term_SchemaInt.toSchemaDeclaration(stx_schema_term_SchemaInt.make())));
};
stx_schema_Schema.Null = function(ref) {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchGeneric(stx_schema_term_SchemaNull.toSchemaGenericDeclaration(stx_schema_term_SchemaNull.make(ref))));
};
stx_schema_Schema.String = function() {
	return stx_schema_Schema.lift(stx_schema_SchemaSum.SchScalar(stx_schema_term_SchemaString.toSchemaDeclaration(stx_schema_term_SchemaString.make())));
};
var stx_schema_SchemaDeclaration = {};
stx_schema_SchemaDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_SchemaDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaDeclaration.lift = function(self) {
	return stx_schema_SchemaDeclaration._new(self);
};
stx_schema_SchemaDeclaration.make = function(name,pack,lhs,rhs,validation) {
	return stx_schema_SchemaDeclaration.lift({ id : stx_schema_core_Identity.make(stx_nano_Ident.make(name,pack),lhs,rhs), validation : validation});
};
stx_schema_SchemaDeclaration.make0 = function(name,pack,validation) {
	return stx_schema_SchemaDeclaration.make(name,pack,haxe_ds_Option.None,haxe_ds_Option.None,validation);
};
stx_schema_SchemaDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_SchemaDeclaration.get_self = function(this1) {
	return stx_schema_SchemaDeclaration.lift(this1);
};
stx_schema_SchemaDeclaration.identity = function(this1) {
	return this1.id;
};
stx_schema_SchemaDeclaration.resolve = function(this1,state) {
	state.put(stx_schema_Schema.fromSchemaDeclaration(this1));
	return stx_schema_SchemaSum.SchScalar(this1);
};
var stx_schema_Script = function() { };
$hxClasses["stx.schema.Script"] = stx_schema_Script;
stx_schema_Script.__name__ = "stx.schema.Script";
stx_schema_Script.interp = function() {
	var interp = new hscript_Interp();
	return interp;
};
stx_schema_Script.parser = function() {
	var parser = new hscript_Parser();
	parser.allowTypes = true;
	return parser;
};
var stx_schema_SchemaEnumDeclarationLift = function() { };
$hxClasses["stx.schema.SchemaEnumDeclarationLift"] = stx_schema_SchemaEnumDeclarationLift;
stx_schema_SchemaEnumDeclarationLift.__name__ = "stx.schema.SchemaEnumDeclarationLift";
stx_schema_SchemaEnumDeclarationLift.__properties__ = {get_validation:"get_validation"};
stx_schema_SchemaEnumDeclarationLift.validation = null;
stx_schema_SchemaEnumDeclarationLift.get_validation = function() {
	return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationExpr(stx_schema_SchemaEnumDeclarationLift.check_constructor)]);
};
var stx_schema_SchemaEnumDeclaration = {};
stx_schema_SchemaEnumDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_SchemaEnumDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaEnumDeclaration.lift = function(self) {
	return stx_schema_SchemaEnumDeclaration._new(self);
};
stx_schema_SchemaEnumDeclaration.make = function(ident,constructors,validation) {
	var tmp = stx_schema_core_Identity.fromIdent(ident);
	var tmp1 = stx_schema_SchemaEnumDeclaration._.get_validation();
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,validation);
	var v = stx_nano_Cluster.unit();
	var tmp2;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp2 = v1;
	} else {
		tmp2 = v;
	}
	return stx_schema_SchemaEnumDeclaration.lift({ id : tmp, constructors : constructors, validation : stx_schema_ValidationsLift.concat(tmp1,tmp2)});
};
stx_schema_SchemaEnumDeclaration.make0 = function(name,pack,constructors,validation) {
	return stx_schema_SchemaEnumDeclaration.make(stx_nano_Ident.make(name,pack),constructors,validation);
};
stx_schema_SchemaEnumDeclaration.resolve = function(this1,state) {
	state.put(stx_schema_Schema.fromSchemaDeclaration(this1));
	return stx_schema_SchemaSum.SchEnum(this1);
};
stx_schema_SchemaEnumDeclaration.identity = function(this1) {
	return this1.id;
};
stx_schema_SchemaEnumDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_SchemaEnumDeclaration.get_self = function(this1) {
	return stx_schema_SchemaEnumDeclaration.lift(this1);
};
var stx_schema_SchemaGenericDeclarationLift = function() { };
$hxClasses["stx.schema.SchemaGenericDeclarationLift"] = stx_schema_SchemaGenericDeclarationLift;
stx_schema_SchemaGenericDeclarationLift.__name__ = "stx.schema.SchemaGenericDeclarationLift";
stx_schema_SchemaGenericDeclarationLift.__properties__ = {get_validation:"get_validation"};
stx_schema_SchemaGenericDeclarationLift.validation = null;
stx_schema_SchemaGenericDeclarationLift.get_validation = function() {
	return stx_nano_Cluster.unit();
};
var stx_schema_SchemaGenericDeclaration = {};
stx_schema_SchemaGenericDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_SchemaGenericDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaGenericDeclaration.lift = function(self) {
	return stx_schema_SchemaGenericDeclaration._new(self);
};
stx_schema_SchemaGenericDeclaration.make = function(name,pack,type,validation) {
	var tmp = stx_schema_core_Identity.fromIdent(stx_nano_Ident.make(name,pack));
	var tmp1 = stx_schema_SchemaGenericDeclaration._.get_validation();
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,validation);
	var v = stx_nano_Cluster.unit();
	var tmp2;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp2 = v1;
	} else {
		tmp2 = v;
	}
	return stx_schema_SchemaGenericDeclaration.lift({ id : tmp, type : type, validation : stx_schema_ValidationsLift.concat(tmp1,tmp2)});
};
stx_schema_SchemaGenericDeclaration.identity = function(this1) {
	return stx_schema_core_Identity.make(stx_nano_Ident.make(this1.id.name,this1.id.pack),haxe_ds_Option.Some(stx_schema_core_Identity.lift(this1.type)),haxe_ds_Option.None);
};
stx_schema_SchemaGenericDeclaration.resolve = function(this1,state) {
	var self = stx_pico_OptionLift.map(state.get(stx_schema_SchemaRef.identity(this1.type)),stx_schema_SchemaRef.fromSchema);
	var typeI;
	if(self._hx_index == 0) {
		var v = self.v;
		typeI = v;
	} else {
		typeI = stx_schema_SchemaRef.resolve(this1.type,state);
	}
	var result = stx_schema_SchemaSum.SchGeneric(stx_schema_SchemaGenericDeclaration.make(this1.id.name,this1.id.pack,typeI,this1.validation));
	state.put(result);
	return result;
};
stx_schema_SchemaGenericDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_SchemaGenericDeclaration.get_self = function(this1) {
	return stx_schema_SchemaGenericDeclaration.lift(this1);
};
stx_schema_SchemaGenericDeclaration.toSchema = function(this1) {
	return stx_schema_SchemaSum.SchGeneric(this1);
};
var stx_schema_SchemaPropertyRef = {};
stx_schema_SchemaPropertyRef.__properties__ = {get_self:"get_self"};
stx_schema_SchemaPropertyRef._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaPropertyRef.lift = function(self) {
	return stx_schema_SchemaPropertyRef._new(self);
};
stx_schema_SchemaPropertyRef.make = function(field,type) {
	return stx_schema_SchemaPropertyRef.lift({ field : field, type : type});
};
stx_schema_SchemaPropertyRef.prj = function(this1) {
	return this1;
};
stx_schema_SchemaPropertyRef.get_self = function(this1) {
	return stx_schema_SchemaPropertyRef.lift(this1);
};
var stx_schema_SchemaRecordDeclaration = {};
stx_schema_SchemaRecordDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_SchemaRecordDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaRecordDeclaration.lift = function(self) {
	return stx_schema_SchemaRecordDeclaration._new(self);
};
stx_schema_SchemaRecordDeclaration.make = function(ident,fields,validation) {
	return stx_schema_SchemaRecordDeclaration.lift({ id : stx_schema_core_Identity.fromIdent(ident), fields : fields, validation : validation});
};
stx_schema_SchemaRecordDeclaration.make0 = function(name,pack,fields,validation) {
	return stx_schema_SchemaRecordDeclaration.make(stx_nano_Ident.make(name,pack),fields,validation);
};
stx_schema_SchemaRecordDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_SchemaRecordDeclaration.get_self = function(this1) {
	return stx_schema_SchemaRecordDeclaration.lift(this1);
};
stx_schema_SchemaRecordDeclaration.identity = function(this1) {
	return this1.id;
};
stx_schema_SchemaRecordDeclaration.resolve = function(this1,state) {
	var fieldsI = stx_nano_ClusterLift.map(this1.fields,function(field) {
		var self = state.get(stx_schema_SchemaRef.identity(stx_schema_Procurement.get_type(field)));
		var ref;
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			var self = t;
			var identity = stx_schema_Schema.identity(self);
			ref = stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
				return self;
			}, lhs : identity.lhs, rhs : identity.rhs});
			break;
		case 1:
			ref = stx_schema_SchemaRef.resolve(stx_schema_Procurement.get_type(field),state);
			break;
		}
		return stx_schema_ProcurementLift.with_type(field,ref);
	});
	var result = stx_schema_SchemaRecordDeclaration.make(stx_nano_Ident.make(this1.id.name,this1.id.pack),fieldsI,this1.validation);
	state.put(stx_schema_SchemaSum.SchRecord(result));
	return stx_schema_SchemaSum.SchRecord(result);
};
var stx_schema_SchemaRef = {};
stx_schema_SchemaRef.__properties__ = {get_self:"get_self"};
stx_schema_SchemaRef._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaRef.lift = function(self) {
	return stx_schema_SchemaRef._new(self);
};
stx_schema_SchemaRef.resolve = function(this1,state) {
	var self = state.get(stx_schema_core_Identity.lift(this1));
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		var self = t;
		var identity = stx_schema_Schema.identity(self);
		return stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
			return self;
		}, lhs : identity.lhs, rhs : identity.rhs});
	case 1:
		return stx_nano_lift_LiftNano.if_else(stx_nano_Report.is_ok(new stx_assert_Module({ fileName : "src/main/haxe/stx/schema/SchemaRef.hx", lineNumber : 14, className : "stx.schema._SchemaRef.SchemaRef_Impl_", methodName : "resolve"}).exists().apply(this1.pop())),function() {
			var val = this1.pop();
			var next = stx_schema_Schema.resolve(val,state);
			state.put(next);
			var self = next;
			var identity = stx_schema_Schema.identity(self);
			return stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
				return self;
			}, lhs : identity.lhs, rhs : identity.rhs});
		},function() {
			return stx_schema_SchemaRef.make(stx_schema_SchemaRef.identity(this1),function() {
				return stx_pico_OptionLift.fudge(state.get(stx_schema_SchemaRef.identity(this1)),function(f) {
					return stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(stx_schema_SchemaRef.identity(this1));
				});
			});
		});
	}
};
stx_schema_SchemaRef.make = function(identity,pop) {
	return stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, lhs : identity.lhs, rhs : identity.rhs, pop : pop});
};
stx_schema_SchemaRef.make0 = function(name,pack,lhs,rhs,pop) {
	return stx_schema_SchemaRef.make(stx_schema_core_Identity.make(stx_nano_Ident.make(name,pack),lhs,rhs),pop);
};
stx_schema_SchemaRef.fromSchemaSum = function(self) {
	var that = stx_schema_Schema.lift(self);
	return stx_schema_SchemaRef.lift({ name : stx_schema_Schema.get_name(that), pack : stx_schema_Schema.get_pack(that), pop : function() {
		return that;
	}, lhs : haxe_ds_Option.None, rhs : haxe_ds_Option.None});
};
stx_schema_SchemaRef.fromSchema = function(self) {
	var identity = stx_schema_Schema.identity(self);
	return stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
		return self;
	}, lhs : identity.lhs, rhs : identity.rhs});
};
stx_schema_SchemaRef.fromIdent = function(self) {
	return stx_schema_SchemaRef.make0(self.name,self.pack,haxe_ds_Option.None,haxe_ds_Option.None);
};
stx_schema_SchemaRef.fromIdentity = function(self) {
	return stx_schema_SchemaRef.make0(self.name,self.pack,self.lhs,self.rhs);
};
stx_schema_SchemaRef.fromSchemaDeclaration = function(self) {
	var that = stx_schema_Schema.lift(stx_schema_Schema.fromSchemaDeclaration(self));
	return stx_schema_SchemaRef.lift({ name : stx_schema_Schema.get_name(that), pack : stx_schema_Schema.get_pack(that), pop : function() {
		return that;
	}, lhs : haxe_ds_Option.None, rhs : haxe_ds_Option.None});
};
stx_schema_SchemaRef.identity = function(this1) {
	return stx_schema_core_Identity.lift(this1);
};
stx_schema_SchemaRef.prj = function(this1) {
	return this1;
};
stx_schema_SchemaRef.get_self = function(this1) {
	return stx_schema_SchemaRef.lift(this1);
};
var stx_schema_SchemaRelationSum = $hxEnums["stx.schema.SchemaRelationSum"] = { __ename__:"stx.schema.SchemaRelationSum",__constructs__:null
	,HAS_MANY: {_hx_name:"HAS_MANY",_hx_index:0,__enum__:"stx.schema.SchemaRelationSum",toString:$estr}
	,HAS_ONE: {_hx_name:"HAS_ONE",_hx_index:1,__enum__:"stx.schema.SchemaRelationSum",toString:$estr}
	,OWNED_BY: {_hx_name:"OWNED_BY",_hx_index:2,__enum__:"stx.schema.SchemaRelationSum",toString:$estr}
};
stx_schema_SchemaRelationSum.__constructs__ = [stx_schema_SchemaRelationSum.HAS_MANY,stx_schema_SchemaRelationSum.HAS_ONE,stx_schema_SchemaRelationSum.OWNED_BY];
var stx_schema_SchemaUnionDeclarationLift = function() { };
$hxClasses["stx.schema.SchemaUnionDeclarationLift"] = stx_schema_SchemaUnionDeclarationLift;
stx_schema_SchemaUnionDeclarationLift.__name__ = "stx.schema.SchemaUnionDeclarationLift";
stx_schema_SchemaUnionDeclarationLift.__properties__ = {get_validation:"get_validation"};
stx_schema_SchemaUnionDeclarationLift.validation = null;
stx_schema_SchemaUnionDeclarationLift.get_validation = function() {
	return stx_nano_Cluster.unit();
};
var stx_schema_SchemaUnionDeclaration = {};
stx_schema_SchemaUnionDeclaration.__properties__ = {get_self:"get_self"};
stx_schema_SchemaUnionDeclaration._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_SchemaUnionDeclaration.lift = function(self) {
	return stx_schema_SchemaUnionDeclaration._new(self);
};
stx_schema_SchemaUnionDeclaration.make = function(ident,lhs,rhs,validation) {
	var tmp = stx_schema_core_Identity.fromIdent(ident);
	var tmp1 = stx_schema_SchemaUnionDeclaration._.get_validation();
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,validation);
	var v = stx_nano_Cluster.unit();
	var tmp2;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp2 = v1;
	} else {
		tmp2 = v;
	}
	return stx_schema_SchemaUnionDeclaration.lift({ id : tmp, lhs : lhs, rhs : rhs, validation : stx_schema_ValidationsLift.concat(tmp1,tmp2)});
};
stx_schema_SchemaUnionDeclaration.make0 = function(name,pack,lhs,rhs,validation) {
	return stx_schema_SchemaUnionDeclaration.make(stx_nano_Ident.make(name,pack),lhs,rhs,validation);
};
stx_schema_SchemaUnionDeclaration.identity = function(this1) {
	return stx_schema_core_Identity.make(stx_nano_Ident.make(this1.id.name,this1.id.pack),haxe_ds_Option.Some(stx_schema_core_Identity.lift(this1.lhs)),haxe_ds_Option.Some(stx_schema_core_Identity.lift(this1.rhs)));
};
stx_schema_SchemaUnionDeclaration.resolve = function(this1,state) {
	var self = state.get(stx_schema_SchemaRef.identity(this1.lhs));
	var l;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		var self = t;
		var identity = stx_schema_Schema.identity(self);
		l = stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
			return self;
		}, lhs : identity.lhs, rhs : identity.rhs});
		break;
	case 1:
		l = stx_schema_SchemaRef.resolve(this1.lhs,state);
		break;
	}
	var self1 = state.get(stx_schema_SchemaRef.identity(this1.rhs));
	var r;
	switch(self1._hx_index) {
	case 0:
		var t = self1.v;
		var self1 = t;
		var identity = stx_schema_Schema.identity(self1);
		r = stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
			return self1;
		}, lhs : identity.lhs, rhs : identity.rhs});
		break;
	case 1:
		r = stx_schema_SchemaRef.resolve(this1.lhs,state);
		break;
	}
	var result = stx_schema_SchemaUnionDeclaration.make0(this1.id.name,this1.id.pack,l,r,this1.validation);
	state.put(stx_schema_SchemaSum.SchUnion(result));
	return stx_schema_SchemaSum.SchUnion(result);
};
stx_schema_SchemaUnionDeclaration.prj = function(this1) {
	return this1;
};
stx_schema_SchemaUnionDeclaration.get_self = function(this1) {
	return stx_schema_SchemaUnionDeclaration.lift(this1);
};
var stx_schema_SchemataCls = function(register,context) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,register);
	var v = new haxe_ds_StringMap();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.register = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,context);
	var v = new stx_schema_core_Context();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.context = tmp;
};
$hxClasses["stx.schema.SchemataCls"] = stx_schema_SchemataCls;
stx_schema_SchemataCls.__name__ = "stx.schema.SchemataCls";
stx_schema_SchemataCls.prototype = {
	register: null
	,context: null
	,get: function(key) {
		var _this = this.register;
		var key1 = stx_schema_core_Identity.toString(key);
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,_this.h[key1]);
	}
	,put: function(data) {
		var _this = this.register;
		var key = stx_schema_core_Identity.toString(stx_schema_Schema.identity(data));
		_this.h[key] = data;
	}
	,type: function() {
		var h = this.register.h;
		var type_h = h;
		var type_keys = Object.keys(h);
		var type_length = type_keys.length;
		var type_current = 0;
		while(type_current < type_length) {
			var type = type_h[type_keys[type_current++]];
			this.put(stx_schema_Schema.resolve(type,this));
		}
		return this;
	}
	,__class__: stx_schema_SchemataCls
};
var stx_schema_Schemata = {};
stx_schema_Schemata.__properties__ = {get_self:"get_self"};
stx_schema_Schemata._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_Schemata.make = function(schemas) {
	var self = stx_schema_Schemata.unit();
	var _g_current = 0;
	var _g_array = schemas;
	while(_g_current < _g_array.length) {
		var schema = _g_array[_g_current++];
		self.put(schema);
	}
	return self;
};
stx_schema_Schemata.lift = function(self) {
	return stx_schema_Schemata._new(self);
};
stx_schema_Schemata.unit = function() {
	return stx_schema_Schemata.lift(new stx_schema_SchemataCls());
};
stx_schema_Schemata.prj = function(this1) {
	return this1;
};
stx_schema_Schemata.get_self = function(this1) {
	return stx_schema_Schemata.lift(this1);
};
var stx_schema_Test = function() { };
$hxClasses["stx.schema.Test"] = stx_schema_Test;
stx_schema_Test.__name__ = "stx.schema.Test";
stx_schema_Test.main = function() {
	var this1 = stx_Log.ZERO;
	var log = stx_log_logger_Global.get_ZERO();
	log.includes.push("**/*");
	stx_Test.test(stx_nano_Wildcard.__,[new stx_schema_test_SchemaTest()],[stx_schema_test_SchemaTest]);
};
var stx_schema_ValidationSum = $hxEnums["stx.schema.ValidationSum"] = { __ename__:"stx.schema.ValidationSum",__constructs__:null
	,ValidationExpr: ($_=function(expr) { return {_hx_index:0,expr:expr,__enum__:"stx.schema.ValidationSum",toString:$estr}; },$_._hx_name="ValidationExpr",$_.__params__ = ["expr"],$_)
	,ValidationFunc: ($_=function(fn) { return {_hx_index:1,fn:fn,__enum__:"stx.schema.ValidationSum",toString:$estr}; },$_._hx_name="ValidationFunc",$_.__params__ = ["fn"],$_)
};
stx_schema_ValidationSum.__constructs__ = [stx_schema_ValidationSum.ValidationExpr,stx_schema_ValidationSum.ValidationFunc];
var stx_schema_Validation = {};
stx_schema_Validation.__properties__ = {get_self:"get_self"};
stx_schema_Validation._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_Validation.lift = function(self) {
	return stx_schema_Validation._new(self);
};
stx_schema_Validation.lfold = function(this1,value,type) {
	switch(this1._hx_index) {
	case 0:
		var expr = this1.expr;
		try {
			return (stx_schema_Script.interp().execute(expr))(value,type);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/Validation.hx", lineNumber : 16, className : "stx.schema._Validation.Validation_Impl_", methodName : "lfold"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_ValidationError(this1,stx_fail_SchemaFailure.E_Schema_Dynamic(e))));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this2);
		}
		break;
	case 1:
		var fn = this1.fn;
		return fn(value,type);
	}
};
stx_schema_Validation.fromValidationExpr = function(self) {
	return stx_schema_Validation.lift(stx_schema_ValidationSum.ValidationExpr(self));
};
stx_schema_Validation.fromValidationFun = function(self) {
	return stx_schema_Validation.lift(stx_schema_ValidationSum.ValidationFunc(self));
};
stx_schema_Validation.prj = function(this1) {
	return this1;
};
stx_schema_Validation.get_self = function(this1) {
	return stx_schema_Validation.lift(this1);
};
var stx_schema_Validations = {};
stx_schema_Validations.__properties__ = {get_self:"get_self"};
stx_schema_Validations._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_Validations.lift = function(self) {
	return stx_schema_Validations._new(self);
};
stx_schema_Validations.unit = function() {
	return stx_schema_Validations.lift(stx_nano_Cluster.unit());
};
stx_schema_Validations.prj = function(this1) {
	return this1;
};
stx_schema_Validations.get_self = function(this1) {
	return stx_schema_Validations.lift(this1);
};
stx_schema_Validations.fromArray = function(self) {
	return stx_schema_Validations.lift(stx_nano_Cluster.lift(self));
};
stx_schema_Validations.fromValidationSum = function(self) {
	return stx_schema_Validations.lift(stx_nano_Cluster.lift([self]));
};
var stx_schema_ValidationsLift = function() { };
$hxClasses["stx.schema.ValidationsLift"] = stx_schema_ValidationsLift;
stx_schema_ValidationsLift.__name__ = "stx.schema.ValidationsLift";
stx_schema_ValidationsLift.lfold = function(self,value,type) {
	var f = null;
	return stx_nano_Cluster._.lfold(self,function(next,memo) {
		return stx_nano_ReportLift.concat(memo,stx_schema_Validation.lfold(next,value,type));
	},f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/Validations.hx", lineNumber : 25, className : "stx.schema.ValidationsLift", methodName : "lfold"}))));
};
stx_schema_ValidationsLift.concat = function(self,that) {
	return stx_nano_Cluster._.concat(self,stx_nano_Cluster.toIterable(that));
};
var stx_schema_core_Context = function() {
	stx_pico_Clazz.call(this);
	this.register = new haxe_ds_StringMap();
	this.put(new stx_schema_core_type_term_TypeBool().toType());
	this.put(new stx_schema_core_type_term_TypeFloat().toType());
	this.put(new stx_schema_core_type_term_TypeInt().toType());
	this.put(new stx_schema_core_type_term_TypeString().toType());
	this.index = 0;
};
$hxClasses["stx.schema.core.Context"] = stx_schema_core_Context;
stx_schema_core_Context.__name__ = "stx.schema.core.Context";
stx_schema_core_Context.make = function() {
	return new stx_schema_core_Context();
};
stx_schema_core_Context.unit = function() {
	return new stx_schema_core_Context();
};
stx_schema_core_Context.__super__ = stx_pico_Clazz;
stx_schema_core_Context.prototype = $extend(stx_pico_Clazz.prototype,{
	register: null
	,index: null
	,put: function(type) {
		var _this = this.register;
		var key = type.toString();
		_this.h[key] = type;
	}
	,next: function() {
		var n = this.index;
		this.index += 1;
		return n;
	}
	,get: function(identity) {
		var _this = this.register;
		var key = stx_schema_core_Identity.toString(identity);
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,_this.h[key]);
	}
	,has: function(type) {
		var _this = this.register;
		var key = type.toString();
		return Object.prototype.hasOwnProperty.call(_this.h,key);
	}
	,__class__: stx_schema_core_Context
});
var stx_schema_core_Identity = {};
stx_schema_core_Identity.__properties__ = {get_self:"get_self"};
stx_schema_core_Identity._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_Identity.lift = function(self) {
	return stx_schema_core_Identity._new(self);
};
stx_schema_core_Identity.prj = function(this1) {
	return this1;
};
stx_schema_core_Identity.get_self = function(this1) {
	return stx_schema_core_Identity.lift(this1);
};
stx_schema_core_Identity.make = function(ident,lhs,rhs) {
	return stx_schema_core_Identity.lift({ name : ident.name, pack : ident.pack, lhs : lhs, rhs : rhs});
};
stx_schema_core_Identity.toString = function(this1) {
	var code = stx_nano_Ident.toIdentifier(this1);
	var rest;
	var _g = this1.lhs;
	var _g1 = this1.rhs;
	switch(_g._hx_index) {
	case 0:
		var _g2 = _g.v;
		switch(_g1._hx_index) {
		case 0:
			var r = _g1.v;
			var l = _g2;
			rest = "(" + stx_schema_core_Identity.toString(l) + "," + stx_schema_core_Identity.toString(r) + ")";
			break;
		case 1:
			var l = _g2;
			rest = "(" + stx_schema_core_Identity.toString(l) + ",_)";
			break;
		}
		break;
	case 1:
		switch(_g1._hx_index) {
		case 0:
			var r = _g1.v;
			rest = "(_," + stx_schema_core_Identity.toString(r) + ")";
			break;
		case 1:
			rest = "(_,_)";
			break;
		}
		break;
	}
	return "" + (code == null ? "null" : stx_pico_Identifier.toString(code)) + rest;
};
stx_schema_core_Identity.fromIdent = function(self) {
	return stx_schema_core_Identity.make(self,haxe_ds_Option.None,haxe_ds_Option.None);
};
var stx_schema_core_Ref = {};
stx_schema_core_Ref.__properties__ = {get_value:"get_value"};
stx_schema_core_Ref.get_value = function(this1) {
	return this1.pop();
};
stx_schema_core_Ref._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_Ref.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_Ref.make = function(fn) {
	return stx_schema_core_Ref.lift({ pop : fn, toString : function() {
		return fn().toString();
	}});
};
stx_schema_core_Ref.toString = function(this1) {
	return "@:[" + Std.string(this1.pop()) + "]";
};
stx_schema_core_Ref.pure = function(v) {
	return stx_schema_core_Ref.make(function() {
		return v;
	});
};
var stx_schema_core_TypeSum = $hxEnums["stx.schema.core.TypeSum"] = { __ename__:"stx.schema.core.TypeSum",__constructs__:null
	,TData: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TData",$_.__params__ = ["t"],$_)
	,TAnon: ($_=function(t) { return {_hx_index:1,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TAnon",$_.__params__ = ["t"],$_)
	,TRecord: ($_=function(t) { return {_hx_index:2,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TRecord",$_.__params__ = ["t"],$_)
	,TGeneric: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TGeneric",$_.__params__ = ["t"],$_)
	,TUnion: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TUnion",$_.__params__ = ["t"],$_)
	,TLink: ($_=function(t) { return {_hx_index:5,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TLink",$_.__params__ = ["t"],$_)
	,TEnum: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"stx.schema.core.TypeSum",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["t"],$_)
	,TMono: {_hx_name:"TMono",_hx_index:7,__enum__:"stx.schema.core.TypeSum",toString:$estr}
};
stx_schema_core_TypeSum.__constructs__ = [stx_schema_core_TypeSum.TData,stx_schema_core_TypeSum.TAnon,stx_schema_core_TypeSum.TRecord,stx_schema_core_TypeSum.TGeneric,stx_schema_core_TypeSum.TUnion,stx_schema_core_TypeSum.TLink,stx_schema_core_TypeSum.TEnum,stx_schema_core_TypeSum.TMono];
var stx_schema_core_TypeCls = function(data) {
	this.data = data;
};
$hxClasses["stx.schema.core.TypeCls"] = stx_schema_core_TypeCls;
stx_schema_core_TypeCls.__name__ = "stx.schema.core.TypeCls";
stx_schema_core_TypeCls.prototype = {
	data: null
	,toString: function() {
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 1:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 2:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 3:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 4:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 5:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 6:
			var t = _g.t;
			return stx_schema_core_Ref.toString(t);
		case 7:
			return "MONO";
		}
	}
	,get_validation: function() {
		var self = this.data;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return t.pop().get_validation();
		case 1:
			var t = self.t;
			return t.pop().get_validation();
		case 2:
			var t = self.t;
			return t.pop().get_validation();
		case 3:
			var t = self.t;
			return t.pop().get_validation();
		case 4:
			var t = self.t;
			return t.pop().get_validation();
		case 5:
			var t = self.t;
			return t.pop().get_validation();
		case 6:
			var t = self.t;
			return t.pop().get_validation();
		case 7:
			return null;
		}
	}
	,get_name: function() {
		var self = this.data;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return t.pop().name;
		case 1:
			var t = self.t;
			var t1 = t.pop();
			return null;
		case 2:
			var t = self.t;
			return t.pop().name;
		case 3:
			var t = self.t;
			return t.pop().name;
		case 4:
			var t = self.t;
			return t.pop().name;
		case 5:
			var t = self.t;
			var t1 = t.pop();
			return null;
		case 6:
			var t = self.t;
			return t.pop().name;
		case 7:
			return null;
		}
	}
	,get_pack: function() {
		var self = this.data;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return t.pop().pack;
		case 1:
			var t = self.t;
			var t1 = t.pop();
			return stx_nano_Cluster.unit();
		case 2:
			var t = self.t;
			return t.pop().pack;
		case 3:
			var t = self.t;
			return t.pop().pack;
		case 4:
			var t = self.t;
			return t.pop().pack;
		case 5:
			var t = self.t;
			var t1 = t.pop();
			return stx_nano_Cluster.unit();
		case 6:
			var t = self.t;
			return t.pop().pack;
		case 7:
			return stx_nano_Cluster.unit();
		}
	}
	,get_debrujin: function() {
		var self = this.data;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return t.pop().get_debrujin();
		case 1:
			var t = self.t;
			return t.pop().get_debrujin();
		case 2:
			var t = self.t;
			return t.pop().get_debrujin();
		case 3:
			var t = self.t;
			return t.pop().get_debrujin();
		case 4:
			var t = self.t;
			return t.pop().get_debrujin();
		case 5:
			var t = self.t;
			return t.pop().get_debrujin();
		case 6:
			var t = self.t;
			return t.pop().get_debrujin();
		case 7:
			return -1;
		}
	}
	,register: function(state) {
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var t = _g.t;
			return t.pop().register(state);
		case 1:
			var t = _g.t;
			return t.pop().register(state);
		case 2:
			var t = _g.t;
			return t.pop().register(state);
		case 3:
			var t = _g.t;
			return t.pop().register(state);
		case 4:
			var t = _g.t;
			return t.pop().register(state);
		case 5:
			var t = _g.t;
			return t.pop().register(state);
		case 6:
			var t = _g.t;
			return t.pop().register(state);
		case 7:
			return new stx_schema_core_TypeCls(stx_schema_core_TypeSum.TMono);
		}
	}
	,identity: function() {
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var t = _g.t;
			return t.pop().identity();
		case 1:
			var t = _g.t;
			return t.pop().identity();
		case 2:
			var t = _g.t;
			return t.pop().identity();
		case 3:
			var t = _g.t;
			return t.pop().identity();
		case 4:
			var t = _g.t;
			return t.pop().identity();
		case 5:
			var t = _g.t;
			return t.pop().identity();
		case 6:
			var t = _g.t;
			return t.pop().identity();
		case 7:
			return stx_schema_core_Identity.fromIdent(stx_nano_Ident.make("TMono"));
		}
	}
	,is_anon: function() {
		var _g = this.data;
		if(_g._hx_index == 1) {
			var _g1 = _g.t;
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_schema_core_TypeCls
	,__properties__: {get_debrujin:"get_debrujin",get_pack:"get_pack",get_name:"get_name",get_validation:"get_validation"}
};
var stx_schema_core_TypeLift = function() { };
$hxClasses["stx.schema.core.TypeLift"] = stx_schema_core_TypeLift;
stx_schema_core_TypeLift.__name__ = "stx.schema.core.TypeLift";
stx_schema_core_TypeLift.fold = function(self,data,anon,record,generic,union,link,_enum,mono) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return data(t.pop());
	case 1:
		var t = self.t;
		return anon(t.pop());
	case 2:
		var t = self.t;
		return record(t.pop());
	case 3:
		var t = self.t;
		return generic(t.pop());
	case 4:
		var t = self.t;
		return union(t.pop());
	case 5:
		var t = self.t;
		return link(t.pop());
	case 6:
		var t = self.t;
		return _enum(t.pop());
	case 7:
		return mono();
	}
};
stx_schema_core_TypeLift.LeafType = function(name,pack) {
	return stx_schema_core_type_LeafType.make(name,pack);
};
stx_schema_core_TypeLift.RecordType = function(name,pack,fields) {
	return stx_schema_core_type_RecordType.make(name,pack,fields);
};
stx_schema_core_TypeLift.AnonType = function(fields) {
	return stx_schema_core_type_AnonType.make(fields);
};
stx_schema_core_TypeLift.GenericType = function(name,pack,inner) {
	return stx_schema_core_type_GenericType.make(name,pack,inner);
};
stx_schema_core_TypeLift.LinkType = function(into,relation,from) {
	return stx_schema_core_type_LinkType.make(into,relation,from);
};
stx_schema_core_TypeLift.UnionType = function(name,pack,lhs,rhs) {
	return stx_schema_core_type_UnionType.make(name,pack,lhs,rhs);
};
var stx_schema_core_Type = {};
stx_schema_core_Type.__properties__ = {get_self:"get_self"};
stx_schema_core_Type._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_Type.lift = function(self) {
	return stx_schema_core_Type._new(self);
};
stx_schema_core_Type.make = function(self) {
	return stx_schema_core_Type.lift(new stx_schema_core_TypeCls(self));
};
stx_schema_core_Type.prj = function(this1) {
	return this1;
};
stx_schema_core_Type.get_self = function(this1) {
	return stx_schema_core_Type.lift(this1);
};
stx_schema_core_Type.Array = function(self) {
	return stx_schema_core_type_term_TypeArray.make(self).toType();
};
stx_schema_core_Type.Bool = function() {
	return new stx_schema_core_type_term_TypeBool().toType();
};
stx_schema_core_Type.Float = function() {
	return new stx_schema_core_type_term_TypeFloat().toType();
};
stx_schema_core_Type.Int = function() {
	return new stx_schema_core_type_term_TypeInt().toType();
};
stx_schema_core_Type.String = function() {
	return new stx_schema_core_type_term_TypeString().toType();
};
stx_schema_core_Type.Null = function(self) {
	return stx_schema_core_type_term_TypeNull.make(self).toType();
};
stx_schema_core_Type.Mono = function() {
	return stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TMono);
};
stx_schema_core_Type.fromTypeSum = function(self) {
	return stx_schema_core_Type.lift(new stx_schema_core_TypeCls(self));
};
stx_schema_core_Type.LeafType = function(name,pack) {
	return stx_schema_core_Type._.LeafType(name,pack).toType();
};
stx_schema_core_Type.RecordType = function(name,pack,fields) {
	return stx_schema_core_Type._.RecordType(name,pack,fields).toType();
};
stx_schema_core_Type.AnonType = function(fields) {
	return stx_schema_core_Type._.AnonType(fields).toType();
};
stx_schema_core_Type.GenericType = function(name,pack,inner) {
	return stx_schema_core_Type._.GenericType(name,pack,inner).toType();
};
stx_schema_core_Type.LinkType = function(into,relation,from) {
	return stx_schema_core_Type._.LinkType(into,relation,from).toType();
};
stx_schema_core_Type.UnionType = function(name,pack,lhs,rhs) {
	return stx_schema_core_Type._.UnionType(name,pack,lhs,rhs).toType();
};
var stx_schema_core_WithValidationApi = function() { };
$hxClasses["stx.schema.core.WithValidationApi"] = stx_schema_core_WithValidationApi;
stx_schema_core_WithValidationApi.__name__ = "stx.schema.core.WithValidationApi";
stx_schema_core_WithValidationApi.__isInterface__ = true;
stx_schema_core_WithValidationApi.prototype = {
	validation: null
	,get_validation: null
	,__class__: stx_schema_core_WithValidationApi
	,__properties__: {get_validation:"get_validation"}
};
var stx_schema_core_WithValidationCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.schema.core.WithValidationCls"] = stx_schema_core_WithValidationCls;
stx_schema_core_WithValidationCls.__name__ = "stx.schema.core.WithValidationCls";
stx_schema_core_WithValidationCls.__interfaces__ = [stx_schema_core_WithValidationApi];
stx_schema_core_WithValidationCls.__super__ = stx_pico_Clazz;
stx_schema_core_WithValidationCls.prototype = $extend(stx_pico_Clazz.prototype,{
	validation: null
	,get_validation: null
	,__class__: stx_schema_core_WithValidationCls
	,__properties__: {get_validation:"get_validation"}
});
var stx_schema_core_type_Has_$toStringApi = function() { };
$hxClasses["stx.schema.core.type.Has_toStringApi"] = stx_schema_core_type_Has_$toStringApi;
stx_schema_core_type_Has_$toStringApi.__name__ = "stx.schema.core.type.Has_toStringApi";
stx_schema_core_type_Has_$toStringApi.__isInterface__ = true;
stx_schema_core_type_Has_$toStringApi.prototype = {
	toString: null
	,__class__: stx_schema_core_type_Has_$toStringApi
};
var stx_schema_core_type_BaseTypeApi = function() { };
$hxClasses["stx.schema.core.type.BaseTypeApi"] = stx_schema_core_type_BaseTypeApi;
stx_schema_core_type_BaseTypeApi.__name__ = "stx.schema.core.type.BaseTypeApi";
stx_schema_core_type_BaseTypeApi.__isInterface__ = true;
stx_schema_core_type_BaseTypeApi.__interfaces__ = [stx_schema_core_type_Has_$toStringApi];
stx_schema_core_type_BaseTypeApi.prototype = {
	debrujin: null
	,get_debrujin: null
	,validation: null
	,get_validation: null
	,status: null
	,identity: null
	,toType: null
	,register: null
	,__class__: stx_schema_core_type_BaseTypeApi
	,__properties__: {get_validation:"get_validation",get_debrujin:"get_debrujin"}
};
var stx_schema_core_type_AnonTypeApi = function() { };
$hxClasses["stx.schema.core.type.AnonTypeApi"] = stx_schema_core_type_AnonTypeApi;
stx_schema_core_type_AnonTypeApi.__name__ = "stx.schema.core.type.AnonTypeApi";
stx_schema_core_type_AnonTypeApi.__isInterface__ = true;
stx_schema_core_type_AnonTypeApi.__interfaces__ = [stx_schema_core_type_BaseTypeApi];
stx_schema_core_type_AnonTypeApi.prototype = {
	fields: null
	,__class__: stx_schema_core_type_AnonTypeApi
};
var stx_schema_core_type_Has_$toStringCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.schema.core.type.Has_toStringCls"] = stx_schema_core_type_Has_$toStringCls;
stx_schema_core_type_Has_$toStringCls.__name__ = "stx.schema.core.type.Has_toStringCls";
stx_schema_core_type_Has_$toStringCls.__super__ = stx_pico_Clazz;
stx_schema_core_type_Has_$toStringCls.prototype = $extend(stx_pico_Clazz.prototype,{
	toString: null
	,__class__: stx_schema_core_type_Has_$toStringCls
});
var stx_schema_core_type_BaseTypeCls = function() {
	stx_schema_core_type_Has_$toStringCls.call(this);
	this.status = "TYPE_UNTOUCHED";
};
$hxClasses["stx.schema.core.type.BaseTypeCls"] = stx_schema_core_type_BaseTypeCls;
stx_schema_core_type_BaseTypeCls.__name__ = "stx.schema.core.type.BaseTypeCls";
stx_schema_core_type_BaseTypeCls.__interfaces__ = [stx_schema_core_type_BaseTypeApi];
stx_schema_core_type_BaseTypeCls.__super__ = stx_schema_core_type_Has_$toStringCls;
stx_schema_core_type_BaseTypeCls.prototype = $extend(stx_schema_core_type_Has_$toStringCls.prototype,{
	status: null
	,validation: null
	,get_validation: function() {
		return stx_nano_Cluster.unit();
	}
	,debrujin: null
	,get_debrujin: function() {
		return 1;
	}
	,toType: null
	,identity: null
	,register: null
	,__class__: stx_schema_core_type_BaseTypeCls
	,__properties__: {get_debrujin:"get_debrujin",get_validation:"get_validation"}
});
var stx_schema_core_type_AnonTypeCls = function(fields,uuid) {
	stx_schema_core_type_BaseTypeCls.call(this);
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,uuid);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		var _g = function(value) {
			return stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,value);
		};
		var value = "xxxxx";
		tmp = (function() {
			return _g(value);
		})();
	}
	this.uuid = tmp;
	this.fields = fields;
	this.debrujin = 1;
};
$hxClasses["stx.schema.core.type.AnonTypeCls"] = stx_schema_core_type_AnonTypeCls;
stx_schema_core_type_AnonTypeCls.__name__ = "stx.schema.core.type.AnonTypeCls";
stx_schema_core_type_AnonTypeCls.__interfaces__ = [stx_schema_core_type_AnonTypeApi];
stx_schema_core_type_AnonTypeCls.__super__ = stx_schema_core_type_BaseTypeCls;
stx_schema_core_type_AnonTypeCls.prototype = $extend(stx_schema_core_type_BaseTypeCls.prototype,{
	uuid: null
	,fields: null
	,toString: function() {
		var arr = [];
		var access = this.fields.pop();
		var _g_access = access;
		var _g_keys = Reflect.fields(access);
		var _g_index = 0;
		while(_g_index < _g_keys.length) {
			var key = _g_keys[_g_index++];
			var _g1_value = _g_access[key];
			var _g1_key = key;
			var k = _g1_key;
			var v = _g1_value;
			arr.push("" + k + " => " + stx_schema_core_type_Field.toString(v));
		}
		return arr.join(",");
	}
	,get_validation: function() {
		return stx_nano_Cluster.unit();
	}
	,toType: function() {
		var v = this;
		return stx_schema_core_Type.make(stx_schema_core_TypeSum.TAnon(stx_schema_core_Ref.make(function() {
			return v;
		})));
	}
	,register: function(state) {
		var next = null;
		var type = stx_schema_core_Ref.make(function() {
			return next;
		});
		state.put(stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TAnon(type)));
		var fs = stx_nano_IterLift.lfold(stx_nano_IterKV.toIter(stx_nano_Ensemble.toIterKV(this.fields.pop())),function(next,memo) {
			var id = next.val.type.identity();
			var type = stx_pico_OptionLift.fudge(state.get(id),function(f) {
				return f.of(stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(id));
			});
			return stx_nano_Ensemble.set(memo,next.key,stx_schema_core_type_Field.make(type));
		},stx_nano_Ensemble.unit());
		var v = fs;
		next = new stx_schema_core_type_AnonTypeCls(stx_nano_Cell.make(function() {
			return v;
		}),this.uuid);
		return next.toType();
	}
	,identity: function() {
		return stx_schema_core_Identity.fromIdent(stx_nano_Ident.make(this.uuid));
	}
	,__class__: stx_schema_core_type_AnonTypeCls
});
var stx_schema_core_type_AnonType = {};
stx_schema_core_type_AnonType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_AnonType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_AnonType.lift = function(self) {
	return stx_schema_core_type_AnonType._new(self);
};
stx_schema_core_type_AnonType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_AnonType.get_self = function(this1) {
	return stx_schema_core_type_AnonType.lift(this1);
};
stx_schema_core_type_AnonType.make = function(fields) {
	return stx_schema_core_type_AnonType.lift(new stx_schema_core_type_AnonTypeCls(fields));
};
var stx_schema_core_type_DataTypeApi = function() { };
$hxClasses["stx.schema.core.type.DataTypeApi"] = stx_schema_core_type_DataTypeApi;
stx_schema_core_type_DataTypeApi.__name__ = "stx.schema.core.type.DataTypeApi";
stx_schema_core_type_DataTypeApi.__isInterface__ = true;
stx_schema_core_type_DataTypeApi.__interfaces__ = [stx_schema_core_type_BaseTypeApi];
stx_schema_core_type_DataTypeApi.prototype = {
	name: null
	,pack: null
	,__class__: stx_schema_core_type_DataTypeApi
};
var stx_schema_core_type_DataTypeCls = function(name,pack) {
	stx_schema_core_type_BaseTypeCls.call(this);
	this.name = name;
	this.pack = stx_nano_Way.lift(pack);
};
$hxClasses["stx.schema.core.type.DataTypeCls"] = stx_schema_core_type_DataTypeCls;
stx_schema_core_type_DataTypeCls.__name__ = "stx.schema.core.type.DataTypeCls";
stx_schema_core_type_DataTypeCls.__interfaces__ = [stx_schema_core_type_DataTypeApi];
stx_schema_core_type_DataTypeCls.__super__ = stx_schema_core_type_BaseTypeCls;
stx_schema_core_type_DataTypeCls.prototype = $extend(stx_schema_core_type_BaseTypeCls.prototype,{
	name: null
	,pack: null
	,identity: function() {
		return stx_schema_core_Identity.fromIdent(stx_nano_Ident.make(this.name,this.pack));
	}
	,toType: function() {
		var v = this;
		return stx_schema_core_Type.make(stx_schema_core_TypeSum.TData(stx_schema_core_Ref.make(function() {
			return v;
		})));
	}
	,__class__: stx_schema_core_type_DataTypeCls
});
var stx_schema_core_type_DataType = {};
stx_schema_core_type_DataType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_DataType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_DataType.lift = function(self) {
	return stx_schema_core_type_DataType._new(self);
};
stx_schema_core_type_DataType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_DataType.get_self = function(this1) {
	return stx_schema_core_type_DataType.lift(this1);
};
var stx_schema_core_type_EnumTypeApi = function() { };
$hxClasses["stx.schema.core.type.EnumTypeApi"] = stx_schema_core_type_EnumTypeApi;
stx_schema_core_type_EnumTypeApi.__name__ = "stx.schema.core.type.EnumTypeApi";
stx_schema_core_type_EnumTypeApi.__isInterface__ = true;
stx_schema_core_type_EnumTypeApi.__interfaces__ = [stx_schema_core_type_DataTypeApi];
stx_schema_core_type_EnumTypeApi.prototype = {
	constructors: null
	,__class__: stx_schema_core_type_EnumTypeApi
};
var stx_schema_core_type_EnumTypeCls = function(name,pack,constructors) {
	stx_schema_core_type_DataTypeCls.call(this,name,pack);
	this.constructors = constructors;
};
$hxClasses["stx.schema.core.type.EnumTypeCls"] = stx_schema_core_type_EnumTypeCls;
stx_schema_core_type_EnumTypeCls.__name__ = "stx.schema.core.type.EnumTypeCls";
stx_schema_core_type_EnumTypeCls.__interfaces__ = [stx_schema_core_type_EnumTypeApi];
stx_schema_core_type_EnumTypeCls.__super__ = stx_schema_core_type_DataTypeCls;
stx_schema_core_type_EnumTypeCls.prototype = $extend(stx_schema_core_type_DataTypeCls.prototype,{
	constructors: null
	,register: function(state) {
		state.put(this.toType());
		return this.toType();
	}
	,toType: function() {
		var v = stx_schema_core_type_EnumType.lift(this);
		return stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TEnum(stx_schema_core_Ref.make(function() {
			return v;
		})));
	}
	,toString: function() {
		return stx_schema_core_Identity.toString(this.identity());
	}
	,__class__: stx_schema_core_type_EnumTypeCls
});
var stx_schema_core_type_EnumType = {};
stx_schema_core_type_EnumType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_EnumType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_EnumType.lift = function(self) {
	return stx_schema_core_type_EnumType._new(self);
};
stx_schema_core_type_EnumType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_EnumType.get_self = function(this1) {
	return stx_schema_core_type_EnumType.lift(this1);
};
var stx_schema_core_type_Field = {};
stx_schema_core_type_Field.__properties__ = {get_self:"get_self"};
stx_schema_core_type_Field._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_Field.lift = function(self) {
	return stx_schema_core_type_Field._new(self);
};
stx_schema_core_type_Field.make = function(type) {
	return stx_schema_core_type_Field.lift({ type : type, toString : function() {
		return type.toString();
	}});
};
stx_schema_core_type_Field.prj = function(this1) {
	return this1;
};
stx_schema_core_type_Field.get_self = function(this1) {
	return stx_schema_core_type_Field.lift(this1);
};
stx_schema_core_type_Field.fromType = function(self) {
	return stx_schema_core_type_Field.lift({ type : self, toString : function() {
		return self.toString();
	}});
};
stx_schema_core_type_Field.toString = function(this1) {
	return this1.type.toString();
};
var stx_schema_core_type_GenericTypeApi = function() { };
$hxClasses["stx.schema.core.type.GenericTypeApi"] = stx_schema_core_type_GenericTypeApi;
stx_schema_core_type_GenericTypeApi.__name__ = "stx.schema.core.type.GenericTypeApi";
stx_schema_core_type_GenericTypeApi.__isInterface__ = true;
stx_schema_core_type_GenericTypeApi.__interfaces__ = [stx_schema_core_type_DataTypeApi];
stx_schema_core_type_GenericTypeApi.prototype = {
	type: null
	,__class__: stx_schema_core_type_GenericTypeApi
};
var stx_schema_core_type_GenericTypeCls = function(name,pack,type) {
	stx_schema_core_type_DataTypeCls.call(this,name,pack);
	this.type = type;
};
$hxClasses["stx.schema.core.type.GenericTypeCls"] = stx_schema_core_type_GenericTypeCls;
stx_schema_core_type_GenericTypeCls.__name__ = "stx.schema.core.type.GenericTypeCls";
stx_schema_core_type_GenericTypeCls.__interfaces__ = [stx_schema_core_type_GenericTypeApi];
stx_schema_core_type_GenericTypeCls.__super__ = stx_schema_core_type_DataTypeCls;
stx_schema_core_type_GenericTypeCls.prototype = $extend(stx_schema_core_type_DataTypeCls.prototype,{
	type: null
	,toString: function() {
		return stx_schema_core_Identity.toString(this.identity());
	}
	,toType: function() {
		var v = this;
		return stx_schema_core_Type.make(stx_schema_core_TypeSum.TGeneric(stx_schema_core_Ref.make(function() {
			return v;
		})));
	}
	,register: function(state) {
		var _gthis = this;
		var next = null;
		var t = stx_schema_core_Ref.make(function() {
			return next;
		});
		state.put(stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TGeneric(t)));
		var self = state.get(this.type.identity());
		var tI;
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			tI = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
			break;
		case 1:
			tI = stx_nano_lift_LiftNano.if_else(_gthis.type.is_anon(),function() {
				return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,_gthis.type.register(state));
			},function() {
				return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,null);
			});
			break;
		}
		var tI1 = stx_pico_OptionLift.fudge(tI,function(f) {
			var tI = stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(_gthis.identity());
			return f.of(tI);
		});
		next = new stx_schema_core_type_GenericTypeCls(this.name,stx_nano_Way.toArray(this.pack),tI1);
		return next.toType();
	}
	,identity: function() {
		var ident = stx_nano_Ident.make(this.name,this.pack);
		return stx_schema_core_Identity.make(ident,stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.type.identity()),haxe_ds_Option.None);
	}
	,__class__: stx_schema_core_type_GenericTypeCls
});
var stx_schema_core_type_GenericType = {};
stx_schema_core_type_GenericType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_GenericType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_GenericType.lift = function(self) {
	return stx_schema_core_type_GenericType._new(self);
};
stx_schema_core_type_GenericType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_GenericType.get_self = function(this1) {
	return stx_schema_core_type_GenericType.lift(this1);
};
stx_schema_core_type_GenericType.make = function(name,pack,inner) {
	return stx_schema_core_type_GenericType.lift(new stx_schema_core_type_GenericTypeCls(name,pack,inner));
};
var stx_schema_core_type_LeafType = function(name,pack) {
	stx_schema_core_type_DataTypeCls.call(this,name,pack == null ? [] : pack);
	this.status = "TYPE_COMPLETED";
};
$hxClasses["stx.schema.core.type.LeafType"] = stx_schema_core_type_LeafType;
stx_schema_core_type_LeafType.__name__ = "stx.schema.core.type.LeafType";
stx_schema_core_type_LeafType.make = function(name,pack) {
	return new stx_schema_core_type_LeafType(name,pack);
};
stx_schema_core_type_LeafType.__super__ = stx_schema_core_type_DataTypeCls;
stx_schema_core_type_LeafType.prototype = $extend(stx_schema_core_type_DataTypeCls.prototype,{
	toString: function() {
		return stx_schema_core_Identity.toString(this.identity());
	}
	,register: function(state) {
		state.put(this.toType());
		return this.toType();
	}
	,__class__: stx_schema_core_type_LeafType
});
var stx_schema_core_type_LinkTypeApi = function() { };
$hxClasses["stx.schema.core.type.LinkTypeApi"] = stx_schema_core_type_LinkTypeApi;
stx_schema_core_type_LinkTypeApi.__name__ = "stx.schema.core.type.LinkTypeApi";
stx_schema_core_type_LinkTypeApi.__isInterface__ = true;
stx_schema_core_type_LinkTypeApi.__interfaces__ = [stx_schema_core_type_BaseTypeApi];
stx_schema_core_type_LinkTypeApi.prototype = {
	into: null
	,relation: null
	,inverse: null
	,__class__: stx_schema_core_type_LinkTypeApi
};
var stx_schema_core_type_LinkTypeCls = function(into,relation,inverse) {
	stx_schema_core_type_BaseTypeCls.call(this);
	this.into = into;
	this.relation = relation;
	this.inverse = inverse;
};
$hxClasses["stx.schema.core.type.LinkTypeCls"] = stx_schema_core_type_LinkTypeCls;
stx_schema_core_type_LinkTypeCls.__name__ = "stx.schema.core.type.LinkTypeCls";
stx_schema_core_type_LinkTypeCls.__interfaces__ = [stx_schema_core_type_LinkTypeApi];
stx_schema_core_type_LinkTypeCls.__super__ = stx_schema_core_type_BaseTypeCls;
stx_schema_core_type_LinkTypeCls.prototype = $extend(stx_schema_core_type_BaseTypeCls.prototype,{
	into: null
	,relation: null
	,inverse: null
	,toType: function() {
		var v = this;
		return stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TLink(stx_schema_core_Ref.make(function() {
			return v;
		})));
	}
	,toString: function() {
		return "" + Std.string(this.relation) + " " + Std.string(this.into) + " " + this.inverse;
	}
	,register: function(state) {
		var _gthis = this;
		var next = null;
		var t = stx_schema_core_Ref.make(function() {
			return next;
		});
		state.put(stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TLink(t)));
		var self = state.get(this.into.identity());
		var tI;
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			tI = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
			break;
		case 1:
			tI = stx_nano_lift_LiftNano.if_else(_gthis.into.is_anon(),function() {
				return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,_gthis.into.register(state));
			},function() {
				return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,null);
			});
			break;
		}
		var tI1 = stx_pico_OptionLift.fudge(tI,function(f) {
			var tI = stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(_gthis.identity());
			return f.of(tI);
		});
		next = new stx_schema_core_type_LinkTypeCls(tI1,this.relation,this.inverse);
		return next.toType();
	}
	,identity: function() {
		var ident = stx_nano_Ident.make("Link",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])));
		return stx_schema_core_Identity.make(ident,stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.into.identity()),haxe_ds_Option.None);
	}
	,__class__: stx_schema_core_type_LinkTypeCls
});
var stx_schema_core_type_LinkType = {};
stx_schema_core_type_LinkType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_LinkType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_LinkType.lift = function(self) {
	return stx_schema_core_type_LinkType._new(self);
};
stx_schema_core_type_LinkType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_LinkType.get_self = function(this1) {
	return stx_schema_core_type_LinkType.lift(this1);
};
stx_schema_core_type_LinkType.make = function(into,relation,inverse) {
	return stx_schema_core_type_LinkType.lift(new stx_schema_core_type_LinkTypeCls(into,relation,inverse));
};
var stx_schema_core_type_RecordTypeApi = function() { };
$hxClasses["stx.schema.core.type.RecordTypeApi"] = stx_schema_core_type_RecordTypeApi;
stx_schema_core_type_RecordTypeApi.__name__ = "stx.schema.core.type.RecordTypeApi";
stx_schema_core_type_RecordTypeApi.__isInterface__ = true;
stx_schema_core_type_RecordTypeApi.__interfaces__ = [stx_schema_core_type_DataTypeApi];
stx_schema_core_type_RecordTypeApi.prototype = {
	fields: null
	,__class__: stx_schema_core_type_RecordTypeApi
};
var stx_schema_core_type_RecordTypeCls = function(name,pack,fields) {
	stx_schema_core_type_DataTypeCls.call(this,name,pack);
	this.fields = fields;
};
$hxClasses["stx.schema.core.type.RecordTypeCls"] = stx_schema_core_type_RecordTypeCls;
stx_schema_core_type_RecordTypeCls.__name__ = "stx.schema.core.type.RecordTypeCls";
stx_schema_core_type_RecordTypeCls.__interfaces__ = [stx_schema_core_type_RecordTypeApi];
stx_schema_core_type_RecordTypeCls.__super__ = stx_schema_core_type_DataTypeCls;
stx_schema_core_type_RecordTypeCls.prototype = $extend(stx_schema_core_type_DataTypeCls.prototype,{
	fields: null
	,get_validation: function() {
		return stx_nano_Cluster.unit();
	}
	,toString: function() {
		return stx_schema_core_Identity.toString(this.identity());
	}
	,register: function(state) {
		var next = null;
		var type = stx_schema_core_Ref.make(function() {
			return next;
		});
		state.put(stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TRecord(type)));
		var fs = stx_nano_IterLift.lfold(stx_nano_IterKV.toIter(stx_nano_Ensemble.toIterKV(this.fields.pop())),function(next,memo) {
			var id = next.val.type.identity();
			var type = stx_pico_OptionLift.fudge(state.get(id),function(f) {
				return f.of(stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(id));
			});
			return stx_nano_Ensemble.set(memo,next.key,stx_schema_core_type_Field.make(type));
		},stx_nano_Ensemble.unit());
		var v = fs;
		next = new stx_schema_core_type_RecordTypeCls(this.name,stx_nano_Way.toArray(this.pack),stx_nano_Cell.make(function() {
			return v;
		}));
		return next.toType();
	}
	,__class__: stx_schema_core_type_RecordTypeCls
});
var stx_schema_core_type_RecordType = {};
stx_schema_core_type_RecordType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_RecordType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_RecordType.lift = function(self) {
	return stx_schema_core_type_RecordType._new(self);
};
stx_schema_core_type_RecordType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_RecordType.get_self = function(this1) {
	return stx_schema_core_type_RecordType.lift(this1);
};
stx_schema_core_type_RecordType.make = function(name,pack,fields) {
	return stx_schema_core_type_RecordType.lift(new stx_schema_core_type_RecordTypeCls(name,pack,fields));
};
var stx_schema_core_type_TypeKind = $hxEnums["stx.schema.core.type.TypeKind"] = { __ename__:"stx.schema.core.type.TypeKind",__constructs__:null
};
stx_schema_core_type_TypeKind.__constructs__ = [];
var stx_schema_core_type_UnionTypeApi = function() { };
$hxClasses["stx.schema.core.type.UnionTypeApi"] = stx_schema_core_type_UnionTypeApi;
stx_schema_core_type_UnionTypeApi.__name__ = "stx.schema.core.type.UnionTypeApi";
stx_schema_core_type_UnionTypeApi.__isInterface__ = true;
stx_schema_core_type_UnionTypeApi.__interfaces__ = [stx_schema_core_type_DataTypeApi];
stx_schema_core_type_UnionTypeApi.prototype = {
	lhs: null
	,rhs: null
	,__class__: stx_schema_core_type_UnionTypeApi
};
var stx_schema_core_type_UnionTypeCls = function(name,pack,lhs,rhs) {
	stx_schema_core_type_DataTypeCls.call(this,name,pack);
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["stx.schema.core.type.UnionTypeCls"] = stx_schema_core_type_UnionTypeCls;
stx_schema_core_type_UnionTypeCls.__name__ = "stx.schema.core.type.UnionTypeCls";
stx_schema_core_type_UnionTypeCls.__interfaces__ = [stx_schema_core_type_UnionTypeApi];
stx_schema_core_type_UnionTypeCls.__super__ = stx_schema_core_type_DataTypeCls;
stx_schema_core_type_UnionTypeCls.prototype = $extend(stx_schema_core_type_DataTypeCls.prototype,{
	lhs: null
	,rhs: null
	,identity: function() {
		return stx_schema_core_Identity.make(stx_nano_Ident.make(this.name,this.pack),haxe_ds_Option.Some(this.lhs.identity()),haxe_ds_Option.Some(this.rhs.identity()));
	}
	,register: function(state) {
		var _gthis = this;
		var next = null;
		var t = stx_schema_core_Ref.make(function() {
			return next;
		});
		state.put(stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TUnion(t)));
		var l = stx_pico_OptionLift.fudge(state.get(this.lhs.identity()),function(f) {
			var l = stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(_gthis.lhs.identity());
			return f.of(l);
		});
		var r = stx_pico_OptionLift.fudge(state.get(this.rhs.identity()),function(f) {
			var r = stx_fail_SchemaFailure.E_Schema_IdentityUnresolved(_gthis.rhs.identity());
			return f.of(r);
		});
		next = new stx_schema_core_type_UnionTypeCls(this.name,stx_nano_Way.toArray(this.pack),l,r);
		var v = next;
		return stx_schema_core_Type.fromTypeSum(stx_schema_core_TypeSum.TUnion(stx_schema_core_Ref.make(function() {
			return v;
		})));
	}
	,toString: function() {
		return stx_schema_core_Identity.toString(this.identity());
	}
	,__class__: stx_schema_core_type_UnionTypeCls
});
var stx_schema_core_type_UnionType = {};
stx_schema_core_type_UnionType.__properties__ = {get_self:"get_self"};
stx_schema_core_type_UnionType._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_core_type_UnionType.lift = function(self) {
	return stx_schema_core_type_UnionType._new(self);
};
stx_schema_core_type_UnionType.prj = function(this1) {
	return this1;
};
stx_schema_core_type_UnionType.get_self = function(this1) {
	return stx_schema_core_type_UnionType.lift(this1);
};
stx_schema_core_type_UnionType.make = function(name,pack,lhs,rhs) {
	return stx_schema_core_type_UnionType.lift(new stx_schema_core_type_UnionTypeCls(name,pack,lhs,rhs));
};
var stx_schema_core_type_term_TypeArrayLift = function() { };
$hxClasses["stx.schema.core.type.term.TypeArrayLift"] = stx_schema_core_type_term_TypeArrayLift;
stx_schema_core_type_term_TypeArrayLift.__name__ = "stx.schema.core.type.term.TypeArrayLift";
stx_schema_core_type_term_TypeArrayLift.validate = function(value,type) {
	if(value == null) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeArray.hx", lineNumber : 18, className : "stx.schema.core.type.term.TypeArrayLift", methodName : "validate"})));
		}
	} else {
		var _g = type.data;
		if(_g._hx_index == 3) {
			var def = _g.t;
			var _e = def.pop().type.get_validation();
			var _g = function(value,type) {
				return stx_schema_ValidationsLift.lfold(_e,value,type);
			};
			var type1 = type;
			var fn = function(value) {
				return _g(value,type1);
			};
			var arr = value;
			var f = null;
			return stx_nano_ClusterLift.lfold(arr,function(next,memo) {
				return stx_nano_ReportLift.concat(memo,fn(next));
			},f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeArray.hx", lineNumber : 26, className : "stx.schema.core.type.term.TypeArrayLift", methodName : "validate"}))));
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeArray.hx", lineNumber : 28, className : "stx.schema.core.type.term.TypeArrayLift", methodName : "validate"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_WrongType(type)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		}
	}
};
var stx_schema_core_type_term_TypeArray = function(type) {
	stx_schema_core_type_GenericTypeCls.call(this,"Array",["std"],type);
};
$hxClasses["stx.schema.core.type.term.TypeArray"] = stx_schema_core_type_term_TypeArray;
stx_schema_core_type_term_TypeArray.__name__ = "stx.schema.core.type.term.TypeArray";
stx_schema_core_type_term_TypeArray.make = function(type) {
	return new stx_schema_core_type_term_TypeArray(type);
};
stx_schema_core_type_term_TypeArray.__super__ = stx_schema_core_type_GenericTypeCls;
stx_schema_core_type_term_TypeArray.prototype = $extend(stx_schema_core_type_GenericTypeCls.prototype,{
	get_validation: function() {
		return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationFunc(stx_schema_core_type_term_TypeArray._.validate)]);
	}
	,__class__: stx_schema_core_type_term_TypeArray
});
var stx_schema_core_type_term_TypeBoolLift = function() { };
$hxClasses["stx.schema.core.type.term.TypeBoolLift"] = stx_schema_core_type_term_TypeBoolLift;
stx_schema_core_type_term_TypeBoolLift.__name__ = "stx.schema.core.type.term.TypeBoolLift";
stx_schema_core_type_term_TypeBoolLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 3) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeBool.hx", lineNumber : 15, className : "stx.schema.core.type.term.TypeBoolLift", methodName : "validate"})));
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeBool.hx", lineNumber : 16, className : "stx.schema.core.type.term.TypeBoolLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TBool,x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_core_type_term_TypeBool = function() {
	stx_schema_core_type_LeafType.call(this,"Bool",["std"]);
};
$hxClasses["stx.schema.core.type.term.TypeBool"] = stx_schema_core_type_term_TypeBool;
stx_schema_core_type_term_TypeBool.__name__ = "stx.schema.core.type.term.TypeBool";
stx_schema_core_type_term_TypeBool.__super__ = stx_schema_core_type_LeafType;
stx_schema_core_type_term_TypeBool.prototype = $extend(stx_schema_core_type_LeafType.prototype,{
	get_validation: function() {
		return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationFunc(stx_schema_core_type_term_TypeBool._.validate)]);
	}
	,__class__: stx_schema_core_type_term_TypeBool
});
var stx_schema_core_type_term_TypeFloatLift = function() { };
$hxClasses["stx.schema.core.type.term.TypeFloatLift"] = stx_schema_core_type_term_TypeFloatLift;
stx_schema_core_type_term_TypeFloatLift.__name__ = "stx.schema.core.type.term.TypeFloatLift";
stx_schema_core_type_term_TypeFloatLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 2) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeFloat.hx", lineNumber : 16, className : "stx.schema.core.type.term.TypeFloatLift", methodName : "validate"})));
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeFloat.hx", lineNumber : 17, className : "stx.schema.core.type.term.TypeFloatLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TFloat,x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_core_type_term_TypeFloat = function() {
	stx_schema_core_type_LeafType.call(this,"Float",["std"]);
};
$hxClasses["stx.schema.core.type.term.TypeFloat"] = stx_schema_core_type_term_TypeFloat;
stx_schema_core_type_term_TypeFloat.__name__ = "stx.schema.core.type.term.TypeFloat";
stx_schema_core_type_term_TypeFloat.__super__ = stx_schema_core_type_LeafType;
stx_schema_core_type_term_TypeFloat.prototype = $extend(stx_schema_core_type_LeafType.prototype,{
	get_validation: function() {
		return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationFunc(stx_schema_core_type_term_TypeFloat._.validate)]);
	}
	,__class__: stx_schema_core_type_term_TypeFloat
});
var stx_schema_core_type_term_TypeIntLift = function() { };
$hxClasses["stx.schema.core.type.term.TypeIntLift"] = stx_schema_core_type_term_TypeIntLift;
stx_schema_core_type_term_TypeIntLift.__name__ = "stx.schema.core.type.term.TypeIntLift";
stx_schema_core_type_term_TypeIntLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 1) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeInt.hx", lineNumber : 15, className : "stx.schema.core.type.term.TypeIntLift", methodName : "validate"})));
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeInt.hx", lineNumber : 16, className : "stx.schema.core.type.term.TypeIntLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TInt,x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_core_type_term_TypeInt = function() {
	stx_schema_core_type_LeafType.call(this,"Int",["std"]);
};
$hxClasses["stx.schema.core.type.term.TypeInt"] = stx_schema_core_type_term_TypeInt;
stx_schema_core_type_term_TypeInt.__name__ = "stx.schema.core.type.term.TypeInt";
stx_schema_core_type_term_TypeInt.__super__ = stx_schema_core_type_LeafType;
stx_schema_core_type_term_TypeInt.prototype = $extend(stx_schema_core_type_LeafType.prototype,{
	get_validation: function() {
		return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationFunc(stx_schema_core_type_term_TypeInt._.validate)]);
	}
	,__class__: stx_schema_core_type_term_TypeInt
});
var stx_schema_core_type_term_TypeNullLift = function() { };
$hxClasses["stx.schema.core.type.term.TypeNullLift"] = stx_schema_core_type_term_TypeNullLift;
stx_schema_core_type_term_TypeNullLift.__name__ = "stx.schema.core.type.term.TypeNullLift";
stx_schema_core_type_term_TypeNullLift.validate = function(value,type) {
	if(value == null) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeNull.hx", lineNumber : 18, className : "stx.schema.core.type.term.TypeNullLift", methodName : "validate"})));
		}
	} else {
		var _g = type.data;
		if(_g._hx_index == 3) {
			var def = _g.t;
			return stx_schema_ValidationsLift.lfold(def.pop().type.get_validation(),value,type);
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeNull.hx", lineNumber : 22, className : "stx.schema.core.type.term.TypeNullLift", methodName : "validate"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_WrongType(type)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		}
	}
};
var stx_schema_core_type_term_TypeNull = function(type) {
	stx_schema_core_type_GenericTypeCls.call(this,"Null",["std"],type);
};
$hxClasses["stx.schema.core.type.term.TypeNull"] = stx_schema_core_type_term_TypeNull;
stx_schema_core_type_term_TypeNull.__name__ = "stx.schema.core.type.term.TypeNull";
stx_schema_core_type_term_TypeNull.make = function(type) {
	return new stx_schema_core_type_term_TypeNull(type);
};
stx_schema_core_type_term_TypeNull.__super__ = stx_schema_core_type_GenericTypeCls;
stx_schema_core_type_term_TypeNull.prototype = $extend(stx_schema_core_type_GenericTypeCls.prototype,{
	get_validation: function() {
		return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationFunc(stx_schema_core_type_term_TypeNull._.validate)]);
	}
	,__class__: stx_schema_core_type_term_TypeNull
});
var stx_schema_core_type_term_TypeStringLift = function() { };
$hxClasses["stx.schema.core.type.term.TypeStringLift"] = stx_schema_core_type_term_TypeStringLift;
stx_schema_core_type_term_TypeStringLift.__name__ = "stx.schema.core.type.term.TypeStringLift";
stx_schema_core_type_term_TypeStringLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 6) {
		if(_g.c == String) {
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeString.hx", lineNumber : 15, className : "stx.schema.core.type.term.TypeStringLift", methodName : "validate"})));
			}
		} else {
			var x = _g;
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeString.hx", lineNumber : 16, className : "stx.schema.core.type.term.TypeStringLift", methodName : "validate"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TClass(String),x)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/core/type/term/TypeString.hx", lineNumber : 16, className : "stx.schema.core.type.term.TypeStringLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TClass(String),x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_core_type_term_TypeString = function() {
	stx_schema_core_type_LeafType.call(this,"String",["std"]);
};
$hxClasses["stx.schema.core.type.term.TypeString"] = stx_schema_core_type_term_TypeString;
stx_schema_core_type_term_TypeString.__name__ = "stx.schema.core.type.term.TypeString";
stx_schema_core_type_term_TypeString.__super__ = stx_schema_core_type_LeafType;
stx_schema_core_type_term_TypeString.prototype = $extend(stx_schema_core_type_LeafType.prototype,{
	get_validation: function() {
		return stx_nano_Cluster.lift([stx_schema_ValidationSum.ValidationFunc(stx_schema_core_type_term_TypeString._.validate)]);
	}
	,__class__: stx_schema_core_type_term_TypeString
});
var stx_schema_term_SchemaArrayLift = function() { };
$hxClasses["stx.schema.term.SchemaArrayLift"] = stx_schema_term_SchemaArrayLift;
stx_schema_term_SchemaArrayLift.__name__ = "stx.schema.term.SchemaArrayLift";
stx_schema_term_SchemaArrayLift.validate = function(value,type) {
	if(value == null) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaArray.hx", lineNumber : 36, className : "stx.schema.term.SchemaArrayLift", methodName : "validate"})));
		}
	} else {
		var _g = type.data;
		if(_g._hx_index == 3) {
			var def = _g.t;
			var _e = def.pop().type.get_validation();
			var _g = function(value,type) {
				return stx_schema_ValidationsLift.lfold(_e,value,type);
			};
			var type1 = type;
			var fn = function(value) {
				return _g(value,type1);
			};
			var arr = value;
			var f = null;
			return stx_nano_ClusterLift.lfold(arr,function(next,memo) {
				return stx_nano_ReportLift.concat(memo,fn(next));
			},f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaArray.hx", lineNumber : 44, className : "stx.schema.term.SchemaArrayLift", methodName : "validate"}))));
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaArray.hx", lineNumber : 46, className : "stx.schema.term.SchemaArrayLift", methodName : "validate"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_WrongType(type)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		}
	}
};
var stx_schema_term_SchemaArray = {};
stx_schema_term_SchemaArray.make = function(ref) {
	return stx_schema_term_SchemaArray._new(stx_schema_SchemaGenericDeclaration.make("Array",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])),ref,stx_schema_Validations.fromValidationSum(stx_schema_ValidationSum.ValidationFunc(stx_schema_term_SchemaArray._.validate))));
};
stx_schema_term_SchemaArray._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_term_SchemaArray.toSchemaGenericDeclaration = function(this1) {
	return stx_schema_SchemaGenericDeclaration.lift(this1);
};
stx_schema_term_SchemaArray.resolve = function(this1,state) {
	var self = state.get(stx_schema_SchemaRef.identity(this1.type));
	var result;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		var self = t;
		var identity = stx_schema_Schema.identity(self);
		result = stx_schema_term_SchemaArray.make(stx_schema_SchemaRef.lift({ name : identity.name, pack : identity.pack, pop : function() {
			return self;
		}, lhs : identity.lhs, rhs : identity.rhs}));
		break;
	case 1:
		var next = stx_schema_SchemaRef.resolve(this1.type,state);
		result = stx_schema_term_SchemaArray.make(next);
		break;
	}
	var result1 = stx_schema_SchemaSum.SchGeneric(stx_schema_term_SchemaArray.toSchemaGenericDeclaration(result));
	state.put(result1);
	return result1;
};
var stx_schema_term_SchemaBoolLift = function() { };
$hxClasses["stx.schema.term.SchemaBoolLift"] = stx_schema_term_SchemaBoolLift;
stx_schema_term_SchemaBoolLift.__name__ = "stx.schema.term.SchemaBoolLift";
stx_schema_term_SchemaBoolLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 3) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaBool.hx", lineNumber : 24, className : "stx.schema.term.SchemaBoolLift", methodName : "validate"})));
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaBool.hx", lineNumber : 25, className : "stx.schema.term.SchemaBoolLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TBool,x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_term_SchemaBool = {};
stx_schema_term_SchemaBool.make = function() {
	return stx_schema_term_SchemaBool._new(stx_schema_SchemaDeclaration.make0("Bool",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])),stx_schema_Validations.fromValidationSum(stx_schema_ValidationSum.ValidationFunc(stx_schema_term_SchemaBool._.validate))));
};
stx_schema_term_SchemaBool.toSchemaDeclaration = function(this1) {
	return stx_schema_SchemaDeclaration.lift(this1);
};
stx_schema_term_SchemaBool._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_schema_term_SchemaFloatLift = function() { };
$hxClasses["stx.schema.term.SchemaFloatLift"] = stx_schema_term_SchemaFloatLift;
stx_schema_term_SchemaFloatLift.__name__ = "stx.schema.term.SchemaFloatLift";
stx_schema_term_SchemaFloatLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 2) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaFloat.hx", lineNumber : 24, className : "stx.schema.term.SchemaFloatLift", methodName : "validate"})));
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaFloat.hx", lineNumber : 25, className : "stx.schema.term.SchemaFloatLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TFloat,x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_term_SchemaFloat = {};
stx_schema_term_SchemaFloat.make = function() {
	return stx_schema_term_SchemaFloat._new(stx_schema_SchemaDeclaration.make0("Float",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])),stx_schema_Validations.fromValidationSum(stx_schema_ValidationSum.ValidationFunc(stx_schema_term_SchemaFloat._.validate))));
};
stx_schema_term_SchemaFloat._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_term_SchemaFloat.toSchemaDeclaration = function(this1) {
	return stx_schema_SchemaDeclaration.lift(this1);
};
var stx_schema_term_SchemaIntLift = function() { };
$hxClasses["stx.schema.term.SchemaIntLift"] = stx_schema_term_SchemaIntLift;
stx_schema_term_SchemaIntLift.__name__ = "stx.schema.term.SchemaIntLift";
stx_schema_term_SchemaIntLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 1) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaInt.hx", lineNumber : 24, className : "stx.schema.term.SchemaIntLift", methodName : "validate"})));
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaInt.hx", lineNumber : 25, className : "stx.schema.term.SchemaIntLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TInt,x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_term_SchemaInt = {};
stx_schema_term_SchemaInt.make = function() {
	return stx_schema_term_SchemaInt._new(stx_schema_SchemaDeclaration.make0("Int",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])),stx_schema_Validations.fromValidationSum(stx_schema_ValidationSum.ValidationFunc(stx_schema_term_SchemaInt._.validate))));
};
stx_schema_term_SchemaInt._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_term_SchemaInt.toSchemaDeclaration = function(this1) {
	return stx_schema_SchemaDeclaration.lift(this1);
};
var stx_schema_term_SchemaNullLift = function() { };
$hxClasses["stx.schema.term.SchemaNullLift"] = stx_schema_term_SchemaNullLift;
stx_schema_term_SchemaNullLift.__name__ = "stx.schema.term.SchemaNullLift";
stx_schema_term_SchemaNullLift.validate = function(value,type) {
	if(value == null) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaNull.hx", lineNumber : 25, className : "stx.schema.term.SchemaNullLift", methodName : "validate"})));
		}
	} else {
		var _g = type.data;
		if(_g._hx_index == 3) {
			var def = _g.t;
			return stx_schema_ValidationsLift.lfold(def.pop().type.get_validation(),value,type);
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaNull.hx", lineNumber : 29, className : "stx.schema.term.SchemaNullLift", methodName : "validate"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_WrongType(type)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		}
	}
};
var stx_schema_term_SchemaNull = {};
stx_schema_term_SchemaNull.make = function(ref) {
	return stx_schema_term_SchemaNull._new(stx_schema_SchemaGenericDeclaration.make("Null",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])),ref,stx_schema_Validations.fromValidationSum(stx_schema_ValidationSum.ValidationFunc(stx_schema_term_SchemaNull._.validate))));
};
stx_schema_term_SchemaNull._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_term_SchemaNull.toSchemaGenericDeclaration = function(this1) {
	return stx_schema_SchemaGenericDeclaration.lift(this1);
};
var stx_schema_term_SchemaStringLift = function() { };
$hxClasses["stx.schema.term.SchemaStringLift"] = stx_schema_term_SchemaStringLift;
stx_schema_term_SchemaStringLift.__name__ = "stx.schema.term.SchemaStringLift";
stx_schema_term_SchemaStringLift.validate = function(value,_) {
	var _g = Type.typeof(value);
	if(_g._hx_index == 6) {
		if(_g.c == String) {
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaString.hx", lineNumber : 24, className : "stx.schema.term.SchemaStringLift", methodName : "validate"})));
			}
		} else {
			var x = _g;
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaString.hx", lineNumber : 25, className : "stx.schema.term.SchemaStringLift", methodName : "validate"});
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TClass(String),x)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			return stx_nano_Report.pure(this1);
		}
	} else {
		var x = _g;
		var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/schema/term/SchemaString.hx", lineNumber : 25, className : "stx.schema.term.SchemaStringLift", methodName : "validate"});
		var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_SchemaFailure.E_Schema_HaxeTypeError(ValueType.TClass(String),x)));
		var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
			return stx_nano_Rejection.prj(x);
		});
		if(data == null) {
			data = haxe_ds_Option.None;
		}
		if(lst == null) {
			lst = haxe_ds_Option.None;
		}
		var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
		return stx_nano_Report.pure(this1);
	}
};
var stx_schema_term_SchemaString = {};
stx_schema_term_SchemaString.make = function() {
	return stx_schema_term_SchemaString._new(stx_schema_SchemaDeclaration.make0("String",stx_nano_Way.lift(stx_nano_Cluster.lift(["std"])),stx_schema_Validations.fromValidationSum(stx_schema_ValidationSum.ValidationFunc(stx_schema_term_SchemaString._.validate))));
};
stx_schema_term_SchemaString._new = function(self) {
	var this1 = self;
	return this1;
};
stx_schema_term_SchemaString.toSchemaDeclaration = function(this1) {
	return stx_schema_SchemaDeclaration.lift(this1);
};
var stx_test_Assert = function() {
	this.__assertions = [];
};
$hxClasses["stx.test.Assert"] = stx_test_Assert;
stx_test_Assert.__name__ = "stx.test.Assert";
stx_test_Assert.prototype = {
	__assertions: null
	,assert: function(assertion) {
		this.__assertions.push(assertion);
	}
	,equals: function(self,that,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,self).should().be_equal_to(that);
		},reason);
		this.assert(stx_test_core_Assertion.make(self == that,reason,stx_fail_TestFailureSum.TestFailedBecause(reason),pos));
	}
	,raise: function(error,reason,pos) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,reason);
		if(self._hx_index == 0) {
			var v = self.v;
			reason = v;
		} else {
			reason = Std.string(error);
		}
		this.assert(stx_test_core_Assertion.make(false,reason,stx_fail_TestFailureSum.E_Test_Exception(error),pos));
	}
	,pass: function(reason,pos) {
		if(reason == null) {
			reason = "pass";
		}
		this.assert(stx_test_core_Assertion.make(true,reason,stx_fail_TestFailureSum.NullTestFailure,pos));
	}
	,fail: function(reason,pos) {
		if(reason == null) {
			reason = "force fail";
		}
		this.assert(stx_test_core_Assertion.make(false,reason,null,pos));
	}
	,rejection: function(err,pos) {
		this.assert(stx_test_core_Assertion.make(false,stx_pico_Option.toString(err.get_val()),stx_fail_TestFailureSum.E_Test_Rejection(err),pos));
	}
	,error: function(err,pos) {
		var tmp = stx_pico_Option.toString(err.get_val());
		var this1 = err.errate(stx_nano_DeclinationSum.REJECT);
		this.assert(stx_test_core_Assertion.make(false,tmp,stx_fail_TestFailureSum.E_Test_Rejection(this1),pos));
	}
	,exception: function(err,pos) {
		this.assert(stx_test_core_Assertion.make(false,err.details(),stx_fail_TestFailureSum.E_Test_Exception(err),pos));
	}
	,error_test: function(reason,err,pos) {
		this.assert(stx_test_core_Assertion.make(false,reason,err,pos));
	}
	,same: function(lhs,rhs,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,lhs).should().be(rhs,"the same as");
		},reason);
		this.assert(stx_test_core_Assertion.make(equals_Equal.equals(lhs,rhs),reason,null,pos));
	}
	,is_true: function(v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,v).should().be(true);
		},reason);
		this.assert(stx_test_core_Assertion.make(v,reason,null,pos));
	}
	,is_false: function(v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,v).should().be(false);
		},reason);
		this.assert(stx_test_core_Assertion.make(!v,reason,null,pos));
	}
	,exists: function(v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,"value").should().exist();
		},reason);
		this.assert(stx_test_core_Assertion.make(v != null,reason,null,pos));
	}
	,iz: function(clazz,v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,v).should().be(clazz,"a value of type");
		},reason);
		var truth;
		var _g = Type.typeof(v);
		if(_g._hx_index == 6) {
			var cls = _g.c;
			truth = stx_nano_lift_LiftNano.identifier(cls) == stx_nano_lift_LiftNano.identifier(clazz);
		} else {
			truth = false;
		}
		this.assert(stx_test_core_Assertion.make(truth,reason,null,pos));
	}
	,raises: function(fn,reason,pos) {
		if(reason == null) {
			reason = "Expectation of thrown error not met";
		}
		var truth = false;
		try {
			fn();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			truth = true;
		}
		this.assert(stx_test_core_Assertion.make(truth,reason,null,pos));
	}
	,alike: function(oI,oII,reason,pos) {
		var e0 = oI;
		var e1 = oII;
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,e0).should().be_like(e1);
		},reason);
		var truth = stx_nano_EnumValue.index(e0) == stx_nano_EnumValue.index(e1) && stx_nano_EnumValue.ctr(e0) == stx_nano_EnumValue.ctr(e1);
		this.assert(stx_test_core_Assertion.make(truth,reason,null,pos));
	}
	,accepted: function(o,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,o).should().be_like(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null));
		},reason);
		this.alike(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null),o,reason,pos);
	}
	,reasoning: function(op,def) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,def);
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return op().toString();
		}
	}
	,__class__: stx_test_Assert
};
var stx_test_TestCase = function() {
	stx_test_Assert.call(this);
};
$hxClasses["stx.test.TestCase"] = stx_test_TestCase;
stx_test_TestCase.__name__ = "stx.test.TestCase";
stx_test_TestCase.__super__ = stx_test_Assert;
stx_test_TestCase.prototype = $extend(stx_test_Assert.prototype,{
	__stx__tests: function(timeout) {
		return stx_test_TestCaseLift.get_tests(this,timeout);
	}
	,__setup: function() {
		return haxe_ds_Option.None;
	}
	,__teardown: function() {
		return haxe_ds_Option.None;
	}
	,__before: function() {
		return haxe_ds_Option.None;
	}
	,__after: function() {
		return haxe_ds_Option.None;
	}
	,asTestCase: function() {
		return this;
	}
	,wrap: function(future,pos) {
		var _gthis = this;
		var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
			try {
				return future.handle(function(v) {
					cb(stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,pos,_gthis,stx_test_AsyncResult.pure(v)));
				});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g);
				var _g2 = _g1.unwrap();
				if(((_g2) instanceof stx_pico_Error)) {
					var e = _g2;
					_gthis.error(e,pos);
					cb(stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,pos,_gthis,stx_test_AsyncResult.unit()));
					return null;
				} else {
					var e = _g1;
					_gthis.exception(e,pos);
					cb(stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,pos,_gthis,stx_test_AsyncResult.unit()));
					return null;
				}
			}
		});
		return stx_test_WrappedFuture.lift(this1);
	}
	,__class__: stx_test_TestCase
});
var stx_schema_test_SchemaTest = function() {
	stx_test_TestCase.call(this);
};
$hxClasses["stx.schema.test.SchemaTest"] = stx_schema_test_SchemaTest;
stx_schema_test_SchemaTest.__name__ = "stx.schema.test.SchemaTest";
stx_schema_test_SchemaTest.__super__ = stx_test_TestCase;
stx_schema_test_SchemaTest.prototype = $extend(stx_test_TestCase.prototype,{
	test_this: function() {
		haxe_Log.trace("here",{ fileName : "src/main/haxe/stx/schema/test/SchemaTest.hx", lineNumber : 40, className : "stx.schema.test.SchemaTest", methodName : "test_this"});
	}
	,test: function() {
		this.is_true(true,null,{ fileName : "src/main/haxe/stx/schema/test/SchemaTest.hx", lineNumber : 43, className : "stx.schema.test.SchemaTest", methodName : "test"});
	}
	,__class__: stx_schema_test_SchemaTest
});
var stx_stream_CYCLED = $hxEnums["stx.stream.CYCLED"] = { __ename__:"stx.stream.CYCLED",__constructs__:null
	,CYCLED: {_hx_name:"CYCLED",_hx_index:0,__enum__:"stx.stream.CYCLED",toString:$estr}
};
stx_stream_CYCLED.__constructs__ = [stx_stream_CYCLED.CYCLED];
var stx_stream_CyclerApi = function() { };
$hxClasses["stx.stream.CyclerApi"] = stx_stream_CyclerApi;
stx_stream_CyclerApi.__name__ = "stx.stream.CyclerApi";
stx_stream_CyclerApi.__isInterface__ = true;
stx_stream_CyclerApi.prototype = {
	state: null
	,get_state: null
	,value: null
	,get_value: null
	,toString: null
	,toCyclerApi: null
	,__class__: stx_stream_CyclerApi
	,__properties__: {get_value:"get_value",get_state:"get_state"}
};
var stx_stream_CyclerCls = function() { };
$hxClasses["stx.stream.CyclerCls"] = stx_stream_CyclerCls;
stx_stream_CyclerCls.__name__ = "stx.stream.CyclerCls";
stx_stream_CyclerCls.__interfaces__ = [stx_stream_CyclerApi];
stx_stream_CyclerCls.prototype = {
	state: null
	,get_state: null
	,value: null
	,get_value: null
	,toString: function() {
		return "Cycler(" + this.get_state() + ":" + Std.string(this.get_value()) + ")";
	}
	,toCyclerApi: function() {
		return this;
	}
	,__class__: stx_stream_CyclerCls
	,__properties__: {get_value:"get_value",get_state:"get_state"}
};
var stx_stream_AnonCyclerCls = function(method) {
	this.method = method.cache();
};
$hxClasses["stx.stream.AnonCyclerCls"] = stx_stream_AnonCyclerCls;
stx_stream_AnonCyclerCls.__name__ = "stx.stream.AnonCyclerCls";
stx_stream_AnonCyclerCls.__super__ = stx_stream_CyclerCls;
stx_stream_AnonCyclerCls.prototype = $extend(stx_stream_CyclerCls.prototype,{
	method: null
	,get_value: function() {
		return this.method();
	}
	,get_state: function() {
		if(this.get_value() == null) {
			return 0;
		} else {
			return 1;
		}
	}
	,__class__: stx_stream_AnonCyclerCls
});
var stx_stream_UnitCyclerCls = function() {
};
$hxClasses["stx.stream.UnitCyclerCls"] = stx_stream_UnitCyclerCls;
stx_stream_UnitCyclerCls.__name__ = "stx.stream.UnitCyclerCls";
stx_stream_UnitCyclerCls.__super__ = stx_stream_CyclerCls;
stx_stream_UnitCyclerCls.prototype = $extend(stx_stream_CyclerCls.prototype,{
	get_value: function() {
		return null;
	}
	,get_state: function() {
		return 0;
	}
	,__class__: stx_stream_UnitCyclerCls
});
var stx_stream_PureCyclerCls = function(value) {
	this.value = value;
};
$hxClasses["stx.stream.PureCyclerCls"] = stx_stream_PureCyclerCls;
stx_stream_PureCyclerCls.__name__ = "stx.stream.PureCyclerCls";
stx_stream_PureCyclerCls.__super__ = stx_stream_CyclerCls;
stx_stream_PureCyclerCls.prototype = $extend(stx_stream_CyclerCls.prototype,{
	get_value: function() {
		return this.value;
	}
	,get_state: function() {
		return 1;
	}
	,__class__: stx_stream_PureCyclerCls
});
var stx_stream_Cycler = {};
stx_stream_Cycler.__properties__ = {get_self:"get_self"};
stx_stream_Cycler._new = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_Cycler.lift = function(self) {
	return stx_stream_Cycler._new(self);
};
stx_stream_Cycler.prj = function(this1) {
	return this1;
};
stx_stream_Cycler.get_self = function(this1) {
	return stx_stream_Cycler._new(this1);
};
stx_stream_Cycler.unit = function() {
	return stx_stream_Cycler._new(new stx_stream_UnitCyclerCls());
};
stx_stream_Cycler.fromFuture = function(f) {
	return stx_stream_Cycler._new(new stx_stream_PureCyclerCls(f));
};
stx_stream_Cycler.pure = function(f) {
	return stx_stream_Cycler._new(new stx_stream_PureCyclerCls(f));
};
stx_stream_Cycler.toCycle = function(this1) {
	return stx_stream_Cycle._new(this1);
};
var stx_stream_Cycle = {};
stx_stream_Cycle.__properties__ = {get_ZERO:"get_ZERO"};
stx_stream_Cycle._new = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_Cycle.lift = function(self) {
	return stx_stream_Cycle._new(self);
};
stx_stream_Cycle.ZERO = null;
stx_stream_Cycle.get_ZERO = function() {
	if(stx_stream_Cycle.ZERO == null) {
		return stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
	} else {
		return stx_stream_Cycle.ZERO;
	}
};
stx_stream_Cycle.unit = function() {
	return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
};
stx_stream_Cycle.fromFutureCycle = function(self) {
	return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(self)));
};
stx_stream_Cycle.fromWork = function(self) {
	if(stx_stream_Work.is_defined(self)) {
		return stx_stream_Cycle._new(self.toCyclerApi());
	} else if(stx_stream_Cycle.ZERO == null) {
		return stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
	} else {
		return stx_stream_Cycle.ZERO;
	}
};
stx_stream_Cycle.step = function(this1) {
	if(this1 == null) {
		return stx_stream_Cycler._new(new stx_stream_UnitCyclerCls());
	} else {
		return this1;
	}
};
stx_stream_Cycle.is_defined = function(this1) {
	return this1 != null;
};
stx_stream_Cycle.toString = function(this1) {
	return "Cycle(" + Std.string(this1 != null) + ")";
};
var stx_stream_CycleLift = function() { };
$hxClasses["stx.stream.CycleLift"] = stx_stream_CycleLift;
stx_stream_CycleLift.__name__ = "stx.stream.CycleLift";
stx_stream_CycleLift.lift = function(self) {
	return stx_stream_Cycle._new(self);
};
stx_stream_CycleLift.seq = function(self,that) {
	var _g = that != null;
	if(self != null) {
		if(_g) {
			var next = self == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : self;
			switch(next.get_state()) {
			case 0:
				return that;
			case 1:
				var that1 = that;
				var f = function(self) {
					return stx_stream_CycleLift.seq(self,that1);
				};
				return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.map(next.get_value(),f))));
			}
		} else {
			return self;
		}
	} else if(_g) {
		return that;
	} else {
		return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
	}
};
stx_stream_CycleLift.par = function(self,that) {
	var l = self == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : self;
	var r = self == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : self;
	var _g = l.get_state();
	var _g1 = r.get_state();
	switch(_g) {
	case 0:
		switch(_g1) {
		case 0:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
		case 1:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(r.get_value())));
		}
		break;
	case 1:
		switch(_g1) {
		case 0:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(l.get_value())));
		case 1:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.merge(l.get_value(),r.get_value(),stx_stream_CycleLift.seq))));
		}
		break;
	}
};
stx_stream_CycleLift.submit = function(self,pos) {
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(3);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("cycle/submit: " + (self == null ? "null" : stx_stream_Cycle.toString(self)) + " " + Std.string(pos))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 158, className : "stx.stream.CycleLift", methodName : "submit"}));
	var event = null;
	event = haxe_MainLoop.add(function() {
		var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(1);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("tick: " + (self == null ? "null" : stx_stream_Cycle.toString(self)))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 162, className : "stx.stream.CycleLift", methodName : "submit"}));
		if(self != null) {
			try {
				var thiz = self;
				var this2 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var fn1 = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(1);
					});
				};
				(function(value,pos) {
					this2(value,fn1(pos));
				})(stx_log_Stringify.fromString(stx_stream_Cycle.toString(thiz))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 166, className : "stx.stream.CycleLift", methodName : "submit"}));
				self = null;
				var step = thiz == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : thiz;
				var this3 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var fn2 = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(1);
					});
				};
				(function(value,pos) {
					this3(value,fn2(pos));
				})(new stx_log_EntryCtr().thunk(function() {
					return step.get_state();
				}),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 169, className : "stx.stream.CycleLift", methodName : "submit"}));
				switch(step.get_state()) {
				case 0:
					event.stop();
					break;
				case 1:
					step.get_value().handle(function(x) {
						var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
						var fn = function(pos) {
							return pos.with_stamp(function(stamp) {
								return stamp.relevel(1);
							});
						};
						(function(value,pos) {
							this1(value,fn(pos));
						})(stx_log_Stringify.fromString("set step")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 177, className : "stx.stream.CycleLift", methodName : "submit"}));
						self = x;
					});
					break;
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				event.stop();
				haxe_MainLoop.runInMainThread(function() {
					throw haxe_Exception.thrown(e);
				});
			}
		}
	});
};
stx_stream_CycleLift.crunch = function(self) {
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(3);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("cycle/crunch")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 196, className : "stx.stream.CycleLift", methodName : "crunch"}));
	var inner = function(self) {
		var cont = true;
		while(cont) {
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var v = self == null ? "null" : stx_stream_Cycle.toString(self);
			var v1 = stx_log_Stringify.fromString("" + (cont == null ? "null" : "" + cont) + " " + v);
			(function(fn,this1) {
				return function(value,pos) {
					this1[0](value,fn[0](pos));
				};
			})([(function() {
				return function(pos) {
					return pos.with_stamp((function() {
						return function(stamp) {
							return stamp.relevel(0);
						};
					})());
				};
			})()],[this1])(v1(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 201, className : "stx.stream.CycleLift", methodName : "crunch"}));
			if(self != null) {
				var this2 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var v2 = stx_log_Stringify.fromString("crunching:call");
				(function(fn,this1) {
					return function(value,pos) {
						this1[0](value,fn[0](pos));
					};
				})([(function() {
					return function(pos) {
						return pos.with_stamp((function() {
							return function(stamp) {
								return stamp.relevel(0);
							};
						})());
					};
				})()],[this2])(v2(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 203, className : "stx.stream.CycleLift", methodName : "crunch"}));
				var call = self;
				self = null;
				var result = call == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : call;
				var this3 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var v3 = stx_log_Stringify.fromString("step " + Std.string(result));
				(function(fn,this1) {
					return function(value,pos) {
						this1[0](value,fn[0](pos));
					};
				})([(function() {
					return function(pos) {
						return pos.with_stamp((function() {
							return function(stamp) {
								return stamp.relevel(0);
							};
						})());
					};
				})()],[this3])(v3(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 208, className : "stx.stream.CycleLift", methodName : "crunch"}));
				switch(result.get_state()) {
				case 0:
					cont = false;
					break;
				case 1:
					result.get_value().handle((function() {
						return function(x) {
							self = x;
						};
					})());
					break;
				}
			}
		}
	};
	inner(self);
};
var stx_stream_Logging = function() { };
$hxClasses["stx.stream.Logging"] = stx_stream_Logging;
stx_stream_Logging.__name__ = "stx.stream.Logging";
stx_stream_Logging.log = function(wildcard) {
	return stx_Log.void();
};
var stx_stream_Timeout = {};
stx_stream_Timeout._new = function(ms) {
	var id = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxx");
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(1);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(stx_log_Stringify.fromString("timeout#" + id + ": " + ms)(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Timeout.hx", lineNumber : 6, className : "stx.stream._Timeout.Timeout_Impl_", methodName : "_new"}));
	var multiplier = 1.01;
	var step = function(time) {
		return Math.round(time * multiplier);
	};
	var this2 = new tink_core__$Future_SuspendableFuture(function(cb) {
		var start = HxOverrides.now() / 1000;
		var exit_time = function() {
			return start + ms / 1000;
		};
		var is_finished = function() {
			return HxOverrides.now() / 1000 >= exit_time();
		};
		var since = function() {
			return HxOverrides.now() / 1000 - start;
		};
		var cancelled = false;
		var next = 200 > ms ? ms : 200;
		var event = null;
		event = haxe_MainLoop.add(function() {
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(1);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("timeout#" + id + " tick. cancelled: " + (cancelled == null ? "null" : "" + cancelled) + " time " + since())(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Timeout.hx", lineNumber : 28, className : "stx.stream._Timeout.Timeout_Impl_", methodName : "_new"}));
			if(cancelled) {
				event.stop();
			} else {
				var this2 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var fn1 = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(1);
					});
				};
				(function(value,pos) {
					this2(value,fn1(pos));
				})(stx_log_Stringify.fromString("" + id + " finished?" + Std.string(is_finished()))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Timeout.hx", lineNumber : 32, className : "stx.stream._Timeout.Timeout_Impl_", methodName : "_new"}));
				if(is_finished()) {
					var this3 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var fn2 = function(pos) {
						return pos.with_stamp(function(stamp) {
							return stamp.relevel(1);
						});
					};
					(function(value,pos) {
						this3(value,fn2(pos));
					})(stx_log_Stringify.fromString("" + id + " COMPLETE")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Timeout.hx", lineNumber : 34, className : "stx.stream._Timeout.Timeout_Impl_", methodName : "_new"}));
					event.stop();
					cb(null);
				} else {
					var this4 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var fn3 = function(pos) {
						return pos.with_stamp(function(stamp) {
							return stamp.relevel(1);
						});
					};
					(function(value,pos) {
						this4(value,fn3(pos));
					})(stx_log_Stringify.fromString("" + id + " CONTINUE")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Timeout.hx", lineNumber : 38, className : "stx.stream._Timeout.Timeout_Impl_", methodName : "_new"}));
					next = step(next);
					event.delay(next / 1000);
				}
			}
		});
		var this1 = new tink_core_SimpleLink(function() {
			cancelled = true;
		});
		return this1;
	});
	var this3 = this2;
	return this3;
};
stx_stream_Timeout.prj = function(this1) {
	return this1;
};
var stx_stream__$Timeout_Backoff = function() { };
$hxClasses["stx.stream._Timeout.Backoff"] = stx_stream__$Timeout_Backoff;
stx_stream__$Timeout_Backoff.__name__ = "stx.stream._Timeout.Backoff";
var stx_stream_Window = {};
stx_stream_Window.__properties__ = {get_self:"get_self"};
stx_stream_Window._new = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_Window.lift = function(self) {
	return stx_stream_Window._new(self);
};
stx_stream_Window.make = function(delegate,buffer) {
	return stx_stream_Window.lift(new stx_stream_WindowCls(delegate,buffer));
};
stx_stream_Window.toSignal = function(this1) {
	return this1.toSignal();
};
stx_stream_Window.prj = function(this1) {
	return this1;
};
stx_stream_Window.get_self = function(this1) {
	return stx_stream_Window.lift(this1);
};
var stx_stream_WindowCls = function(delegate,buffer) {
	var _gthis = this;
	this.delegate = delegate;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,buffer);
	var rec = null;
	rec = function(x) {
		var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(2);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("emit")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 25, className : "stx.stream.WindowCls", methodName : "new"}));
		var fn1 = rec;
		return stx_coroutine_core_CoroutineSum.Emit(x,stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		})));
	};
	var fn = rec;
	var v = stx_coroutine_pack_Tunnel.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRejection(stx_nano_lift_LiftErrorDigestToRejection.toRejection(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.buffer = tmp;
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var fn1 = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(1);
		});
	};
	(function(value,pos) {
		this1(value,fn1(pos));
	})(new stx_log_EntryCtr().pure(_gthis.buffer),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 30, className : "stx.stream.WindowCls", methodName : "new"}));
	this.delegate.listen(function(x) {
		var next = _gthis.buffer;
		var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(1);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("" + Std.string(next))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 34, className : "stx.stream.WindowCls", methodName : "new"}));
		_gthis.buffer = next;
	});
};
$hxClasses["stx.stream.WindowCls"] = stx_stream_WindowCls;
stx_stream_WindowCls.__name__ = "stx.stream.WindowCls";
stx_stream_WindowCls.prototype = {
	buffer: null
	,delegate: null
	,listen: function(handler) {
		var _gthis = this;
		var uptake = [];
		var canceller = null;
		var uptaker = function(x) {
			uptake.push(x);
		};
		canceller = this.delegate.listen(uptaker);
		var partial = this.buffer;
		var transfer = function() {
			uptaker = function(_) {
			};
			var _g = 0;
			while(_g < uptake.length) {
				var t = uptake[_g];
				++_g;
				tink_core_Callback.invoke(handler,t);
			}
			if(canceller != null) {
				if(canceller != null) {
					canceller.cancel();
				}
			}
			_gthis.delegate.listen(handler);
		};
		stx_coroutine_pack_EffectLift.run(stx_coroutine_pack_EmiterLift.secure(stx_coroutine_pack_SourceLift.emiter(stx_coroutine_core_CoroutineLift.source(partial,function() {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(haxe_ds_Either.Right(stx_coroutine_core_CauseSum.Stop)));
		}),function(_) {
			return stx_nano_ChunkSum.End();
		}),stx_coroutine_pack_Secure.handler(handler))).handle(function(cause) {
			if(cause._hx_index == 0) {
				var _g = cause.v;
				if(_g._hx_index == 1) {
					var e = _g.err;
					var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var fn = function(pos) {
						return pos.with_stamp(function(stamp) {
							return stamp.relevel(5);
						});
					};
					(function(value,pos) {
						this1(value,fn(pos));
					})(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 66, className : "stx.stream.WindowCls", methodName : "listen"}));
					throw haxe_Exception.thrown(e);
				} else {
					transfer();
				}
			} else {
				transfer();
			}
		});
		var this1 = new tink_core_SimpleLink(function() {
		});
		return this1;
	}
	,toSignal: function() {
		var this1 = new tink_core__$Signal_Suspendable($bind(this,this.listen),null);
		return this1;
	}
	,__class__: stx_stream_WindowCls
};
var stx_stream_Work = {};
stx_stream_Work.__properties__ = {get_self:"get_self"};
stx_stream_Work.unit = function() {
	var this1 = null;
	return this1;
};
stx_stream_Work.wait = function() {
	return stx_stream_Bang._new();
};
stx_stream_Work._new = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_Work.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_Work.prj = function(this1) {
	return this1;
};
stx_stream_Work.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
stx_stream_Work.fromCycle = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_Work.fromFutureWork = function(ft) {
	var this1 = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.flatMap(ft,function(bang) {
		if(bang == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO));
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(bang));
		}
	}))));
	return this1;
};
stx_stream_Work.toCycle = function(this1) {
	return stx_stream_Cycle.fromWork(this1);
};
stx_stream_Work.is_defined = function(this1) {
	return this1 != null;
};
var stx_stream_Bang = {};
stx_stream_Bang._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
stx_stream_Bang.fill = function(this1,block) {
	this1.trigger(block);
};
stx_stream_Bang.done = function(this1) {
	this1.trigger(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO);
};
stx_stream_Bang.toWork = function(this1) {
	var this2 = this1 == null ? null : stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(this1)));
	return this2;
};
var stx_stream_WorkLift = function() { };
$hxClasses["stx.stream.WorkLift"] = stx_stream_WorkLift;
stx_stream_WorkLift.__name__ = "stx.stream.WorkLift";
stx_stream_WorkLift.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_stream_WorkLift.seq = function(self,that) {
	var tmp;
	if(self == null) {
		if(that == null) {
			tmp = null;
		} else {
			var y = that;
			tmp = y;
		}
	} else if(that == null) {
		var x = self;
		tmp = x;
	} else {
		var x = self;
		var y = that;
		tmp = stx_stream_CycleLift.seq(x,y);
	}
	return stx_stream_WorkLift.lift(tmp);
};
stx_stream_WorkLift.par = function(self,that) {
	var tmp;
	if(self == null) {
		if(that == null) {
			tmp = null;
		} else {
			var y = that;
			tmp = y;
		}
	} else if(that == null) {
		var x = self;
		tmp = x;
	} else {
		var x = self;
		var y = that;
		tmp = stx_stream_WorkLift.par(x,y);
	}
	return stx_stream_WorkLift.lift(tmp);
};
var stx_stream_core_Errors = function() { };
$hxClasses["stx.stream.core.Errors"] = stx_stream_core_Errors;
stx_stream_core_Errors.__name__ = "stx.stream.core.Errors";
stx_stream_core_Errors.e_end_called_twice = function(digests) {
	return new stx_stream_core_EEndCalledTwice();
};
var stx_stream_core_EEndCalledTwice = function() {
	stx_nano_Digest.call(this,"01FRQ80PZA3A57AZPXPQA7Z8YT","End called twice");
};
$hxClasses["stx.stream.core.EEndCalledTwice"] = stx_stream_core_EEndCalledTwice;
stx_stream_core_EEndCalledTwice.__name__ = "stx.stream.core.EEndCalledTwice";
stx_stream_core_EEndCalledTwice.__super__ = stx_nano_Digest;
stx_stream_core_EEndCalledTwice.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_stream_core_EEndCalledTwice
});
var stx_sys_fs_Catalog = function(path) {
	this.path = path;
};
$hxClasses["stx.sys.fs.Catalog"] = stx_sys_fs_Catalog;
stx_sys_fs_Catalog.__name__ = "stx.sys.fs.Catalog";
stx_sys_fs_Catalog.__interfaces__ = [haxe_IMap];
stx_sys_fs_Catalog.Unit = function(path) {
	return new stx_sys_fs_catalog_Unit(path);
};
stx_sys_fs_Catalog.prototype = {
	path: null
	,encode: null
	,decode: null
	,get: function(k) {
		var _gthis = this;
		var a = stx_nano_Way.toOsString(stx_nano_Way.snoc(this.path,k));
		return stx_nano_lift_LiftNano.if_else(this.exists(k),function() {
			return _gthis.decode(stx_Sys.sys(stx_nano_Wildcard.__).fs().get(a));
		},function() {
			return null;
		});
	}
	,set: function(k,v) {
		var a = stx_nano_Way.toOsString(stx_nano_Way.snoc(this.path,k));
		var _this = stx_Sys.sys(stx_nano_Wildcard.__).fs();
		js_node_Fs.writeFileSync(k,this.encode(v));
	}
	,exists: function(k) {
		var a = stx_nano_Way.toOsString(stx_nano_Way.snoc(this.path,k));
		return stx_Sys.sys(stx_nano_Wildcard.__).fs().exists(k);
	}
	,remove: function(k) {
		var result = this.exists(k);
		js_node_Fs.unlinkSync(stx_nano_Way.toOsString(stx_nano_Way.snoc(this.path,k)));
		return result;
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(js_node_Fs.readdirSync(stx_nano_Way.toOsString(this.path)));
	}
	,iterator: function() {
		var _gthis = this;
		return $getIterator(stx_nano_IterLift.map(stx_nano_lift_LiftIteratorToIter.toIter(this.keys()),function(x) {
			return _gthis.get(x);
		}));
	}
	,keyValueIterator: function() {
		var _gthis = this;
		return $getIterator(stx_nano_IterLift.map(stx_nano_lift_LiftIteratorToIter.toIter(this.keys()),function(x) {
			return { key : x, value : _gthis.get(x)};
		}));
	}
	,copy: function() {
		var n = new haxe_ds_StringMap();
		var _g = this.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var k = _g1.key;
			var v = _g1.value;
			n.h[k] = v;
		}
		return n;
	}
	,toString: function() {
		return "CATALOG";
	}
	,clear: function() {
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.remove(key1);
		}
	}
	,__class__: stx_sys_fs_Catalog
};
var stx_sys_fs_Clump = function(catalog,name) {
	this.catalog = catalog;
	this.name = name;
};
$hxClasses["stx.sys.fs.Clump"] = stx_sys_fs_Clump;
stx_sys_fs_Clump.__name__ = "stx.sys.fs.Clump";
stx_sys_fs_Clump.prototype = {
	catalog: null
	,name: null
	,put: function(data) {
		this.catalog.set(this.name,data);
	}
	,get: function() {
		return this.catalog.get(this.name);
	}
	,exists: function() {
		return this.catalog.exists(this.name);
	}
	,__class__: stx_sys_fs_Clump
};
var stx_sys_fs_catalog_Unit = function(path) {
	stx_sys_fs_Catalog.call(this,path);
};
$hxClasses["stx.sys.fs.catalog.Unit"] = stx_sys_fs_catalog_Unit;
stx_sys_fs_catalog_Unit.__name__ = "stx.sys.fs.catalog.Unit";
stx_sys_fs_catalog_Unit.__super__ = stx_sys_fs_Catalog;
stx_sys_fs_catalog_Unit.prototype = $extend(stx_sys_fs_Catalog.prototype,{
	encode: function(t) {
		return t;
	}
	,decode: function(str) {
		return str;
	}
	,__class__: stx_sys_fs_catalog_Unit
});
var stx_test_Assertions = {};
stx_test_Assertions.__properties__ = {get_failures:"get_failures"};
stx_test_Assertions.get_failures = function(this1) {
	return stx_lift_ArrayLift.map_filter(this1,function(x) {
		var self = stx_test_core_Assertion.outcome(x);
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return haxe_ds_Option.None;
		case 1:
			var e = self.e;
			return haxe_ds_Option.Some(e);
		}
	});
};
stx_test_Assertions.has_failures = function(this1) {
	return stx_test_Assertions.get_failures(this1).length > 0;
};
var stx_test_Async = {};
stx_test_Async.wait = function() {
	return new tink_core_FutureTrigger();
};
stx_test_Async.done = function(this1) {
	this1.trigger(stx_test_TestEffect.unit());
};
var stx_test_AsyncResult = {};
stx_test_AsyncResult.lift = function(self) {
	return self;
};
stx_test_AsyncResult.pure = function(v) {
	return stx_test_AsyncResult.lift(haxe_ds_Option.Some(v));
};
stx_test_AsyncResult.unit = function() {
	return stx_test_AsyncResult.lift(haxe_ds_Option.None);
};
stx_test_AsyncResult.tap = function(this1,fn) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		fn(t);
		break;
	case 1:
		break;
	}
};
stx_test_AsyncResult.use = function(this1,fn,nil,pos) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		var self;
		try {
			var _g = fn;
			var a1 = t;
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,(function() {
				return _g(a1);
			})());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(((_g3) instanceof stx_pico_Error)) {
				var e = _g3;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
			var f = null;
			var v = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/test/AsyncResult.hx", lineNumber : 22, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"})));
			if(self1._hx_index == 0) {
				var v1 = self1.v;
				return v1;
			} else {
				return v;
			}
			break;
		case 1:
			var e = self.e;
			return stx_nano_lift_LiftError.report(e);
		}
		break;
	case 1:
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,nil);
		var fn;
		if(self._hx_index == 0) {
			var v = self.v;
			fn = v;
		} else {
			fn = function() {
				var f = null;
				if(f == null) {
					return stx_nano_Report.unit();
				} else {
					return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/test/AsyncResult.hx", lineNumber : 25, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"})));
				}
			};
		}
		var pos = { fileName : "stx/test/AsyncResult.hx", lineNumber : 25, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"};
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(((_g3) instanceof stx_pico_Error)) {
				var e = _g3;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
			var f = null;
			var v = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/test/AsyncResult.hx", lineNumber : 26, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"})));
			if(self1._hx_index == 0) {
				var v1 = self1.v;
				return v1;
			} else {
				return v;
			}
			break;
		case 1:
			var e = self.e;
			return stx_nano_lift_LiftError.report(e);
		}
		break;
	}
};
stx_test_AsyncResult.test = function(this1,val,nil,pos) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		var _g = val;
		var a1 = t;
		var fn = stx_fn_Thunk.prj(stx_fn_BlockLift.returning(function() {
			_g(a1);
		},null));
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(((_g3) instanceof stx_pico_Error)) {
				var e = _g3;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/test/AsyncResult.hx", lineNumber : 34, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "test"})));
			}
			break;
		case 1:
			var e = self.e;
			return stx_nano_lift_LiftError.report(e);
		}
		break;
	case 1:
		var fn = stx_fn_Thunk.prj(stx_fn_BlockLift.returning(nil,null));
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(((_g3) instanceof stx_pico_Error)) {
				var e = _g3;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
			}
		}
		var tmp;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.NullTestFailure));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
			tmp = stx_nano_Report.pure(this1);
			break;
		case 1:
			var e = self.e;
			tmp = stx_nano_lift_LiftError.report(e);
			break;
		}
		return tmp;
	}
};
var stx_test_FnType = $hxEnums["stx.test.FnType"] = { __ename__:"stx.test.FnType",__constructs__:null
	,ZeroZero: {_hx_name:"ZeroZero",_hx_index:0,__enum__:"stx.test.FnType",toString:$estr}
	,ZeroOne: {_hx_name:"ZeroOne",_hx_index:1,__enum__:"stx.test.FnType",toString:$estr}
	,OneZero: {_hx_name:"OneZero",_hx_index:2,__enum__:"stx.test.FnType",toString:$estr}
};
stx_test_FnType.__constructs__ = [stx_test_FnType.ZeroZero,stx_test_FnType.ZeroOne,stx_test_FnType.OneZero];
var stx_test_Logging = function() { };
$hxClasses["stx.test.Logging"] = stx_test_Logging;
stx_test_Logging.__name__ = "stx.test.Logging";
stx_test_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/test/Logging.hx", lineNumber : 10, className : "stx.test.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_Log.unit();
		var tag = scope.pack.join("/");
		var this2 = this1;
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		};
		return function(value,pos) {
			this2(value,fn(pos));
		};
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_Log.unit();
	}
};
var stx_test_MethodCall = function(object,class_name,field_name,_call,timeout) {
	this.object = object;
	this.class_name = class_name;
	this.field_name = field_name;
	this._call = _call;
	this.timeout = timeout;
};
$hxClasses["stx.test.MethodCall"] = stx_test_MethodCall;
stx_test_MethodCall.__name__ = "stx.test.MethodCall";
stx_test_MethodCall.prototype = {
	object: null
	,class_name: null
	,field_name: null
	,_call: null
	,timeout: null
	,timestamp: null
	,call: function() {
		var _gthis = this;
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(0);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("call: timeout : " + this.get_timeout())(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/MethodCall.hx", lineNumber : 20, className : "stx.test.MethodCall", methodName : "call"}));
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/test/MethodCall.hx", lineNumber : 21, className : "stx.test.MethodCall", methodName : "call"});
		var t = this._call;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
		this.timestamp = HxOverrides.now() / 1000;
		var fn1 = stx_test_TestMethodZero.prj(this._call);
		var pos = { fileName : "stx/test/MethodCall.hx", lineNumber : 24, className : "stx.test.MethodCall", methodName : "call"};
		var res;
		try {
			res = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn1());
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g);
			var _g2 = _g1.unwrap();
			if(((_g2) instanceof stx_pico_Error)) {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this2 = e.errate(stx_nano_DeclinationSum.REJECT);
				res = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this2,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g1;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this2 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				res = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this2);
			}
		}
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			switch(t._hx_index) {
			case 0:
				var t1 = t.v;
				return tink_core_Future.first(t1,stx_test_core_Timeout.make(_gthis.get_timeout()));
			case 1:
				return stx_test_TestResult.unit();
			}
			break;
		case 1:
			var e = res.e;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_test_TestEffect.fromRejection(e)));
		}
	}
	,assertions: null
	,get_assertions: function() {
		var _gthis = this;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.object.__assertions;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(stx_nano_Position.get_methodName(v.pos) == _gthis.field_name) {
				_g.push(v);
			}
		}
		return _g;
	}
	,position: function() {
		var _gthis = this;
		var type = js_Boot.getClass(this.object);
		return stx_LiftIf.if_else(haxe_rtti_Rtti.hasRtti(type),function() {
			var clazz = haxe_rtti_Rtti.getRtti(type);
			var field = stx_lift_ArrayLift.search(clazz.fields,function(x) {
				return x.name == _gthis.field_name;
			});
			return stx_pico_OptionLift.map(field,function(field) {
				var parts = clazz.path.split(".");
				var fileName = clazz.file;
				var className = parts[parts.length - 1];
				var methodName = _gthis.field_name;
				var lineNumber = field.line;
				return stx_nano_Position.make(fileName,className,methodName,lineNumber);
			});
		},function() {
			return haxe_ds_Option.None;
		});
	}
	,depends: function() {
		var fields_meta = haxe_rtti_Meta.getFields(js_Boot.getClass(this.object));
		var self = stx_pico_OptionLift.flat_map(stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fields_meta),function(obj) {
			return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Reflect.field(obj,"stx.test.depends"));
		}),function(arr) {
			var result = new Array(arr.length);
			var _g = 0;
			var _g1 = arr.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = Std.string(arr[i]);
			}
			var _this = result;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var s = _this[i];
				var out = HxOverrides.substr(s,1,s.length - 2);
				result[i] = out;
			}
			return stx_pico_Option.fromNullT(result);
		});
		var field_meta;
		if(self._hx_index == 0) {
			var v = self.v;
			field_meta = v;
		} else {
			field_meta = [];
		}
		return field_meta;
	}
	,get_timeout: function() {
		var fields_meta = haxe_rtti_Meta.getFields(js_Boot.getClass(this.object));
		var field_meta = Reflect.field(fields_meta,this.field_name);
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Reflect.field(field_meta,"timeout")),function(arr) {
			return Std.parseInt(arr[0]);
		});
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return this.timeout;
		}
	}
	,has_assertions: function() {
		return this.get_assertions().length > 0;
	}
	,toString: function() {
		var location = this.class_name + this.field_name;
		return "MethodCall(" + location + ")";
	}
	,__class__: stx_test_MethodCall
	,__properties__: {get_assertions:"get_assertions"}
};
var stx_test_Reporter = function(stream) {
	stx_pico_Clazz.call(this);
	this.stream = stream;
};
$hxClasses["stx.test.Reporter"] = stx_test_Reporter;
stx_test_Reporter.__name__ = "stx.test.Reporter";
stx_test_Reporter.__super__ = stx_pico_Clazz;
stx_test_Reporter.prototype = $extend(stx_pico_Clazz.prototype,{
	stream: null
	,close: function(err) {
		if(err != null) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(5);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString(err.toString())(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Reporter.hx", lineNumber : 14, className : "stx.test.Reporter", methodName : "close"}));
		}
	}
	,indenter: function(indent) {
		return "" + indent + "\t";
	}
	,green_tick: null
	,get_green_tick: function() {
		return "<green>✓</green>";
	}
	,green_tick_on_black: null
	,get_green_tick_on_black: function() {
		return "<bg_black>" + this.get_green_tick() + "</bg_black>";
	}
	,red_cross: null
	,get_red_cross: function() {
		return "<red>✗</red>";
	}
	,red_cross_on_black: null
	,get_red_cross_on_black: function() {
		return "<bg_black>" + this.get_red_cross() + "</bg_black>";
	}
	,yellow_question_on_black: null
	,get_yellow_question_on_black: function() {
		return "<bg_black><yellow>?</yellow></bg_black>";
	}
	,bad: null
	,get_bad: function() {
		return this.get_red_cross_on_black();
	}
	,good: null
	,get_good: function() {
		return this.get_green_tick_on_black();
	}
	,println: function(str,indent) {
		if(indent == null) {
			indent = "";
		}
		var v = "" + indent + str;
		var s = Console.logPrefix + ("" + v);
		var outputStream = 0;
		if(outputStream == null) {
			outputStream = 0;
		}
		if(s == null) {
			s = "";
		}
		Console.printFormatted(s + "\n",outputStream);
	}
	,print_status: function(icon,str,indent) {
		if(indent == null) {
			indent = "";
		}
		var v = "" + icon + " " + indent + str;
		var s = Console.logPrefix + ("" + v);
		var outputStream = 0;
		if(outputStream == null) {
			outputStream = 0;
		}
		if(s == null) {
			s = "";
		}
		Console.printFormatted(s + "\n",outputStream);
	}
	,enact: function() {
		var _gthis = this;
		var closed = false;
		var serve = function(data) {
			var l0 = _gthis.indenter("");
			var l1 = _gthis.indenter(l0);
			var l2 = _gthis.indenter(l1);
			var l3 = _gthis.indenter(l2);
			var method_call_string_fn = function(test) {
				return "<blue>" + test.class_name + "::" + test.field_name + "</blue>";
			};
			var test_case_string_fn = function(test_case) {
				return "<light_white>" + test_case.class_name + "</light_white>";
			};
			switch(data._hx_index) {
			case 0:
				break;
			case 1:
				var info = data.info;
				var v = "" + info;
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 2:
				var test_case_data = data.test_case_data;
				var str = test_case_string_fn(test_case_data);
				var indent = l1;
				if(indent == null) {
					indent = "";
				}
				var v = "" + indent + str;
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 3:
				var method_call = data.method_call;
				var str = method_call_string_fn(method_call);
				var indent = l2;
				if(indent == null) {
					indent = "";
				}
				var v = "" + indent + str;
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 4:
				var err = data.err;
				var v = "" + ("<red>" + err.toString() + "</red>");
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				var tmp = err.get_stack();
				var v = "" + ("" + (tmp == null ? "null" : haxe_CallStack.toString(tmp)));
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 5:
				var err = data.f;
				var v = "" + ("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 6:
				var err = data.f;
				var v = "" + ("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 7:
				var err = data.f;
				var v = "" + ("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 8:
				var err = data.f;
				var v = "" + ("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 9:
				var _g = data.method_call;
				var assertion = data.assertion;
				var self = stx_test_core_Assertion.outcome(assertion);
				var assertion_string;
				switch(self._hx_index) {
				case 0:
					var t = self.t;
					assertion_string = t;
					break;
				case 1:
					var e = self.e;
					assertion_string = stx_Show.show(stx_nano_Wildcard.__,e);
					break;
				}
				var icon = _gthis.get_red_cross_on_black();
				var indent = l3;
				if(indent == null) {
					indent = "";
				}
				var v = "" + icon + " " + indent + ("<red>" + assertion_string + "</red>");
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				break;
			case 10:
				var method_call = data.method_call;
				if(!method_call.has_assertions()) {
					var icon = _gthis.get_yellow_question_on_black();
					var indent = l3;
					if(indent == null) {
						indent = "";
					}
					var v = "" + icon + " " + indent + "<yellow>no assertions</yellow>";
					var s = Console.logPrefix + ("" + v);
					var outputStream = 0;
					if(outputStream == null) {
						outputStream = 0;
					}
					if(s == null) {
						s = "";
					}
					Console.printFormatted(s + "\n",outputStream);
				}
				break;
			case 11:
				var test_case_data = data.test_case_data;
				if(!test_case_data.has_assertions()) {
					var icon = _gthis.get_yellow_question_on_black();
					var indent = l3;
					if(indent == null) {
						indent = "";
					}
					var v = "" + icon + " " + indent + "<yellow>no assertions</yellow>";
					var s = Console.logPrefix + ("" + v);
					var outputStream = 0;
					if(outputStream == null) {
						outputStream = 0;
					}
					if(s == null) {
						s = "";
					}
					Console.printFormatted(s + "\n",outputStream);
				}
				break;
			case 12:
				var test_suite = data.test_suite;
				var v = "_________________________________________________";
				var s = Console.logPrefix + ("" + v);
				var outputStream = 0;
				if(outputStream == null) {
					outputStream = 0;
				}
				if(s == null) {
					s = "";
				}
				Console.printFormatted(s + "\n",outputStream);
				var _g = 0;
				var _g1 = test_suite.test_cases;
				while(_g < _g1.length) {
					var test_case_data = _g1[_g];
					++_g;
					var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromBool(test_case_data.has_assertions());
					(function(fn,this1) {
						return function(value,pos) {
							this1[0](value,fn[0](pos));
						};
					})([(function() {
						return function(pos) {
							return pos.with_stamp((function() {
								return function(stamp) {
									return stamp.relevel(2);
								};
							})());
						};
					})()],[this1])(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Reporter.hx", lineNumber : 124, className : "stx.test.Reporter", methodName : "enact"}));
					if(!test_case_data.has_assertions()) {
						var v1 = "" + _gthis.get_yellow_question_on_black() + " " + "" + ("<yellow>" + test_case_data.class_name + "</yellow>");
						var s = Console.logPrefix + ("" + v1);
						var outputStream = 0;
						if(outputStream == null) {
							outputStream = 0;
						}
						if(s == null) {
							s = "";
						}
						Console.printFormatted(s + "\n",outputStream);
					} else if(!test_case_data.has_failures()) {
						var v2 = "" + _gthis.get_green_tick_on_black() + " " + "" + ("<green>" + test_case_data.class_name + "</green>");
						var s1 = Console.logPrefix + ("" + v2);
						var outputStream1 = 0;
						if(outputStream1 == null) {
							outputStream1 = 0;
						}
						if(s1 == null) {
							s1 = "";
						}
						Console.printFormatted(s1 + "\n",outputStream1);
					} else {
						var v3 = "" + _gthis.get_red_cross_on_black() + " " + "" + ("<red>" + test_case_data.class_name + "</red>");
						var s2 = Console.logPrefix + ("" + v3);
						var outputStream2 = 0;
						if(outputStream2 == null) {
							outputStream2 = 0;
						}
						if(s2 == null) {
							s2 = "";
						}
						Console.printFormatted(s2 + "\n",outputStream2);
					}
					var _g2 = 0;
					var _g3 = test_case_data.method_calls;
					while(_g2 < _g3.length) {
						var method_call = [_g3[_g2]];
						++_g2;
						var status = stx_LiftIf.if_else(method_call[0].has_assertions(),(function(method_call) {
							return function() {
								return stx_LiftIf.if_else(stx_test_Assertions.has_failures(method_call[0].get_assertions()),(function() {
									return function() {
										return _gthis.get_red_cross_on_black();
									};
								})(),(function() {
									return function() {
										return _gthis.get_green_tick_on_black();
									};
								})());
							};
						})(method_call),(function() {
							return function() {
								return _gthis.get_yellow_question_on_black();
							};
						})());
						var v4 = "" + status + " " + "" + ("<blue>" + method_call[0].field_name + "</blue>");
						var s3 = Console.logPrefix + ("" + v4);
						var outputStream3 = 0;
						if(outputStream3 == null) {
							outputStream3 = 0;
						}
						if(s3 == null) {
							s3 = "";
						}
						Console.printFormatted(s3 + "\n",outputStream3);
						var _g4 = 0;
						var _g5 = method_call[0].get_assertions();
						while(_g4 < _g5.length) {
							var assertion = [_g5[_g4]];
							++_g4;
							var predicate = stx_pico_OptionLift.is_defined(stx_Sys.sys(stx_nano_Wildcard.__).env("STX_TEST__VERBOSE"));
							if(predicate) {
								stx_LiftIf.if_else(assertion[0].truth,(function(assertion) {
									return function() {
										var icon = _gthis.get_green_tick_on_black();
										var str = assertion[0] == null ? "null" : stx_test_core_Assertion.toString(assertion[0]);
										var indent = l1;
										if(indent == null) {
											indent = "";
										}
										var v = "" + icon + " " + indent + ("<green>" + str + "</green>");
										var s = Console.logPrefix + ("" + v);
										var outputStream = 0;
										if(outputStream == null) {
											outputStream = 0;
										}
										if(s == null) {
											s = "";
										}
										Console.printFormatted(s + "\n",outputStream);
									};
								})(assertion),(function(assertion) {
									return function() {
										var icon = _gthis.get_red_cross_on_black();
										var str = assertion[0] == null ? "null" : stx_test_core_Assertion.toString(assertion[0]);
										var indent = l1;
										if(indent == null) {
											indent = "";
										}
										var v = "" + icon + " " + indent + ("<red>" + str + "</red>");
										var s = Console.logPrefix + ("" + v);
										var outputStream = 0;
										if(outputStream == null) {
											outputStream = 0;
										}
										if(s == null) {
											s = "";
										}
										Console.printFormatted(s + "\n",outputStream);
										var self = stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,assertion[0].failure),(function() {
											return function(x) {
												return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_TestFailure.get_stack(x));
											};
										})());
										var tmp;
										if(self._hx_index == 0) {
											var v = self.v;
											tmp = v;
										} else {
											tmp = null;
										}
										var v = "" + ("" + (tmp == null ? "null" : haxe_CallStack.toString(tmp)));
										var s = Console.logPrefix + ("" + v);
										var outputStream = 0;
										if(outputStream == null) {
											outputStream = 0;
										}
										if(s == null) {
											s = "";
										}
										Console.printFormatted(s + "\n",outputStream);
									};
								})(assertion));
							} else {
								stx_LiftIf.if_else(assertion[0].truth,(function() {
									return function() {
										return;
									};
								})(),(function(assertion) {
									return function() {
										var icon = _gthis.get_red_cross_on_black();
										var str = assertion[0] == null ? "null" : stx_test_core_Assertion.toString(assertion[0]);
										var indent = l1;
										if(indent == null) {
											indent = "";
										}
										var v = "" + icon + " " + indent + ("<red>" + str + "</red>");
										var s = Console.logPrefix + ("" + v);
										var outputStream = 0;
										if(outputStream == null) {
											outputStream = 0;
										}
										if(s == null) {
											s = "";
										}
										Console.printFormatted(s + "\n",outputStream);
									};
								})(assertion));
							}
						}
					}
				}
				if(!test_suite.is_clean()) {
					var _gthis1 = _gthis;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/test/Reporter.hx", lineNumber : 166, className : "stx.test.Reporter", methodName : "enact"});
					var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_test_core_Errors.e_suite_failed(stx_Nano.digests(stx_nano_Wildcard.__))));
					var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
						return stx_nano_Rejection.prj(x);
					});
					if(data == null) {
						data = haxe_ds_Option.None;
					}
					if(lst == null) {
						lst = haxe_ds_Option.None;
					}
					var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
					_gthis1.close(this2);
				} else {
					_gthis.close(null);
				}
				closed = true;
				break;
			}
		};
		this.stream.listen(function(chunk) {
			switch(chunk._hx_index) {
			case 0:
				var v = chunk.v;
				serve(v);
				break;
			case 1:
				break;
			case 2:
				var e = chunk.err;
				if(!closed) {
					_gthis.close(e);
				}
				break;
			}
		});
	}
	,__class__: stx_test_Reporter
	,__properties__: {get_good:"get_good",get_bad:"get_bad",get_yellow_question_on_black:"get_yellow_question_on_black",get_red_cross_on_black:"get_red_cross_on_black",get_red_cross:"get_red_cross",get_green_tick_on_black:"get_green_tick_on_black",get_green_tick:"get_green_tick"}
});
var stx_test_Runner = function(timeout) {
	if(timeout == null) {
		timeout = 6000;
	}
	this.timeout = timeout;
};
$hxClasses["stx.test.Runner"] = stx_test_Runner;
stx_test_Runner.__name__ = "stx.test.Runner";
stx_test_Runner.prototype = {
	timeout: null
	,apply: function(cases) {
		var _gthis = this;
		var result = new Array(cases.length);
		var _g = 0;
		var _g1 = cases.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = cases[i].__stx__tests(_gthis.timeout);
		}
		var test_cases = result;
		var sig = stx_Stream.fromArray(test_cases);
		return stx_StreamLift.seq(stx_StreamLift.flat_map(sig,function(val) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(1);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("TestCase:= " + Std.string(val))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 15, className : "stx.test.Runner", methodName : "apply"}));
			return stx_StreamLift.seq(stx_StreamLift.seq(stx_Stream.pure(stx_test_TestPhaseSum.TP_StartTestCase(val)),stx_test_TestCaseDataRun.apply(val,_gthis.timeout)),stx_Stream.effect(function() {
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var fn = function(pos) {
					return pos.with_stamp(function(stamp) {
						return stamp.relevel(2);
					});
				};
				(function(value,pos) {
					this1(value,fn(pos));
				})(stx_log_Stringify.fromString("After TestCaseDataRun")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 18, className : "stx.test.Runner", methodName : "apply"}));
			}));
		}),stx_Stream.pure(stx_test_TestPhaseSum.TP_ReportTestSuiteComplete(new stx_test_TestSuite(test_cases))));
	}
	,__class__: stx_test_Runner
};
var stx_test_TestCaseDataRun = function() { };
$hxClasses["stx.test.TestCaseDataRun"] = stx_test_TestCaseDataRun;
stx_test_TestCaseDataRun.__name__ = "stx.test.TestCaseDataRun";
stx_test_TestCaseDataRun.apply = function(test_case_data,timeout) {
	var setup = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__setup)),timeout,stx_test_TestPhaseSum.TP_Setup);
	var teardown = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__teardown)),timeout,stx_test_TestPhaseSum.TP_Teardown);
	return stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(setup,stx_StreamLift.flat_map(stx_Stream.fromArray(test_case_data.method_calls),function(method_call) {
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(1);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("apply: TestCaseDataRun: " + Std.string(test_case_data) + " " + Std.string(method_call))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 29, className : "stx.test.TestCaseDataRun", methodName : "apply"}));
		var init = stx_Stream.pure(stx_test_TestPhaseSum.TP_StartTest(method_call));
		var before = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__before)),timeout,stx_test_TestPhaseSum.TP_Before);
		var after = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__after)),timeout,stx_test_TestPhaseSum.TP_After);
		return stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(init,before),stx_Stream.effect(function() {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(1);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("before " + Std.string(test_case_data) + " " + Std.string(method_call))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 35, className : "stx.test.TestCaseDataRun", methodName : "apply"}));
		})),stx_test_MethodCallRun.apply(method_call)),stx_Stream.effect(function() {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(1);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("after " + Std.string(test_case_data) + " " + Std.string(method_call))(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 37, className : "stx.test.TestCaseDataRun", methodName : "apply"}));
		})),after);
	})),teardown),stx_Stream.pure(stx_test_TestPhaseSum.TP_ReportTestCaseComplete(test_case_data)));
};
stx_test_TestCaseDataRun.updown = function(fn,timeout,cons) {
	var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
	var fn1 = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(0);
		});
	};
	(function(value,pos) {
		this1(value,fn1(pos));
	})(stx_log_Stringify.fromString("updown")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 43, className : "stx.test.TestCaseDataRun", methodName : "updown"}));
	var self = function() {
		var self = stx_pico_Option.flatten(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn()));
		var self1;
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			self1 = tink_core_Future.first(t,stx_test_core_Timeout.make(timeout));
			break;
		case 1:
			self1 = stx_test_TestResult.unit();
			break;
		}
		return tink_core_Future.map(tink_core_Future.map(self1,function(x) {
			return x();
		}),function(opt) {
			switch(opt._hx_index) {
			case 0:
				var t = opt.v;
				return cons(t);
			case 1:
				return stx_test_TestPhaseSum.TP_Null;
			}
		});
	};
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	}));
};
var stx_test_MethodCallRun = function() { };
$hxClasses["stx.test.MethodCallRun"] = stx_test_MethodCallRun;
stx_test_MethodCallRun.__name__ = "stx.test.MethodCallRun";
stx_test_MethodCallRun.apply = function(method_call) {
	var self = function() {
		return tink_core_Future.map(method_call.call(),function(eff) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(2);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("" + method_call.field_name + " called")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 56, className : "stx.test.MethodCallRun", methodName : "apply"}));
			var self = eff();
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				var method_call1 = method_call.object;
				var self = method_call.position();
				var self1;
				if(self._hx_index == 0) {
					var v = self.v;
					self1 = v;
				} else {
					self1 = null;
				}
				method_call1.error_test("EFF",t,self1);
				return null;
			case 1:
				return null;
			}
		});
	};
	return stx_StreamLift.flat_map(stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	})),function(_) {
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var fn = function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.relevel(1);
			});
		};
		(function(value,pos) {
			this1(value,fn(pos));
		})(stx_log_Stringify.fromString("after " + method_call.field_name + " effects")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 66, className : "stx.test.MethodCallRun", methodName : "apply"}));
		var asserts = method_call.get_assertions();
		var stream = stx_StreamLift.flat_map(stx_Stream.fromArray(asserts),function(val) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var fn = function(pos) {
				return pos.with_stamp(function(stamp) {
					return stamp.relevel(1);
				});
			};
			(function(value,pos) {
				this1(value,fn(pos));
			})(stx_log_Stringify.fromString("before " + method_call.field_name + " AssertionRun")(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/test/Runner.hx", lineNumber : 70, className : "stx.test.MethodCallRun", methodName : "apply"}));
			return stx_test_AssertionRun.apply(val,method_call);
		});
		return stream;
	});
};
var stx_test_AssertionRun = function() { };
$hxClasses["stx.test.AssertionRun"] = stx_test_AssertionRun;
stx_test_AssertionRun.__name__ = "stx.test.AssertionRun";
stx_test_AssertionRun.apply = function(assertion,method_call) {
	return stx_LiftIf.if_else(assertion.truth,function() {
		return stx_Stream.unit();
	},function() {
		return stx_Stream.pure(stx_test_TestPhaseSum.TP_ReportFailure(assertion,method_call));
	});
};
var stx_test_TestCaseData = function(test_case,class_name,method_calls) {
	this.test_case = test_case;
	this.class_name = class_name;
	this.method_calls = method_calls;
};
$hxClasses["stx.test.TestCaseData"] = stx_test_TestCaseData;
stx_test_TestCaseData.__name__ = "stx.test.TestCaseData";
stx_test_TestCaseData.prototype = {
	test_case: null
	,class_name: null
	,method_calls: null
	,has_failures: function() {
		var failed = false;
		var _g = 0;
		var _g1 = this.method_calls;
		while(_g < _g1.length) {
			var mc = _g1[_g];
			++_g;
			if(stx_test_Assertions.get_failures(mc.get_assertions()).length > 0) {
				failed = true;
				break;
			}
		}
		return failed;
	}
	,has_assertions: function() {
		var bool = false;
		var _g = 0;
		var _g1 = this.method_calls;
		while(_g < _g1.length) {
			var mc = _g1[_g];
			++_g;
			bool = mc.has_assertions();
			if(bool) {
				break;
			}
		}
		return bool;
	}
	,toString: function() {
		return "TestCaseData(" + this.class_name + ")";
	}
	,__class__: stx_test_TestCaseData
};
var stx_test_TestCaseLift = function() { };
$hxClasses["stx.test.TestCaseLift"] = stx_test_TestCaseLift;
stx_test_TestCaseLift.__name__ = "stx.test.TestCaseLift";
stx_test_TestCaseLift.get_tests = function(v,timeout) {
	var clazz = js_Boot.getClass(v);
	var class_name = clazz.__name__;
	var type_meta = haxe_rtti_Meta.getType(clazz);
	var type_is_async = Object.prototype.hasOwnProperty.call(type_meta,"stx.test.async");
	var fields = Type.getInstanceFields(clazz);
	var fields_meta = haxe_rtti_Meta.getFields(clazz);
	var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
	var fn = function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(2);
		});
	};
	(function(value,pos) {
		this1(value,fn(pos));
	})(new stx_log_EntryCtr().pure(fields),stx_log_LogPosition.fromPos({ fileName : "stx/test/TestCaseLift.hx", lineNumber : 17, className : "stx.test.TestCaseLift", methodName : "get_tests"}));
	var _g = [];
	var _g1 = 0;
	var _g2 = fields;
	while(_g1 < _g2.length) {
		var v1 = _g2[_g1];
		++_g1;
		if(StringTools.startsWith(v1,"test")) {
			_g.push(v1);
		}
	}
	var test_fields = _g;
	var applications = stx_lift_ArrayLift.map_filter(test_fields,function(field_name) {
		var field_meta = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Reflect.field(fields_meta,field_name));
		var self = stx_pico_OptionLift.map(field_meta,function(o) {
			return Object.prototype.hasOwnProperty.call(o,"stx.test.async");
		});
		var field_is_async;
		if(self._hx_index == 0) {
			var v1 = self.v;
			field_is_async = v1;
		} else {
			field_is_async = false;
		}
		if(type_is_async || field_is_async) {
			return haxe_ds_Option.Some(stx_test_TestCaseLift.get_test(v,class_name,field_name,stx_test_FnType.OneZero,timeout));
		} else {
			return haxe_ds_Option.Some(stx_test_TestCaseLift.get_test(v,class_name,field_name,stx_test_FnType.ZeroZero,timeout));
		}
	});
	var result = new Array(applications.length);
	var _g = 0;
	var _g1 = applications.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = applications[i].field_name;
	}
	var names = result;
	var name_exists = function(name) {
		return stx_lift_ArrayLift.any(names,function(n) {
			return n == name;
		});
	};
	var depends_on = function(l,r) {
		return stx_lift_ArrayLift.any(l.depends(),function(name) {
			return r.field_name == name;
		});
	};
	var _this = applications.slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var application = _this[i];
		var get_depends = [null];
		get_depends[0] = (function(get_depends) {
			return function(application,stack) {
				var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stack);
				if(self._hx_index == 0) {
					var v = self.v;
					stack = v;
				} else {
					stack = [];
				}
				var _this = application.depends();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var string = [_this[i]];
					result[i] = stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,string[0],stx_lift_ArrayLift.search(applications,(function(string) {
						return function(application) {
							return application.field_name == string[0];
						};
					})(string)));
				}
				var _this = result;
				var f = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,(function() {
					return function(string,option) {
						var self = stx_nano_lift_LiftOptionNano.resolve(option,(function() {
							return function(f) {
								var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.DIGEST(stx_test_core_Errors.e_dependency_not_found(stx_Nano.digests(stx_nano_Wildcard.__),"" + string)));
								var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,(function() {
									return function(x) {
										return stx_nano_Rejection.prj(x);
									};
								})());
								if(data == null) {
									data = haxe_ds_Option.None;
								}
								if(lst == null) {
									lst = haxe_ds_Option.None;
								}
								var this1 = new stx_pico_ErrorBase(data,lst,f == null ? haxe_ds_Option.None : haxe_ds_Option.Some(f)).toError();
								return this1;
							};
						})(),{ fileName : "stx/test/TestCaseLift.hx", lineNumber : 51, className : "stx.test.TestCaseLift", methodName : "get_tests"});
						var value;
						switch(self._hx_index) {
						case 0:
							var t = self.t;
							value = t;
							break;
						case 1:
							var e = self.e;
							throw haxe_Exception.thrown(e);
						}
						return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,string,value);
					};
				})());
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = f(_this[i]);
				}
				var dependencies = result;
				var _g = [];
				var _g1 = 0;
				var _g2 = dependencies;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(!stx_lift_ArrayLift.any(stack,(function(couple) {
						return function(name) {
							return stx_nano_CoupleLift.fst(couple[0]) == name;
						};
					})([v]))) {
						_g.push(v);
					}
				}
				return stx_lift_ArrayLift.flat_map(_g,(function(get_depends) {
					return function(couple) {
						return stx_LiftIf.if_else(stx_nano_CoupleLift.snd(couple).depends().length > 0,(function(get_depends) {
							return function() {
								var get_depends1 = get_depends[0];
								var tmp = stx_nano_CoupleLift.snd(couple);
								var result = new Array(dependencies.length);
								var _g = 0;
								var _g1 = dependencies.length;
								while(_g < _g1) {
									var i = _g++;
									result[i] = stx_nano_CoupleLift.fst(dependencies[i]);
								}
								return get_depends1(tmp,result);
							};
						})(get_depends),(function() {
							return function() {
								var result = new Array(dependencies.length);
								var _g = 0;
								var _g1 = dependencies.length;
								while(_g < _g1) {
									var i = _g++;
									result[i] = stx_nano_CoupleLift.fst(dependencies[i]);
								}
								return result;
							};
						})());
					};
				})(get_depends));
			};
		})(get_depends);
		var dependencies = get_depends[0](application);
		var result1 = new Array(dependencies.length);
		var _g2 = 0;
		var _g3 = dependencies.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var s = [dependencies[i1]];
			var self = stx_lift_ArrayLift.search(applications,(function(s) {
				return function(application) {
					return application.field_name == s[0];
				};
			})(s));
			var tmp;
			if(self._hx_index == 0) {
				var v1 = self.v;
				tmp = v1;
			} else {
				throw haxe_Exception.thrown("no method named `" + s[0] + "` available on " + application.field_name + "}");
			}
			result1[i1] = tmp;
		}
		var depends = result1;
		result[i] = [application].concat(depends);
	}
	var ordered_applications = result;
	var inner_order = function(l,r) {
		return stx_lift_ArrayLift.any(l,function(x) {
			return stx_lift_ArrayLift.any(r,function(y) {
				return x.field_name == y.field_name;
			});
		});
	};
	haxe_ds_ArraySort.sort(ordered_applications,function(lhs,rhs) {
		if(inner_order(lhs,rhs)) {
			return 1;
		} else if(inner_order(rhs,lhs)) {
			return -1;
		} else {
			return 0;
		}
	});
	var reworked_applications = stx_lift_ArrayLift.map_filter(ordered_applications,function(_) {
		return stx_lift_ArrayLift.head(_);
	});
	var reordered_applications = stx_lift_ArrayLift.map_filter(ordered_applications,function(_) {
		return stx_lift_ArrayLift.head(_);
	});
	return new stx_test_TestCaseData(v.asTestCase(),class_name,reordered_applications);
};
stx_test_TestCaseLift.get_test = function(test_case,class_name,field_name,size,timeout) {
	var c = js_Boot.getClass(test_case);
	var type_name = c.__name__;
	var call = stx_test_TestCaseLift.make_call(test_case,field_name,size);
	return new stx_test_MethodCall(test_case,class_name,field_name,call,timeout);
};
stx_test_TestCaseLift.make_call = function(test_case,field_name,len) {
	var call_zero_zero = function() {
		return Reflect.field(test_case,field_name).apply(test_case,[]);
	};
	var call_zero_one = function() {
		return Reflect.field(test_case,field_name).apply(test_case,[]);
	};
	var call_one = function(v) {
		return Reflect.field(test_case,field_name).apply(test_case,[v]);
	};
	var wrap = function(fn) {
		return function() {
			try {
				return fn();
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				test_case.raise(e,null,{ fileName : "stx/test/TestCaseLift.hx", lineNumber : 127, className : "stx.test.TestCaseLift", methodName : "make_call"});
				return haxe_ds_Option.None;
			}
		};
	};
	var tmp;
	switch(len._hx_index) {
	case 0:
		tmp = wrap(function() {
			call_zero_zero();
			return haxe_ds_Option.None;
		});
		break;
	case 1:
		tmp = wrap(function() {
			var out = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,call_zero_one());
			return out;
		});
		break;
	case 2:
		tmp = wrap(function() {
			var async = stx_test_Async.wait();
			call_one(async);
			return haxe_ds_Option.Some(async);
		});
		break;
	}
	return stx_test_TestMethodZero.lift(tmp);
};
var stx_test_TestEffect = {};
stx_test_TestEffect.unit = function() {
	return function() {
		return stx_pico_Option.unit();
	};
};
stx_test_TestEffect.fromFn = function(fn,pos) {
	return function() {
		var fn1 = stx_fn_Thunk.prj(stx_fn_BlockLift.returning(fn,null));
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn1());
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g);
			var _g2 = _g1.unwrap();
			if(((_g2) instanceof stx_pico_Error)) {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g1;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return stx_pico_Option.unit();
		case 1:
			var e = self.e;
			return stx_pico_Option.pure(stx_fail_TestFailureSum.E_Test_Rejection(e));
		}
	};
};
stx_test_TestEffect.fromTestFailure = function(self) {
	return function() {
		return stx_pico_Option.pure(self);
	};
};
stx_test_TestEffect.fromError = function(err) {
	return function() {
		var this1 = err.errate(stx_nano_DeclinationSum.REJECT);
		return stx_pico_Option.pure(stx_fail_TestFailureSum.E_Test_Rejection(this1));
	};
};
stx_test_TestEffect.fromRejection = function(err) {
	return function() {
		return stx_pico_Option.pure(stx_fail_TestFailureSum.E_Test_Rejection(err));
	};
};
var stx_test_TestMethodSum = $hxEnums["stx.test.TestMethodSum"] = { __ename__:"stx.test.TestMethodSum",__constructs__:null
	,TMZero: ($_=function(m) { return {_hx_index:0,m:m,__enum__:"stx.test.TestMethodSum",toString:$estr}; },$_._hx_name="TMZero",$_.__params__ = ["m"],$_)
	,TMOne: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"stx.test.TestMethodSum",toString:$estr}; },$_._hx_name="TMOne",$_.__params__ = ["m"],$_)
};
stx_test_TestMethodSum.__constructs__ = [stx_test_TestMethodSum.TMZero,stx_test_TestMethodSum.TMOne];
var stx_test_TestMethod = {};
stx_test_TestMethod._new = function(self) {
	var this1 = self;
	return this1;
};
stx_test_TestMethod.lift = function(self) {
	return stx_test_TestMethod._new(self);
};
stx_test_TestMethod.fromTestMethodZero = function(self) {
	return stx_test_TestMethod.lift(stx_test_TestMethodSum.TMZero(self));
};
stx_test_TestMethod.fromTestMethodOne = function(self) {
	return stx_test_TestMethod.lift(stx_test_TestMethodSum.TMOne(self));
};
stx_test_TestMethod.prj = function(this1) {
	return this1;
};
var stx_test_TestMethodOne = {};
stx_test_TestMethodOne._new = function(self) {
	var this1 = self;
	return this1;
};
stx_test_TestMethodOne.fromCallback = function(fn) {
	return stx_test_TestMethodOne._new(fn);
};
var stx_test_TestMethodZero = {};
stx_test_TestMethodZero._new = function(self) {
	var this1 = self;
	return this1;
};
stx_test_TestMethodZero.lift = function(self) {
	return stx_test_TestMethodZero._new(self);
};
stx_test_TestMethodZero.fromVoid = function(fn) {
	return stx_test_TestMethodZero.lift(function() {
		fn();
		return haxe_ds_Option.None;
	});
};
stx_test_TestMethodZero.fromAsync = function(fn) {
	return stx_test_TestMethodZero.lift(function() {
		return haxe_ds_Option.Some(fn());
	});
};
stx_test_TestMethodZero.prj = function(this1) {
	return this1;
};
var stx_test_TestPhaseSum = $hxEnums["stx.test.TestPhaseSum"] = { __ename__:"stx.test.TestPhaseSum",__constructs__:null
	,TP_Null: {_hx_name:"TP_Null",_hx_index:0,__enum__:"stx.test.TestPhaseSum",toString:$estr}
	,TP_Tick: ($_=function(info) { return {_hx_index:1,info:info,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Tick",$_.__params__ = ["info"],$_)
	,TP_StartTestCase: ($_=function(test_case_data) { return {_hx_index:2,test_case_data:test_case_data,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_StartTestCase",$_.__params__ = ["test_case_data"],$_)
	,TP_StartTest: ($_=function(method_call) { return {_hx_index:3,method_call:method_call,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_StartTest",$_.__params__ = ["method_call"],$_)
	,TP_ReportFatal: ($_=function(err) { return {_hx_index:4,err:err,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportFatal",$_.__params__ = ["err"],$_)
	,TP_Setup: ($_=function(f) { return {_hx_index:5,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Setup",$_.__params__ = ["f"],$_)
	,TP_Before: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Before",$_.__params__ = ["f"],$_)
	,TP_After: ($_=function(f) { return {_hx_index:7,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_After",$_.__params__ = ["f"],$_)
	,TP_Teardown: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Teardown",$_.__params__ = ["f"],$_)
	,TP_ReportFailure: ($_=function(assertion,method_call) { return {_hx_index:9,assertion:assertion,method_call:method_call,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportFailure",$_.__params__ = ["assertion","method_call"],$_)
	,TP_ReportTestComplete: ($_=function(method_call) { return {_hx_index:10,method_call:method_call,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportTestComplete",$_.__params__ = ["method_call"],$_)
	,TP_ReportTestCaseComplete: ($_=function(test_case_data) { return {_hx_index:11,test_case_data:test_case_data,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportTestCaseComplete",$_.__params__ = ["test_case_data"],$_)
	,TP_ReportTestSuiteComplete: ($_=function(test_suite) { return {_hx_index:12,test_suite:test_suite,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportTestSuiteComplete",$_.__params__ = ["test_suite"],$_)
};
stx_test_TestPhaseSum.__constructs__ = [stx_test_TestPhaseSum.TP_Null,stx_test_TestPhaseSum.TP_Tick,stx_test_TestPhaseSum.TP_StartTestCase,stx_test_TestPhaseSum.TP_StartTest,stx_test_TestPhaseSum.TP_ReportFatal,stx_test_TestPhaseSum.TP_Setup,stx_test_TestPhaseSum.TP_Before,stx_test_TestPhaseSum.TP_After,stx_test_TestPhaseSum.TP_Teardown,stx_test_TestPhaseSum.TP_ReportFailure,stx_test_TestPhaseSum.TP_ReportTestComplete,stx_test_TestPhaseSum.TP_ReportTestCaseComplete,stx_test_TestPhaseSum.TP_ReportTestSuiteComplete];
var stx_test_TestResult = {};
stx_test_TestResult.pure = function(self) {
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_test_TestResult.unit = function() {
	var self = stx_test_TestEffect.unit();
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_test_TestResult.fromError = function(err) {
	var self = stx_test_TestEffect.fromError(err);
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
var stx_test_TestSuite = function(test_cases) {
	this.test_cases = test_cases;
};
$hxClasses["stx.test.TestSuite"] = stx_test_TestSuite;
stx_test_TestSuite.__name__ = "stx.test.TestSuite";
stx_test_TestSuite.prototype = {
	test_cases: null
	,is_clean: function() {
		var clean = true;
		var _g = 0;
		var _g1 = this.test_cases;
		while(_g < _g1.length) {
			var tcd = _g1[_g];
			++_g;
			if(tcd.has_failures()) {
				clean = false;
				break;
			}
		}
		return clean;
	}
	,__class__: stx_test_TestSuite
};
var stx_test_Util = function() { };
$hxClasses["stx.test.Util"] = stx_test_Util;
stx_test_Util.__name__ = "stx.test.Util";
stx_test_Util.or_res = function(fn,pos) {
	try {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var _g1 = haxe_Exception.caught(_g);
		var _g2 = _g1.unwrap();
		if(((_g2) instanceof stx_pico_Error)) {
			var e = _g2;
			var tmp = e.get_stack();
			haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
			var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
		} else {
			var e = _g1;
			var tmp = e.get_stack();
			haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
			var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
		}
	}
};
var stx_test_WrappedFuture = {};
stx_test_WrappedFuture.__properties__ = {get_self:"get_self"};
stx_test_WrappedFuture._new = function(self) {
	var this1 = self;
	return this1;
};
stx_test_WrappedFuture.consume = function(this1,cb,async) {
	var link = this1.handle(function(x) {
		var pos = { fileName : "stx/test/WrappedFuture.hx", lineNumber : 8, className : "stx.test._WrappedFuture.WrappedFuture_Impl_", methodName : "consume"};
		var self;
		try {
			var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cb(stx_nano_TripleLift.thd(x)));
			var v = stx_nano_Report.unit();
			var self2;
			if(self1._hx_index == 0) {
				var v1 = self1.v;
				self2 = v1;
			} else {
				self2 = v;
			}
			if(self2 != null) {
				switch(self2._hx_index) {
				case 0:
					var v = self2.v;
					var str = stx_Show.show(stx_nano_Wildcard.__,v.get_val());
					stx_nano_TripleLift.snd(x).error(v,stx_nano_TripleLift.fst(x));
					break;
				case 1:
					break;
				}
			}
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g);
			var _g2 = _g1.unwrap();
			if(((_g2) instanceof stx_pico_Error)) {
				var e = _g2;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"});
				var this1 = e.errate(stx_nano_DeclinationSum.REJECT);
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Rejection.errate(this1,stx_fail_TestFailureSum.E_Test_Rejection));
			} else {
				var e = _g1;
				var tmp = e.get_stack();
				haxe_Log.trace(tmp == null ? "null" : haxe_CallStack.toString(tmp),{ fileName : "stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"});
				var data = haxe_ds_Option.Some(stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Exception(e)));
				var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
					return stx_nano_Rejection.prj(x);
				});
				if(data == null) {
					data = haxe_ds_Option.None;
				}
				if(lst == null) {
					lst = haxe_ds_Option.None;
				}
				var this1 = new stx_pico_ErrorBase(data,lst,pos == null ? haxe_ds_Option.None : haxe_ds_Option.Some(pos)).toError();
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,this1);
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			break;
		case 1:
			var e = self.e;
			var link = stx_nano_TripleLift.snd(x);
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,stx_nano_TripleLift.fst(x));
			var data = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_DeclinationSum.REJECT(stx_fail_TestFailureSum.E_Test_Rejection(e)));
			var lst = stx_pico_OptionLift.map(haxe_ds_Option.None,function(x) {
				return stx_nano_Rejection.prj(x);
			});
			if(data == null) {
				data = haxe_ds_Option.None;
			}
			if(lst == null) {
				lst = haxe_ds_Option.None;
			}
			var this2 = new stx_pico_ErrorBase(data,lst,this1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(this1)).toError();
			link.error(this2,stx_nano_TripleLift.fst(x));
			break;
		}
		if(async != null) {
			stx_test_Async.done(async);
		}
	});
};
stx_test_WrappedFuture.lift = function(self) {
	return stx_test_WrappedFuture._new(self);
};
stx_test_WrappedFuture.prj = function(this1) {
	return this1;
};
stx_test_WrappedFuture.get_self = function(this1) {
	return this1;
};
var stx_test_core_Assertion = {};
stx_test_core_Assertion.make = function(truth,explanation,failure,pos) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,failure);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_fail_TestFailureSum.TestFailedBecause(explanation);
	}
	return stx_test_core_Assertion._new({ truth : truth, explanation : explanation, failure : tmp, pos : pos});
};
stx_test_core_Assertion.outcome = function(this1) {
	if(this1.truth) {
		return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,this1.explanation);
	} else {
		return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,this1.failure);
	}
};
stx_test_core_Assertion.toString = function(this1) {
	var self = stx_test_core_Assertion.outcome(this1);
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		return stx_Show.show(stx_nano_Wildcard.__,e);
	}
};
stx_test_core_Assertion._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_test_core_Dependencies = function(source) {
	this.source = source;
};
$hxClasses["stx.test.core.Dependencies"] = stx_test_core_Dependencies;
stx_test_core_Dependencies.__name__ = "stx.test.core.Dependencies";
stx_test_core_Dependencies.prototype = {
	source: null
	,reply: function() {
		var target = this.source.slice();
	}
	,center: function(arr) {
		return Math.round(this.source.length / 2);
	}
	,__class__: stx_test_core_Dependencies
};
var stx_test_core_Errors = function() { };
$hxClasses["stx.test.core.Errors"] = stx_test_core_Errors;
stx_test_core_Errors.__name__ = "stx.test.core.Errors";
stx_test_core_Errors.e_dependency_not_found = function(digests,name) {
	return new stx_test_core_EDependencyNotFound(name);
};
stx_test_core_Errors.e_suite_failed = function(digests) {
	return new stx_test_core_ESuiteFailed();
};
var stx_test_core_EDependencyNotFound = function(name) {
	stx_nano_Digest.call(this,"01FRQ8G5NCTBY7YV908Y41NZPP","Dependency " + name + " not found");
};
$hxClasses["stx.test.core.EDependencyNotFound"] = stx_test_core_EDependencyNotFound;
stx_test_core_EDependencyNotFound.__name__ = "stx.test.core.EDependencyNotFound";
stx_test_core_EDependencyNotFound.__super__ = stx_nano_Digest;
stx_test_core_EDependencyNotFound.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_test_core_EDependencyNotFound
});
var stx_test_core_ESuiteFailed = function() {
	stx_nano_Digest.call(this,"01FRQ8KHEHGBBSTN89XC492A0E","TestSuite failed");
};
$hxClasses["stx.test.core.ESuiteFailed"] = stx_test_core_ESuiteFailed;
stx_test_core_ESuiteFailed.__name__ = "stx.test.core.ESuiteFailed";
stx_test_core_ESuiteFailed.__super__ = stx_nano_Digest;
stx_test_core_ESuiteFailed.prototype = $extend(stx_nano_Digest.prototype,{
	__class__: stx_test_core_ESuiteFailed
});
var stx_test_core_Timeout = function() { };
$hxClasses["stx.test.core.Timeout"] = stx_test_core_Timeout;
stx_test_core_Timeout.__name__ = "stx.test.core.Timeout";
stx_test_core_Timeout.make = function(timeout) {
	return tink_core_Future.map(stx_stream_Timeout._new(timeout),function(_) {
		return stx_test_TestEffect.fromTestFailure(stx_fail_TestFailureSum.TestTimedOut(timeout));
	});
};
var sys_FileSystem = function() { };
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = "sys.FileSystem";
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		if(e.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g1 ) {
				throw e;
			}
			if(!stat.isDirectory()) {
				throw e;
			}
		}
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
$hxClasses["sys.io.FileInput"] = sys_io_FileInput;
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,pos: null
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
$hxClasses["sys.io.FileOutput"] = sys_io_FileOutput;
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,pos: null
	,writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:"sys.io.FileSeek",__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
$hxClasses["tink.core.Annex"] = tink_core_Annex;
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		tink_core_Callback.defer(function() {
			this1(data);
		});
	}
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	global.setImmediate(f);
};
var tink_core_LinkObject = function() { };
$hxClasses["tink.core.LinkObject"] = tink_core_LinkObject;
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLinkRef = function() {
};
$hxClasses["tink.core.CallbackLinkRef"] = tink_core_CallbackLinkRef;
tink_core_CallbackLinkRef.__name__ = "tink.core.CallbackLinkRef";
tink_core_CallbackLinkRef.__interfaces__ = [tink_core_LinkObject];
tink_core_CallbackLinkRef.prototype = {
	link: null
	,set_link: function(param) {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		return this.link = param;
	}
	,cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,__class__: tink_core_CallbackLinkRef
	,__properties__: {set_link:"set_link"}
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(this1,b) {
	return new tink_core__$Callback_LinkPair(this1,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
$hxClasses["tink.core.SimpleLink"] = tink_core_SimpleLink;
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core._Callback.LinkPair"] = tink_core__$Callback_LinkPair;
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
$hxClasses["tink.core._Callback.ListCell"] = tink_core__$Callback_ListCell;
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Disposable = function() { };
$hxClasses["tink.core.Disposable"] = tink_core_Disposable;
tink_core_Disposable.__name__ = "tink.core.Disposable";
tink_core_Disposable.__isInterface__ = true;
tink_core_Disposable.prototype = {
	get_disposed: null
	,ondispose: null
	,__class__: tink_core_Disposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_OwnedDisposable = function() { };
$hxClasses["tink.core.OwnedDisposable"] = tink_core_OwnedDisposable;
tink_core_OwnedDisposable.__name__ = "tink.core.OwnedDisposable";
tink_core_OwnedDisposable.__isInterface__ = true;
tink_core_OwnedDisposable.__interfaces__ = [tink_core_Disposable];
tink_core_OwnedDisposable.prototype = {
	dispose: null
	,__class__: tink_core_OwnedDisposable
};
var tink_core_SimpleDisposable = function(dispose) {
	this.disposeHandlers = [];
	this.f = dispose;
};
$hxClasses["tink.core.SimpleDisposable"] = tink_core_SimpleDisposable;
tink_core_SimpleDisposable.__name__ = "tink.core.SimpleDisposable";
tink_core_SimpleDisposable.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_SimpleDisposable.noop = function() {
};
tink_core_SimpleDisposable.prototype = {
	f: null
	,disposeHandlers: null
	,get_disposed: function() {
		return this.disposeHandlers == null;
	}
	,ondispose: function(d) {
		var _g = this.disposeHandlers;
		if(_g == null) {
			d();
		} else {
			var v = _g;
			v.push(d);
		}
	}
	,dispose: function() {
		var _g = this.disposeHandlers;
		if(_g != null) {
			var v = _g;
			this.disposeHandlers = null;
			var f = this.f;
			this.f = tink_core_SimpleDisposable.noop;
			f();
			var _g = 0;
			while(_g < v.length) {
				var h = v[_g];
				++_g;
				h();
			}
		}
	}
	,__class__: tink_core_SimpleDisposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_CallbackList = function(destructive) {
	if(destructive == null) {
		destructive = false;
	}
	this.onfill = function() {
	};
	this.ondrain = function() {
	};
	this.busy = false;
	this.queue = [];
	this.used = 0;
	var _gthis = this;
	tink_core_SimpleDisposable.call(this,function() {
		if(!_gthis.busy) {
			_gthis.destroy();
		}
	});
	this.destructive = destructive;
	this.cells = [];
};
$hxClasses["tink.core.CallbackList"] = tink_core_CallbackList;
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.__super__ = tink_core_SimpleDisposable;
tink_core_CallbackList.prototype = $extend(tink_core_SimpleDisposable.prototype,{
	destructive: null
	,cells: null
	,get_length: function() {
		return this.used;
	}
	,used: null
	,queue: null
	,busy: null
	,ondrain: null
	,onfill: null
	,release: function() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.cb = null;
			c.list = null;
		}
		this.queue = null;
		this.cells = null;
		if(this.used > 0) {
			this.used = 0;
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
	}
	,drain: function() {
		var fn = this.ondrain;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			fn();
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(fn);
		}
	}
	,add: function(cb) {
		if(this.disposeHandlers == null) {
			return null;
		}
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		if(this.used++ == 0) {
			var fn = this.onfill;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
		return node;
	}
	,invoke: function(data) {
		var _gthis = this;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			if(_gthis.disposeHandlers != null) {
				if(_gthis.busy) {
					if(_gthis.destructive != true) {
						var _g = $bind(_gthis,_gthis.invoke);
						var data1 = data;
						var tmp = function() {
							_g(data1);
						};
						_gthis.queue.push(tmp);
					}
				} else {
					_gthis.busy = true;
					if(_gthis.destructive) {
						_gthis.dispose();
					}
					var length = _gthis.cells.length;
					var _g1 = 0;
					var _g2 = length;
					while(_g1 < _g2) {
						var i = _g1++;
						var _this = _gthis.cells[i];
						if(_this.list != null) {
							_this.cb(data);
						}
					}
					_gthis.busy = false;
					if(_gthis.disposeHandlers == null) {
						_gthis.destroy();
					} else {
						if(_gthis.used < _gthis.cells.length) {
							_gthis.compact();
						}
						if(_gthis.queue.length > 0) {
							(_gthis.queue.shift())();
						}
					}
				}
			}
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(function() {
				if(_gthis.disposeHandlers != null) {
					if(_gthis.busy) {
						if(_gthis.destructive != true) {
							var _g = $bind(_gthis,_gthis.invoke);
							var data1 = data;
							var tmp = function() {
								_g(data1);
							};
							_gthis.queue.push(tmp);
						}
					} else {
						_gthis.busy = true;
						if(_gthis.destructive) {
							_gthis.dispose();
						}
						var length = _gthis.cells.length;
						var _g1 = 0;
						var _g2 = length;
						while(_g1 < _g2) {
							var i = _g1++;
							var _this = _gthis.cells[i];
							if(_this.list != null) {
								_this.cb(data);
							}
						}
						_gthis.busy = false;
						if(_gthis.disposeHandlers == null) {
							_gthis.destroy();
						} else {
							if(_gthis.used < _gthis.cells.length) {
								_gthis.compact();
							}
							if(_gthis.queue.length > 0) {
								(_gthis.queue.shift())();
							}
						}
					}
				}
			});
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
	,__properties__: $extend(tink_core_SimpleDisposable.prototype.__properties__,{get_length:"get_length"})
});
var tink_core_AlreadyDisposed = function() {
};
$hxClasses["tink.core.AlreadyDisposed"] = tink_core_AlreadyDisposed;
tink_core_AlreadyDisposed.__name__ = "tink.core.AlreadyDisposed";
tink_core_AlreadyDisposed.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_AlreadyDisposed.prototype = {
	get_disposed: function() {
		return true;
	}
	,ondispose: function(d) {
		d();
	}
	,dispose: function() {
	}
	,__class__: tink_core_AlreadyDisposed
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
$hxClasses["tink.core.TypedError"] = tink_core_TypedError;
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var ex = haxe_Exception.caught(_g).unwrap();
		var e = tink_core_TypedError.asError(ex);
		var tmp;
		if(e == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",ex,pos) : report(ex);
		} else {
			var e1 = e;
			tmp = e1;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,toPromise: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(this)));
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,toJsError: function() {
		if(((this.data) instanceof Error)) {
			return this.data;
		} else {
			return new tink_core__$Error_TinkError(this);
		}
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Error_TinkError = function(e) {
	Error.call(this);
	this.message = e.message;
	this.data = e;
};
$hxClasses["tink.core._Error.TinkError"] = tink_core__$Error_TinkError;
tink_core__$Error_TinkError.__name__ = "tink.core._Error.TinkError";
tink_core__$Error_TinkError.__super__ = Error;
tink_core__$Error_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Error_TinkError
});
var tink_core__$Future_FutureObject = function() {
};
$hxClasses["tink.core._Future.FutureObject"] = tink_core__$Future_FutureObject;
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
tink_core__$Future_FutureObject.prototype = {
	getStatus: function() {
		return tink_core_FutureStatus.NeverEver;
	}
	,handle: function(callback) {
		return null;
	}
	,eager: function() {
	}
	,__class__: tink_core__$Future_FutureObject
};
var tink_core__$Lazy_Computable = function() { };
$hxClasses["tink.core._Lazy.Computable"] = tink_core__$Lazy_Computable;
tink_core__$Lazy_Computable.__name__ = "tink.core._Lazy.Computable";
tink_core__$Lazy_Computable.__isInterface__ = true;
tink_core__$Lazy_Computable.prototype = {
	isComputed: null
	,compute: null
	,underlying: null
	,__class__: tink_core__$Lazy_Computable
};
var tink_core__$Lazy_LazyObject = function() { };
$hxClasses["tink.core._Lazy.LazyObject"] = tink_core__$Lazy_LazyObject;
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.__interfaces__ = [tink_core__$Lazy_Computable];
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Lazy.LazyConst"] = tink_core__$Lazy_LazyConst;
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,isComputed: function() {
		return true;
	}
	,get: function() {
		return this.value;
	}
	,compute: function() {
	}
	,underlying: function() {
		return null;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	tink_core__$Future_FutureObject.call(this);
	this.value = value;
};
$hxClasses["tink.core._Future.SyncFuture"] = tink_core__$Future_SyncFuture;
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__super__ = tink_core__$Future_FutureObject;
tink_core__$Future_SyncFuture.prototype = $extend(tink_core__$Future_FutureObject.prototype,{
	value: null
	,getStatus: function() {
		return tink_core_FutureStatus.Ready(this.value);
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,tink_core_Lazy.get(this.value));
		return null;
	}
	,eager: function() {
		if(!this.value.isComputed()) {
			tink_core_Lazy.get(this.value);
		}
	}
	,__class__: tink_core__$Future_SyncFuture
});
var tink_core_Future = {};
tink_core_Future.__properties__ = {get_status:"get_status"};
tink_core_Future.get_status = function(this1) {
	return this1.getStatus();
};
tink_core_Future._new = function(wakeup) {
	var this1 = new tink_core__$Future_SuspendableFuture(wakeup);
	return this1;
};
tink_core_Future.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core_Future.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Future.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return tink_core_Future.map(this1,function(_) {
			return null;
		});
	}
};
tink_core_Future.first = function(this1,that) {
	var _g = this1;
	var _g1 = _g.getStatus();
	switch(_g1._hx_index) {
	case 3:
		var _g2 = _g1.result;
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = _g;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			var v = _g;
			return v;
		}
		break;
	case 4:
		var v = that;
		return v;
	default:
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = that;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			return new tink_core__$Future_SuspendableFuture(function(fire) {
				return new tink_core__$Callback_LinkPair(this1.handle(fire),that.handle(fire));
			});
		}
	}
};
tink_core_Future.map = function(this1,f,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		var this2 = l;
		var f1 = f;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return f1(this2.get());
		},this2));
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return this1.handle(function(v) {
				fire(f(v));
			});
		});
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return next(tink_core_Lazy.get(l)).handle(function(v) {
				fire(v);
			});
		});
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = new tink_core_CallbackLinkRef();
			var outer = this1.handle(function(v) {
				var param = next(v).handle($yield);
				var this1 = inner.link;
				if(this1 != null) {
					this1.cancel();
				}
				inner.link = param;
			});
			return new tink_core__$Callback_LinkPair(outer,inner);
		});
	}
};
tink_core_Future.swap = function(this1,v) {
	return tink_core_Future.map(this1,function(_) {
		return v;
	});
};
tink_core_Future.next = function(this1,n) {
	return tink_core_Future.flatMap(this1,n);
};
tink_core_Future.withSideEffect = function(this1,c) {
	return tink_core_Future.map(this1,function(v) {
		tink_core_Callback.invoke(c,v);
		return v;
	});
};
tink_core_Future.gather = function(this1) {
	return this1;
};
tink_core_Future.merge = function(this1,that,combine) {
	var _g = this1.getStatus();
	var _g1 = that.getStatus();
	if(_g._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else if(_g1._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var check = function(v) {
				var _g = this1.getStatus();
				var _g1 = that.getStatus();
				if(_g._hx_index == 3) {
					if(_g1._hx_index == 3) {
						var b = _g1.result;
						var a = _g.result;
						$yield(combine(tink_core_Lazy.get(a),tink_core_Lazy.get(b)));
					}
				}
			};
			return new tink_core__$Callback_LinkPair(this1.handle(check),that.handle(check));
		});
	}
};
tink_core_Future.flatten = function(f) {
	return tink_core_Future.flatMap(f,function(v) {
		return v;
	});
};
tink_core_Future.ofJsPromise = function(promise,transformError) {
	return tink_core_Future.irreversible(function(cb) {
		promise.then(function(a) {
			var _g = cb;
			var a1 = tink_core_Outcome.Success(a);
			tink_core_Callback.defer(function() {
				_g(a1);
			});
		},function(e) {
			var cb1 = cb;
			var tmp;
			if(transformError == null) {
				var e1 = e;
				tmp = tink_core_TypedError.withData(500,e1.message,e1,{ fileName : "tink/core/Future.hx", lineNumber : 173, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"});
			} else {
				var f = transformError;
				tmp = f(e);
			}
			cb1(tink_core_Outcome.Failure(tmp));
		});
	});
};
tink_core_Future.fromJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Future.neverToAny = function(l) {
	return l;
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	return tink_core_Future.inSequence(futures);
};
tink_core_Future.inParallel = function(futures,concurrency) {
	return tink_core_Future.many(futures,concurrency);
};
tink_core_Future.inSequence = function(futures) {
	return tink_core_Future.many(futures,1);
};
tink_core_Future.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,tink_core_Outcome.Success,function(o) {
		return tink_core_OutcomeTools.orNull(o);
	});
};
tink_core_Future.processMany = function(a,concurrency,fn,lift) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(lift(tink_core_Outcome.Success([]))));
	} else {
		var this1 = new tink_core__$Future_SuspendableFuture(function($yield) {
			var links = [];
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				var x = a[_g1];
				++_g1;
				_g.push(null);
			}
			var ret = _g;
			var index = 0;
			var pending = 0;
			var done = false;
			var concurrency1;
			if(concurrency == null) {
				concurrency1 = a.length;
			} else {
				var v = concurrency;
				concurrency1 = v < 1 ? 1 : v > a.length ? a.length : v;
			}
			var fireWhenReady = function() {
				if(index == ret.length) {
					if(pending == 0) {
						var v = lift(tink_core_Outcome.Success(ret));
						done = true;
						$yield(v);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			var step = null;
			step = function() {
				if(!done && !fireWhenReady()) {
					while(index < ret.length) {
						index += 1;
						var index1 = [index - 1];
						var p = a[index1[0]];
						var check = [(function(index) {
							return function(o) {
								var _g = fn(o);
								switch(_g._hx_index) {
								case 0:
									var v = _g.data;
									ret[index[0]] = v;
									fireWhenReady();
									break;
								case 1:
									var e = _g.failure;
									var _g = 0;
									while(_g < links.length) {
										var l = links[_g];
										++_g;
										if(l != null) {
											l.cancel();
										}
									}
									var v = lift(tink_core_Outcome.Failure(e));
									done = true;
									$yield(v);
									break;
								}
							};
						})(index1)];
						var _g = p.getStatus();
						if(_g._hx_index == 3) {
							var _hx_tmp;
							_hx_tmp = tink_core_Lazy.get(_g.result);
							var v = _hx_tmp;
							check[0](v);
							if(!done) {
								continue;
							}
						} else {
							pending += 1;
							links.push(p.handle((function(check) {
								return function(o) {
									pending -= 1;
									check[0](o);
									if(!done) {
										step();
									}
								};
							})(check)));
						}
						break;
					}
				}
			};
			var _g = 0;
			var _g1 = concurrency1;
			while(_g < _g1) {
				var i = _g++;
				step();
			}
			return tink_core_CallbackLink.fromMany(links);
		});
		return this1;
	}
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return ((maybeFuture) instanceof tink_core__$Future_FutureObject);
};
tink_core_Future.async = function(init,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var ret = tink_core_Future.irreversible(init);
	if(lazy) {
		return ret;
	} else {
		ret.eager();
		return ret;
	}
};
tink_core_Future.irreversible = function(init) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		init($yield);
		return null;
	});
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	return tink_core_Future.first(tink_core_Future.map(a,haxe_ds_Either.Left),tink_core_Future.map(b,haxe_ds_Either.Right));
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return tink_core_Future.map(map(d),tink_core_Outcome.Success);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFailingMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
};
tink_core_Future._tryMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
};
tink_core_Future._flatMap = function(f,map) {
	return tink_core_Future.flatMap(f,map);
};
tink_core_Future._map = function(f,map) {
	return tink_core_Future.map(f,map);
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	var this1 = tink_core_Future.irreversible(function(cb) {
		haxe_Timer.delay(function() {
			cb(tink_core_Lazy.get(value));
		},ms);
	});
	this1.eager();
	return this1;
};
var tink_core_FutureStatus = $hxEnums["tink.core.FutureStatus"] = { __ename__:"tink.core.FutureStatus",__constructs__:null
	,Suspended: {_hx_name:"Suspended",_hx_index:0,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Awaited: {_hx_name:"Awaited",_hx_index:1,__enum__:"tink.core.FutureStatus",toString:$estr}
	,EagerlyAwaited: {_hx_name:"EagerlyAwaited",_hx_index:2,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Ready: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"tink.core.FutureStatus",toString:$estr}; },$_._hx_name="Ready",$_.__params__ = ["result"],$_)
	,NeverEver: {_hx_name:"NeverEver",_hx_index:4,__enum__:"tink.core.FutureStatus",toString:$estr}
};
tink_core_FutureStatus.__constructs__ = [tink_core_FutureStatus.Suspended,tink_core_FutureStatus.Awaited,tink_core_FutureStatus.EagerlyAwaited,tink_core_FutureStatus.Ready,tink_core_FutureStatus.NeverEver];
var tink_core_FutureTrigger = function() {
	this.status = tink_core_FutureStatus.Awaited;
	tink_core__$Future_FutureObject.call(this);
	this.list = new tink_core_CallbackList(true);
};
$hxClasses["tink.core.FutureTrigger"] = tink_core_FutureTrigger;
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__super__ = tink_core__$Future_FutureObject;
tink_core_FutureTrigger.prototype = $extend(tink_core__$Future_FutureObject.prototype,{
	status: null
	,list: null
	,getStatus: function() {
		return this.status;
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var v = _g;
			var _this = this.list;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
			return false;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(result));
			this.list.invoke(result);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
});
var tink_core_JsPromiseTools = function() { };
$hxClasses["tink.core.JsPromiseTools"] = tink_core_JsPromiseTools;
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.status = tink_core_FutureStatus.Suspended;
	var _gthis = this;
	tink_core__$Future_FutureObject.call(this);
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList(true);
	this.callbacks.ondrain = function() {
		if(_gthis.status == tink_core_FutureStatus.Awaited) {
			_gthis.status = tink_core_FutureStatus.Suspended;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
	this.callbacks.onfill = function() {
		if(_gthis.status == tink_core_FutureStatus.Suspended) {
			_gthis.status = tink_core_FutureStatus.Awaited;
			_gthis.arm();
		}
	};
};
$hxClasses["tink.core._Future.SuspendableFuture"] = tink_core__$Future_SuspendableFuture;
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__super__ = tink_core__$Future_FutureObject;
tink_core__$Future_SuspendableFuture.prototype = $extend(tink_core__$Future_FutureObject.prototype,{
	callbacks: null
	,status: null
	,link: null
	,wakeup: null
	,getStatus: function() {
		return this.status;
	}
	,trigger: function(value) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(value));
			var link = this.link;
			this.link = null;
			this.wakeup = null;
			this.callbacks.invoke(value);
			if(link != null) {
				link.cancel();
			}
		}
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var _this = this.callbacks;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,arm: function() {
		var _gthis = this;
		this.link = this.wakeup(function(x) {
			_gthis.trigger(x);
		});
	}
	,eager: function() {
		switch(this.status._hx_index) {
		case 0:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			this.arm();
			break;
		case 1:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			break;
		default:
		}
	}
	,__class__: tink_core__$Future_SuspendableFuture
});
var tink_core_Lazy = {};
tink_core_Lazy.__properties__ = {get_computed:"get_computed"};
tink_core_Lazy.get_computed = function(this1) {
	return this1.isComputed();
};
tink_core_Lazy.get = function(this1) {
	this1.compute();
	return this1.get();
};
tink_core_Lazy.fromNoise = function(l) {
	return l;
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return f(this1.get());
	},this1);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return tink_core_Lazy.get(f(this1.get()));
	},this1);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f,from) {
	this.f = f;
	this.from = from;
};
$hxClasses["tink.core._Lazy.LazyFunc"] = tink_core__$Lazy_LazyFunc;
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,from: null
	,result: null
	,underlying: function() {
		return this.from;
	}
	,isComputed: function() {
		return this.f == null;
	}
	,get: function() {
		return this.result;
	}
	,compute: function() {
		var _g = this.f;
		if(_g != null) {
			var v = _g;
			this.f = null;
			var _g = this.from;
			if(_g != null) {
				var cur = _g;
				this.from = null;
				var stack = [];
				while(cur != null && !cur.isComputed()) {
					stack.push(cur);
					cur = cur.underlying();
				}
				stack.reverse();
				var _g = 0;
				while(_g < stack.length) {
					var c = stack[_g];
					++_g;
					c.compute();
				}
			}
			this.result = v();
		}
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
$hxClasses["tink.core.NamedWith"] = tink_core_NamedWith;
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_core_OptionTools = function() { };
$hxClasses["tink.core.OptionTools"] = tink_core_OptionTools;
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.sure = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.toOutcome = function(o,pos) {
	switch(o._hx_index) {
	case 0:
		var value = o.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Option.hx", lineNumber : 31, className : "tink.core.OptionTools", methodName : "toOutcome"}));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return tink_core_Lazy.get(l);
	}
};
tink_core_OptionTools.orTry = function(o,fallback) {
	if(o._hx_index == 0) {
		var v = o.v;
		return o;
	} else {
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
$hxClasses["tink.core.OptionIter"] = tink_core_OptionIter;
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__:"tink.core.Outcome",__constructs__:null
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["failure"],$_)
};
tink_core_Outcome.__constructs__ = [tink_core_Outcome.Success,tink_core_Outcome.Failure];
var tink_core_OutcomeTools = function() { };
$hxClasses["tink.core.OutcomeTools"] = tink_core_OutcomeTools;
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	return tink_core_OutcomeTools.or(outcome,fallback);
};
tink_core_OutcomeTools.or = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var d = o.data;
		return f(d);
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core.MPair"] = tink_core_MPair;
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_ProgressValue = {};
tink_core_ProgressValue.__properties__ = {get_total:"get_total",get_value:"get_value"};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_Progress = {};
tink_core_Progress.listen = function(this1,cb) {
	return this1.progressed.listen(cb);
};
tink_core_Progress.handle = function(this1,cb) {
	return this1.result.handle(cb);
};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		return f(function(value,total) {
			var fire1 = fire;
			var this1 = new tink_core_MPair(value,total);
			var this2 = this1;
			fire1(tink_core_ProgressStatus.InProgress(this2));
		},function(result) {
			fire(tink_core_ProgressStatus.Finished(result));
		});
	});
};
tink_core_Progress.map = function(this1,f) {
	return new tink_core__$Progress_ProgressObject(tink_core_Signal.map(this1.changed,function(s) {
		return tink_core_ProgressStatusTools.map(s,f);
	}),function() {
		return tink_core_ProgressStatusTools.map(this1.getStatus(),f);
	});
};
tink_core_Progress.asFuture = function(this1) {
	return this1.result;
};
tink_core_Progress.promise = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var p = o.data;
				var param = p.changed.listen(function(s) {
					fire(tink_core_ProgressStatusTools.map(s,tink_core_Outcome.Success));
				});
				var this1 = inner.link;
				if(this1 != null) {
					this1.cancel();
				}
				inner.link = param;
				break;
			case 1:
				var e = o.failure;
				fire(tink_core_ProgressStatus.Finished(tink_core_Outcome.Failure(e)));
				break;
			}
		}),inner);
	});
};
tink_core_Progress.flatten = function(v) {
	return tink_core_Progress.map(tink_core_Progress.promise(v),function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				var v = _g.data;
				return tink_core_Outcome.Success(v);
			case 1:
				var e = _g.failure;
				return tink_core_Outcome.Failure(e);
			}
			break;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(e);
		}
	});
};
tink_core_Progress.future = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(p) {
			var param = p.changed.listen(fire);
			var this1 = inner.link;
			if(this1 != null) {
				this1.cancel();
			}
			inner.link = param;
		}),inner);
	});
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.flatMap(this1.result,f);
};
var tink_core__$Progress_ProgressObject = function(changed,getStatus) {
	this.changed = changed;
	var this1 = new tink_core__$Signal_Suspendable(function(fire) {
		return changed.listen(function(s) {
			if(s._hx_index == 0) {
				var v = s.v;
				fire(v);
			}
		});
	},null);
	this.progressed = this1;
	this.getStatus = getStatus;
	var this1 = new tink_core__$Future_SuspendableFuture(function(fire) {
		var _g = getStatus();
		if(_g._hx_index == 1) {
			var v = _g.v;
			fire(v);
			return null;
		} else {
			return changed.listen(function(s) {
				if(s._hx_index == 1) {
					var v = s.v;
					fire(v);
				}
			});
		}
	});
	this.result = this1;
};
$hxClasses["tink.core._Progress.ProgressObject"] = tink_core__$Progress_ProgressObject;
tink_core__$Progress_ProgressObject.__name__ = "tink.core._Progress.ProgressObject";
tink_core__$Progress_ProgressObject.prototype = {
	get_status: function() {
		return this.getStatus();
	}
	,getStatus: null
	,changed: null
	,progressed: null
	,result: null
	,__class__: tink_core__$Progress_ProgressObject
	,__properties__: {get_status:"get_status"}
};
var tink_core__$Progress_SuspendableProgress = function(wakeup,status) {
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
	}
	var disposable = tink_core_AlreadyDisposed.INST;
	var changed;
	switch(status._hx_index) {
	case 0:
		var _g = status.v;
		var this1 = new tink_core__$Signal_Suspendable(function(fire) {
			return wakeup(function(s) {
				status = s;
				fire(status);
			});
		},function(d) {
			disposable = d;
		});
		changed = this1;
		break;
	case 1:
		var _g = status.v;
		changed = tink_core_Signal.dead();
		break;
	}
	tink_core__$Progress_ProgressObject.call(this,changed,function() {
		return status;
	});
};
$hxClasses["tink.core._Progress.SuspendableProgress"] = tink_core__$Progress_SuspendableProgress;
tink_core__$Progress_SuspendableProgress.__name__ = "tink.core._Progress.SuspendableProgress";
tink_core__$Progress_SuspendableProgress.__super__ = tink_core__$Progress_ProgressObject;
tink_core__$Progress_SuspendableProgress.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	noop: function(_,_0) {
		return null;
	}
	,__class__: tink_core__$Progress_SuspendableProgress
});
var tink_core_ProgressTrigger = function(status) {
	this._changed = null;
	var _gthis = this;
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
		this._status = status;
	}
	var tmp;
	if(status == null) {
		tmp = false;
	} else if(status._hx_index == 1) {
		var _g = status.v;
		tmp = true;
	} else {
		tmp = false;
	}
	tink_core__$Progress_ProgressObject.call(this,tmp ? tink_core_Signal.dead() : this._changed = tink_core_Signal.trigger(),function() {
		return _gthis._status;
	});
};
$hxClasses["tink.core.ProgressTrigger"] = tink_core_ProgressTrigger;
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core__$Progress_ProgressObject;
tink_core_ProgressTrigger.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	_status: null
	,_changed: null
	,asProgress: function() {
		return this;
	}
	,progress: function(v,total) {
		var _g = this._status;
		var tmp;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			var _this = this._changed;
			var this1 = new tink_core_MPair(v,total);
			var this2 = this1;
			_this.handlers.invoke(this._status = tink_core_ProgressStatus.InProgress(this2));
		}
	}
	,finish: function(v) {
		var _g = this._status;
		var tmp;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this._changed.handlers.invoke(this._status = tink_core_ProgressStatus.Finished(v));
		}
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressStatus = $hxEnums["tink.core.ProgressStatus"] = { __ename__:"tink.core.ProgressStatus",__constructs__:null
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="InProgress",$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="Finished",$_.__params__ = ["v"],$_)
};
tink_core_ProgressStatus.__constructs__ = [tink_core_ProgressStatus.InProgress,tink_core_ProgressStatus.Finished];
var tink_core_ProgressStatusTools = function() { };
$hxClasses["tink.core.ProgressStatusTools"] = tink_core_ProgressStatusTools;
tink_core_ProgressStatusTools.__name__ = "tink.core.ProgressStatusTools";
tink_core_ProgressStatusTools.map = function(p,f) {
	switch(p._hx_index) {
	case 0:
		var v = p.v;
		return tink_core_ProgressStatus.InProgress(v);
	case 1:
		var v = p.v;
		return tink_core_ProgressStatus.Finished(f(v));
	}
};
var tink_core_TotalTools = function() { };
$hxClasses["tink.core.TotalTools"] = tink_core_TotalTools;
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t2 = b.v;
			var t1 = a.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_ProgressTools = function() { };
$hxClasses["tink.core.ProgressTools"] = tink_core_ProgressTools;
tink_core_ProgressTools.__name__ = "tink.core.ProgressTools";
tink_core_ProgressTools.asPromise = function(p) {
	return p.result;
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
	var this2 = this1;
	return this2;
};
tink_core_Promise.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Promise.map = function(this1,f) {
	return tink_core_Future.map(this1,f);
};
tink_core_Promise.flatMap = function(this1,f) {
	return tink_core_Future.flatMap(this1,f);
};
tink_core_Promise.tryRecover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.recover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.mapError = function(this1,f) {
	return tink_core_Future.map(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
};
tink_core_Promise.withSideEffect = function(this1,c) {
	var c1 = function(o) {
		if(o._hx_index == 0) {
			var data = o.data;
			tink_core_Callback.invoke(c,data);
		}
	};
	return tink_core_Future.map(this1,function(v) {
		tink_core_Callback.invoke(c1,v);
		return v;
	});
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Promise.NEVER;
	} else {
		return tink_core_Promise.next(this1,tink_core_Next.ofSafeSync(function(v) {
			return null;
		}));
	}
};
tink_core_Promise.isSuccess = function(this1) {
	return tink_core_Future.map(this1,function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
};
tink_core_Promise.next = function(this1,f,gather) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Promise.next(this1,tink_core_Next.ofSafeSync(function(_) {
		return v;
	}));
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	return tink_core_Future.flatMap(tink_core_Future.merge(this1,other,function(a,b) {
		switch(a._hx_index) {
		case 0:
			var _g = a.data;
			switch(b._hx_index) {
			case 0:
				var b1 = b.data;
				var a1 = _g;
				return merger(a1,b1);
			case 1:
				var e = b.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
			break;
		case 1:
			var e = a.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	}),function(o) {
		return o;
	});
};
tink_core_Promise.irreversible = function(f) {
	var f1 = function(res,rej) {
		f(res,rej);
		return null;
	};
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return f1(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
	var this2 = this1;
	return this2;
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,tink_core_Combiner.ofSafeSync(function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	}));
};
tink_core_Promise.iterate = function(promises,$yield,fallback,fallThroughOnError) {
	if(fallThroughOnError == null) {
		fallThroughOnError = false;
	}
	return tink_core_Future.irreversible(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						if(fallThroughOnError) {
							next();
						} else {
							cb(tink_core_Outcome.Failure(e));
						}
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	});
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		return tink_core_Future.flatMap(gen(),function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise,transformError) {
	return tink_core_Future.ofJsPromise(promise,transformError);
};
tink_core_Promise.fromJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(e.toJsError());
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.fromNever = function(l) {
	return l;
};
tink_core_Promise.ofTrigger = function(f) {
	return f;
};
tink_core_Promise.ofHappyTrigger = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofFuture = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.asFuture = function(this1) {
	return this1;
};
tink_core_Promise.lazy = function(p) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return tink_core_Lazy.get(p).handle(cb);
	});
	return this1;
};
tink_core_Promise.inParallel = function(a,concurrency) {
	return tink_core_Promise.many(a,concurrency);
};
tink_core_Promise.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,function(o) {
		return o;
	},function(o) {
		return o;
	});
};
tink_core_Promise.inSequence = function(a) {
	return tink_core_Promise.many(a,1);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),tink_core_Next.ofSafeSync(function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return o.a;
			}));
			if(!sync) {
				p = ret;
			}
		}
		return tink_core_Future.map(ret,function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next._new = function(self) {
	var this1 = self;
	return this1;
};
tink_core_Next.lift = function(self) {
	var this1 = self;
	return this1;
};
tink_core_Next.ofSafe = function(f) {
	var this1 = function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
	return this1;
};
tink_core_Next.ofSync = function(f) {
	var this1 = function(x) {
		return tink_core_Future.map(f(x),tink_core_Outcome.Success);
	};
	return this1;
};
tink_core_Next.ofSafeSync = function(f) {
	var this1 = function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
	return this1;
};
tink_core_Next._chain = function(a,b) {
	var this1 = function(v) {
		return tink_core_Promise.next(a(v),b);
	};
	return this1;
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner._new = function(self) {
	var this1 = self;
	return this1;
};
tink_core_Combiner.lift = function(self) {
	var this1 = self;
	return this1;
};
tink_core_Combiner.ofSync = function(f) {
	var this1 = function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
	return this1;
};
tink_core_Combiner.ofSafe = function(f) {
	var this1 = function(x1,x2) {
		return tink_core_Future.map(f(x1,x2),tink_core_Outcome.Success);
	};
	return this1;
};
tink_core_Combiner.ofSafeSync = function(f) {
	var this1 = function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
	return this1;
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core_Ref = {};
tink_core_Ref.__properties__ = {set_value:"set_value",get_value:"get_value"};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core_Gather = {};
tink_core_Gather._new = function(v) {
	var this1 = v;
	return this1;
};
tink_core_Gather.ofBool = function(b) {
	var this1 = b;
	return this1;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f,init) {
	var this1 = new tink_core__$Signal_Suspendable(f,init);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			fire(f(v));
		});
	});
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			f(v).handle(fire);
		});
	});
};
tink_core_Signal.filter = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			if(f(v)) {
				fire(v);
			}
		});
	});
};
tink_core_Signal.select = function(this1,selector,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			var _g = selector(v);
			if(_g._hx_index == 0) {
				var v = _g.v;
				fire(v);
			}
		});
	});
};
tink_core_Signal.join = function(this1,that,gather) {
	if(this1.get_disposed()) {
		return that;
	} else if(that.get_disposed()) {
		return this1;
	} else {
		return new tink_core__$Signal_Suspendable(function(fire) {
			var cb = fire;
			return new tink_core__$Callback_LinkPair(this1.listen(cb),that.listen(cb));
		},function(self) {
			var release = function() {
				if(this1.get_disposed() && that.get_disposed()) {
					self.dispose();
				}
			};
			this1.ondispose(release);
			that.ondispose(release);
		});
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	return tink_core_Signal.pickNext(this1,function(v) {
		if(condition == null || condition(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_core_Signal.pickNext = function(this1,selector) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	link = this1.listen(function(v) {
		var _g = selector(v);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			ret.trigger(v);
			break;
		case 1:
			break;
		}
	});
	ret.handle(link == null ? tink_core_CallbackLink.noop : ($_=link,$bind($_,$_.cancel)));
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	return new tink_core__$Signal_Suspendable(function($yield) {
		return this1.listen($yield);
	},function(self) {
		end.handle($bind(self,self.dispose));
	});
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return null;
	});
};
tink_core_Signal.gather = function(this1) {
	return this1;
};
tink_core_Signal.create = function(f) {
	var this1 = new tink_core__$Signal_Suspendable(f,null);
	return this1;
};
tink_core_Signal.generate = function(generator,init) {
	var this1 = new tink_core__$Signal_Suspendable(function(fire) {
		generator(fire);
		return null;
	},init);
	return this1;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		add(fire);
		var _g = remove;
		var a1 = fire;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
};
tink_core_Signal.dead = function() {
	return tink_core__$Signal_Disposed.INST;
};
var tink_core__$Signal_SignalObject = function() { };
$hxClasses["tink.core._Signal.SignalObject"] = tink_core__$Signal_SignalObject;
tink_core__$Signal_SignalObject.__name__ = "tink.core._Signal.SignalObject";
tink_core__$Signal_SignalObject.__isInterface__ = true;
tink_core__$Signal_SignalObject.__interfaces__ = [tink_core_Disposable];
tink_core__$Signal_SignalObject.prototype = {
	listen: null
	,__class__: tink_core__$Signal_SignalObject
};
var tink_core__$Signal_Disposed = function() {
	tink_core_AlreadyDisposed.call(this);
};
$hxClasses["tink.core._Signal.Disposed"] = tink_core__$Signal_Disposed;
tink_core__$Signal_Disposed.__name__ = "tink.core._Signal.Disposed";
tink_core__$Signal_Disposed.__interfaces__ = [tink_core__$Signal_SignalObject];
tink_core__$Signal_Disposed.__super__ = tink_core_AlreadyDisposed;
tink_core__$Signal_Disposed.prototype = $extend(tink_core_AlreadyDisposed.prototype,{
	listen: function(cb) {
		return null;
	}
	,__class__: tink_core__$Signal_Disposed
});
var tink_core__$Signal_Suspendable = function(activate,init) {
	this.handlers = new tink_core_CallbackList();
	var _gthis = this;
	this.activate = activate;
	this.init = init;
	this.handlers.ondrain = function() {
		var this1 = _gthis.subscription;
		if(this1 != null) {
			this1.cancel();
		}
	};
	this.handlers.onfill = function() {
		if(init != null) {
			var f = init;
			init = null;
			f(_gthis);
		}
		_gthis.subscription = activate(($_=_gthis.handlers,$bind($_,$_.invoke)));
	};
};
$hxClasses["tink.core._Signal.Suspendable"] = tink_core__$Signal_Suspendable;
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core__$Signal_Suspendable.over = function(s,activate) {
	if(s.get_disposed()) {
		return tink_core_Signal.dead();
	} else {
		var ret = new tink_core__$Signal_Suspendable(activate);
		s.ondispose($bind(ret,ret.dispose));
		return ret;
	}
};
tink_core__$Signal_Suspendable.prototype = {
	handlers: null
	,activate: null
	,init: null
	,subscription: null
	,get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(handler) {
		this.handlers.ondispose(handler);
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,__class__: tink_core__$Signal_Suspendable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
$hxClasses["tink.core.SignalTrigger"] = tink_core_SignalTrigger;
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core_SignalTrigger.prototype = {
	get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,handlers: null
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(d) {
		this.handlers.ondispose(d);
	}
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
	,__properties__: {get_disposed:"get_disposed"}
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $keyValueIterator(o) { if( o instanceof Array ) return function() { return HxOverrides.keyValueIter(o); }; return typeof(o.keyValueIterator) == 'function' ? $bind(o,o.keyValueIterator) : o.keyValueIterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $getKeyValueIterator(o) { if( o instanceof Array ) return HxOverrides.keyValueIter(o); else return o.keyValueIterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
haxe_Resource.content = [{ name : "stx.bake.session.id", data : "N2RjNDkzOWQtODVhOS00ZGFjLTkzOGYtY2YyNTMxMGMwY2Y3"}];
js_Boot.__toStr = ({ }).toString;
var facade = stx_log_logger_Global.get_ZERO();
stx_log_Signal.get_instance().attach(facade);
stx_log_Signal.has_custom = false;
Console.formatMode = Console.determineConsoleFormatMode();
Console.logPrefix = "<b,gray>><//> ";
Console.warnPrefix = "<b,yellow>><//> ";
Console.errorPrefix = "<b,red>></b> ";
Console.successPrefix = "<b,light_green>><//> ";
Console.debugPrefix = "<b,magenta>><//> ";
Console.printIntercept = null;
Console.argSeparator = " ";
Console.unicodeCompatibilityMode = Sys.systemName() == "Windows" ? 1 : 0;
Console.unicodeCompatibilityEnabled = false;
Console.formatTagPattern = new EReg("(\\\\)?<(/)?([^><{}\\s]*|{[^}<>]*})>","g");
FormatFlag.RESET = "reset";
FormatFlag.BOLD = "bold";
FormatFlag.ITALIC = "italic";
FormatFlag.DIM = "dim";
FormatFlag.UNDERLINE = "underline";
FormatFlag.BLINK = "blink";
FormatFlag.INVERT = "invert";
FormatFlag.HIDDEN = "hidden";
FormatFlag.BLACK = "black";
FormatFlag.RED = "red";
FormatFlag.GREEN = "green";
FormatFlag.YELLOW = "yellow";
FormatFlag.BLUE = "blue";
FormatFlag.MAGENTA = "magenta";
FormatFlag.CYAN = "cyan";
FormatFlag.WHITE = "white";
FormatFlag.LIGHT_BLACK = "light_black";
FormatFlag.LIGHT_RED = "light_red";
FormatFlag.LIGHT_GREEN = "light_green";
FormatFlag.LIGHT_YELLOW = "light_yellow";
FormatFlag.LIGHT_BLUE = "light_blue";
FormatFlag.LIGHT_MAGENTA = "light_magenta";
FormatFlag.LIGHT_CYAN = "light_cyan";
FormatFlag.LIGHT_WHITE = "light_white";
FormatFlag.BG_BLACK = "bg_black";
FormatFlag.BG_RED = "bg_red";
FormatFlag.BG_GREEN = "bg_green";
FormatFlag.BG_YELLOW = "bg_yellow";
FormatFlag.BG_BLUE = "bg_blue";
FormatFlag.BG_MAGENTA = "bg_magenta";
FormatFlag.BG_CYAN = "bg_cyan";
FormatFlag.BG_WHITE = "bg_white";
FormatFlag.BG_LIGHT_BLACK = "bg_light_black";
FormatFlag.BG_LIGHT_RED = "bg_light_red";
FormatFlag.BG_LIGHT_GREEN = "bg_light_green";
FormatFlag.BG_LIGHT_YELLOW = "bg_light_yellow";
FormatFlag.BG_LIGHT_BLUE = "bg_light_blue";
FormatFlag.BG_LIGHT_MAGENTA = "bg_light_magenta";
FormatFlag.BG_LIGHT_CYAN = "bg_light_cyan";
FormatFlag.BG_LIGHT_WHITE = "bg_light_white";
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Printf.DEFAULT_PRECISION = 6;
Printf.DEFAULT_NUM_EXP_DIGITS = 2;
Printf._initialized = false;
Printf.PAD_0 = 0;
Printf.PAD_SPACE = 20;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
eu_ohmrun_Fletcher._ = eu_ohmrun_FletcherLift;
eu_ohmrun_fletcher_Arrange._ = eu_ohmrun_fletcher_ArrangeLift;
eu_ohmrun_fletcher_Attempt._ = eu_ohmrun_fletcher_AttemptLift;
eu_ohmrun_fletcher_Command._ = eu_ohmrun_fletcher_CommandLift;
eu_ohmrun_fletcher_Convert._ = eu_ohmrun_fletcher_ConvertLift;
eu_ohmrun_fletcher_Diffuse._ = eu_ohmrun_fletcher_DiffuseLift;
eu_ohmrun_fletcher_Fiber._ = eu_ohmrun_fletcher_FiberLift;
eu_ohmrun_fletcher_Modulate._ = eu_ohmrun_fletcher_ModulateLift;
eu_ohmrun_fletcher_Produce._ = eu_ohmrun_fletcher_ProduceLift;
eu_ohmrun_fletcher_Propose._ = eu_ohmrun_fletcher_ProposeLift;
eu_ohmrun_fletcher_Provide._ = eu_ohmrun_fletcher_ProvideLift;
eu_ohmrun_fletcher_Receiver._ = eu_ohmrun_fletcher_ReceiverLift;
eu_ohmrun_fletcher_ReceiverInput._ = eu_ohmrun_fletcher_ReceiverInputLift;
eu_ohmrun_fletcher_Reframe._ = eu_ohmrun_fletcher_ReframeLift;
eu_ohmrun_fletcher_Regulate._ = eu_ohmrun_fletcher_RegulateLift;
eu_ohmrun_fletcher_Sequent._ = eu_ohmrun_fletcher_SequentLift;
eu_ohmrun_fletcher_core_Cont._ = eu_ohmrun_fletcher_core_ContLift;
eu_ohmrun_fletcher_core_Settle._ = eu_ohmrun_fletcher_core_SettleLift;
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
hre_RegExp.LATIN_SMALL_LETTER_G = 103;
hre_RegExp.LATIN_SMALL_LETTER_I = 105;
hre_RegExp.LATIN_SMALL_LETTER_M = 109;
hre_RegExp.LATIN_SMALL_LETTER_U = 117;
hre_RegExp.LATIN_SMALL_LETTER_Y = 121;
hre_RegExpMatcher.lineTerminators = [10,13,8232,8233];
hre_RegExpMatcher.whiteSpaces = [9,11,12,32,160,65279];
hre_RegExpMatcher.separators = hre_RegExpMatcher.lineTerminators.concat(hre_RegExpMatcher.whiteSpaces);
hscript_Parser.p1 = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
hx_strings_Char.CHAR_CASE_MAPPER = new hx_strings__$Char_CharCaseMapper();
hx_strings_Char.BACKSPACE = 8;
hx_strings_Char.TAB = 9;
hx_strings_Char.LF = 10;
hx_strings_Char.CR = 13;
hx_strings_Char.ESC = 27;
hx_strings_Char.SPACE = 32;
hx_strings_Char.EXCLAMATION_MARK = 33;
hx_strings_Char.DOUBLE_QUOTE = 34;
hx_strings_Char.HASH = 35;
hx_strings_Char.DOLLAR = 36;
hx_strings_Char.AMPERSAND = 38;
hx_strings_Char.SINGLE_QUOTE = 39;
hx_strings_Char.BRACKET_ROUND_LEFT = 40;
hx_strings_Char.BRACKET_ROUND_RIGHT = 41;
hx_strings_Char.ASTERISK = 42;
hx_strings_Char.PLUS = 43;
hx_strings_Char.COMMA = 44;
hx_strings_Char.MINUS = 45;
hx_strings_Char.DOT = 46;
hx_strings_Char.SLASH = 47;
hx_strings_Char.ZERO = 48;
hx_strings_Char.ONE = 49;
hx_strings_Char.TWO = 50;
hx_strings_Char.TRHEE = 51;
hx_strings_Char.FOUR = 52;
hx_strings_Char.FIVE = 53;
hx_strings_Char.SIX = 54;
hx_strings_Char.SEVEN = 55;
hx_strings_Char.EIGHT = 56;
hx_strings_Char.NINE = 57;
hx_strings_Char.COLON = 58;
hx_strings_Char.SEMICOLON = 59;
hx_strings_Char.LOWER_THAN = 60;
hx_strings_Char.EQUALS = 61;
hx_strings_Char.GREATER_THAN = 62;
hx_strings_Char.QUESTION_MARK = 63;
hx_strings_Char.BRACKET_SQUARE_LEFT = 91;
hx_strings_Char.BACKSLASH = 92;
hx_strings_Char.BRACKET_SQUARE_RIGHT = 93;
hx_strings_Char.CARET = 94;
hx_strings_Char.UNDERSCORE = 95;
hx_strings_Char.BRACKET_CURLY_LEFT = 123;
hx_strings_Char.PIPE = 124;
hx_strings_Char.BRACKET_CURLY_RIGHT = 125;
hx_strings__$CharIterator_NullCharIterator.INSTANCE = new hx_strings__$CharIterator_NullCharIterator();
hx_strings_Pattern.__meta__ = { obj : { immutable : null, threadSafe : null}};
hx_strings_Matcher.__meta__ = { obj : { notThreadSafe : null}};
hx_strings_internal_OS.isNodeJS = (typeof process !== 'undefined') && (typeof process.release !== 'undefined') && (process.release.name === 'node');
hx_strings_internal_OS.isWindows = (function($this) {
	var $r;
	var os = hx_strings_internal_OS.isNodeJS ? process.platform : $global.navigator.platform;
	$r = new EReg("win","i").match(os);
	return $r;
}(this));
hx_strings_Strings.REGEX_ANSI_ESC = (function($this) {
	var $r;
	var this1 = hx_strings_internal__$Either3__$Either3.b("g");
	$r = hx_strings_Pattern.compile(String.fromCodePoint(27) + "\\[[;\\d]*m",this1);
	return $r;
}(this));
hx_strings_Strings.REGEX_HTML_UNESCAPE = (function($this) {
	var $r;
	var this1 = hx_strings_internal__$Either3__$Either3.b("g");
	$r = hx_strings_Pattern.compile("&(#\\d+|amp|nbsp|apos|lt|gt|quot);",this1);
	return $r;
}(this));
hx_strings_Strings.REGEX_SPLIT_LINES = (function($this) {
	var $r;
	var this1 = hx_strings_internal__$Either3__$Either3.b("g");
	$r = hx_strings_Pattern.compile("\\r?\\n",this1);
	return $r;
}(this));
hx_strings_Strings.REGEX_REMOVE_XML_TAGS = (function($this) {
	var $r;
	var this1 = hx_strings_internal__$Either3__$Either3.b("g");
	$r = hx_strings_Pattern.compile("<[!a-zA-Z\\/][^>]*>",this1);
	return $r;
}(this));
hx_strings_Strings.POS_NOT_FOUND = -1;
hx_strings_Strings.NEW_LINE_NIX = "\n";
hx_strings_Strings.NEW_LINE_WIN = "\r\n";
hx_strings_Strings.NEW_LINE = hx_strings_internal_OS.isWindows ? "\r\n" : "\n";
stx_log_Logic._ = stx_log_LogicLift;
stx_log_Signal.ZERO = (function($this) {
	var $r;
	var this1 = stx_log_Signal.get_instance();
	$r = this1;
	return $r;
}(this));
stx_log_Signal.has_custom = false;
stx_Log._ = stx_LogLift;
stx_Log.ZERO = stx_Log.LOG;
stx_Nano._ = stx_nano_lift_LiftNano;
stx_assert_EqualedSum.AreEqual = true;
stx_assert_EqualedSum.NotEqual = false;
stx_assert_Equaled.AreEqual = true;
stx_assert_Equaled.NotEqual = false;
stx_assert_OrderedSum.LessThan = true;
stx_assert_OrderedSum.NotLessThan = false;
stx_assert_Predicate._ = stx_assert_PredicateLift;
stx_coroutine_core_Coroutine.STOP = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(null));
stx_coroutine_core_Coroutine._ = stx_coroutine_core_CoroutineLift;
stx_coroutine_pack_Derive._ = stx_coroutine_pack_DeriveLift;
stx_coroutine_pack_Effect._ = stx_coroutine_pack_EffectLift;
stx_coroutine_pack_Emiter._ = stx_coroutine_pack_EmiterLift;
stx_coroutine_pack_Relate._ = stx_coroutine_pack_RelateLift;
stx_coroutine_pack_Secure._ = stx_coroutine_pack_SecureLift;
stx_coroutine_pack_Source._ = stx_coroutine_pack_SourceLift;
stx_coroutine_pack_Tunnel._ = stx_coroutine_pack_TunnelLift;
stx_fn_Binary._ = stx_fn_BinaryLift;
stx_fn_Block.ZERO = function() {
};
stx_fn_Block._ = stx_fn_BlockLift;
stx_fn_Dual._ = stx_fn_DualLift;
stx_fn_Sink._ = stx_fn_SinkLift;
stx_fn_Ternary._ = stx_fn_TernaryLift;
stx_fn_ThunkLift.__meta__ = { statics : { cache : { params : ["The Thunk to call once"], returns : ["A Thunk which will call the input Thunk once."]}}};
stx_fn_Thunk._ = stx_fn_ThunkLift;
stx_fn_Unary._ = stx_fn_UnaryLift;
stx_fp_Continuation._ = stx_fp_ContinuationLift;
stx_fp_LazyStream.ZERO = stx_fp_LazyStream.unit();
stx_fp_StateLift.__meta__ = { statics : { exec : { doc : ["Run `State` with `s`, dropping the result and returning `s`."]}, 'eval' : { doc : ["Run `State` with `s`, returning the result."]}}};
stx_log_LevelSum.BLANK = 0;
stx_log_LevelSum.TRACE = 1;
stx_log_LevelSum.DEBUG = 2;
stx_log_LevelSum.INFO = 3;
stx_log_LevelSum.WARN = 4;
stx_log_LevelSum.ERROR = 5;
stx_log_LevelSum.FATAL = 6;
stx_log_Stamp.ZERO = new stx_log_Stamp();
stx_nano_Accrual._ = stx_nano_AccrualLift;
stx_nano_Alert._ = stx_nano_AlertLift;
stx_nano_ByteSize.I8 = "i8";
stx_nano_ByteSize.I16BE = "i16+";
stx_nano_ByteSize.I16LE = "i16-";
stx_nano_ByteSize.UI16BE = "ui16+";
stx_nano_ByteSize.UI16LE = "ui16-";
stx_nano_ByteSize.I24BE = "i24+";
stx_nano_ByteSize.I24LE = "i24-";
stx_nano_ByteSize.UI24BE = "ui24+";
stx_nano_ByteSize.UI24LE = "ui24-";
stx_nano_ByteSize.I32BE = "i32+";
stx_nano_ByteSize.I32LE = "i32-";
stx_nano_ByteSize.FBE = "fbe";
stx_nano_ByteSize.FLE = "fle";
stx_nano_ByteSize.DBE = "dbe";
stx_nano_ByteSize.DLE = "dle";
stx_nano_ByteSize.LINE = "ln";
stx_nano_CharsLift.__meta__ = { statics : { underscore : { thx : null}}};
stx_nano_Chars._ = stx_nano_CharsLift;
stx_nano_Chunk._ = stx_nano_ChunkLift;
stx_nano_ClusterLift._ = stx_lift_ArrayLift;
stx_nano_Cluster._ = stx_nano_ClusterLift;
stx_nano_CompilerTarget._ = stx_nano_CompilerTargetLift;
stx_nano_Contract._ = stx_nano_ContractLift;
stx_nano_Couple._ = stx_nano_CoupleLift;
stx_nano_Declination._ = stx_nano_DeclinationLift;
stx_nano_Defect._ = stx_nano_DefectLift;
stx_nano_Equity._ = stx_nano_EquityLift;
stx_nano_Errata._ = stx_nano_ErrataLift;
stx_nano_Floats.__meta__ = { statics : { clamp : { doc : ["Produce a number based on `n` that is `min` if less than `min`, \n\t\t`max` if `n` is greater than `max` and is left untouched if\n\t\tbetween the two."]}}};
stx_nano_Ints.__meta__ = { statics : { xor : { doc : ["Returns `a ^ b`"]}}};
stx_nano_Ints.ZERO = 0;
stx_nano_Ints.ONE = 1;
stx_nano_Iter._ = stx_nano_IterLift;
stx_nano_KV._ = stx_nano_KVLift;
stx_nano_Ledger._ = stx_nano_LedgerLift;
stx_nano_LogicalClock.lifetime = 0;
stx_nano_LogicalClock.counter = 0;
stx_nano_Math.PRIMES = [1,3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143,4194301,8388593,16777213,33554393,67108859,134217689,268435399,536870909,1073741789,2147483647];
stx_nano_Pledge._ = stx_nano_PledgeLift;
stx_nano_Position.ZERO = stx_nano_Position.make(null,null,null,null);
stx_nano_Position._ = stx_nano_PositionLift;
stx_nano_Receipt._ = stx_nano_ReceiptLift;
stx_nano_Rejection._ = stx_nano_RejectionLift;
stx_nano_Report._ = stx_nano_ReportLift;
stx_nano_Res._ = stx_nano_ResLift;
stx_nano_Signal._ = stx_nano_SignalLift;
stx_nano_Slot._ = stx_nano_SlotLift;
stx_nano_Triple._ = stx_nano_TripleLift;
stx_pico_Apply._ = stx_pico_ApplyLift;
stx_pico_Either.__ = stx_pico_EitherLift;
stx_pico_Option.__ = stx_pico_OptionLift;
stx_pico_Outcome.__ = stx_pico_OutcomeLift;
stx_pkg__$Pkg_Registry.instance = new stx_pkg__$Pkg_Registry();
stx_schema_Procurement._ = stx_schema_ProcurementLift;
stx_schema_Schema._ = stx_schema_SchemaLift;
stx_schema_SchemaEnumDeclarationLift.check_constructor = stx_schema_Script.parser().parseString("\n    function (self:Dynamic,type:Schema){ \n      return switch(type){\n        case SchEnum(def) : \n          var ok = false;\n            for(v in def.constructors){\n              ok = v == self;\n              if(ok){\n                break;\n              }\n            }\n            if(ok){\n              __.report();\n            }else{\n              __.report(E_Schema_EnumValueError(def.constructors,self));\n            }\n        default :  __.report(E_Internal('Incorrect Type'));\n      }\n    }\n  ");
stx_schema_SchemaEnumDeclaration._ = stx_schema_SchemaEnumDeclarationLift;
stx_schema_SchemaGenericDeclaration._ = stx_schema_SchemaGenericDeclarationLift;
stx_schema_SchemaUnionDeclaration._ = stx_schema_SchemaUnionDeclarationLift;
stx_schema_core_Type._ = stx_schema_core_TypeLift;
stx_schema_core_type_term_TypeArray._ = stx_schema_core_type_term_TypeArrayLift;
stx_schema_core_type_term_TypeBool._ = stx_schema_core_type_term_TypeBoolLift;
stx_schema_core_type_term_TypeFloat._ = stx_schema_core_type_term_TypeFloatLift;
stx_schema_core_type_term_TypeInt._ = stx_schema_core_type_term_TypeIntLift;
stx_schema_core_type_term_TypeNull._ = stx_schema_core_type_term_TypeNullLift;
stx_schema_core_type_term_TypeString._ = stx_schema_core_type_term_TypeStringLift;
stx_schema_term_SchemaArray._ = stx_schema_term_SchemaArrayLift;
stx_schema_term_SchemaBool._ = stx_schema_term_SchemaBoolLift;
stx_schema_term_SchemaFloat._ = stx_schema_term_SchemaFloatLift;
stx_schema_term_SchemaInt._ = stx_schema_term_SchemaIntLift;
stx_schema_term_SchemaNull._ = stx_schema_term_SchemaNullLift;
stx_schema_term_SchemaString._ = stx_schema_term_SchemaStringLift;
stx_test_TestCase.__rtti = "<class path=\"stx.test.TestCase\" params=\"\">\n\t<extends path=\"stx.test.Assert\"/>\n\t<__stx__tests set=\"method\" line=\"4\"><f a=\"timeout\">\n\t<x path=\"Int\"/>\n\t<c path=\"stx.test.TestCaseData\"/>\n</f></__stx__tests>\n\t<__setup public=\"1\" set=\"method\" line=\"7\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__setup>\n\t<__teardown public=\"1\" set=\"method\" line=\"10\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__teardown>\n\t<__before public=\"1\" set=\"method\" line=\"13\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__before>\n\t<__after public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__after>\n\t<asTestCase public=\"1\" set=\"method\" line=\"19\"><f a=\"\"><c path=\"stx.test.TestCase\"/></f></asTestCase>\n\t<wrap public=\"1\" params=\"T\" set=\"method\" line=\"22\"><f a=\"future:?pos\">\n\t<x path=\"tink.core.Future\"><c path=\"wrap.T\"/></x>\n\t<t path=\"stx.Pos\"/>\n\t<t path=\"stx.WrappedFuture\"><c path=\"wrap.T\"/></t>\n</f></wrap>\n\t<new public=\"1\" set=\"method\" line=\"3\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta><m n=\":rtti\"/></meta>\n</class>";
stx_schema_test_SchemaTest.__rtti = "<class path=\"stx.schema.test.SchemaTest\" params=\"\">\n\t<extends path=\"stx.test.TestCase\"/>\n\t<test_this public=\"1\" set=\"method\" line=\"6\"><f a=\"\"><x path=\"Void\"/></f></test_this>\n\t<test public=\"1\" set=\"method\" line=\"42\"><f a=\"\"><x path=\"Void\"/></f></test>\n\t<new public=\"1\" set=\"method\" line=\"5\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta><m n=\":directlyUsed\"/></meta>\n</class>";
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core_AlreadyDisposed.INST = new tink_core_AlreadyDisposed();
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NULL = tink_core_Future.NOISE;
tink_core_Future.NEVER = new tink_core__$Future_FutureObject();
tink_core_Lazy.NOISE = new tink_core__$Lazy_LazyConst(null);
tink_core_Lazy.NULL = tink_core_Lazy.NOISE;
tink_core_Noise.Noise = null;
tink_core_ProgressValue.ZERO = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0,haxe_ds_Option.None);
	var this2 = this1;
	$r = this2;
	return $r;
}(this));
tink_core_Progress.INIT = tink_core_ProgressValue.ZERO;
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NULL = tink_core_Promise.NOISE;
tink_core_Promise.NEVER = tink_core_Future.NEVER;
tink_core__$Signal_Disposed.INST = new tink_core__$Signal_Disposed();
{
	stx_schema_Test.main();
	haxe_EntryPoint.run();
}
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
